---
- hosts: all
  become: yes
  become_user: root
  pre_tasks:
    - name: enable tests
      set_fact:
        dockerized_apache: no
        openhab_2_5_0: no
      tags: always
    
    # ************ INIT CONFIG ***********   
    - { import_role: { name: _init }, tags: [ 'always' ] }                                       # detect environment and load configs
    # ************************************   

    - name: loaded values from config files
      debug:
        msg: 
          - "mode:       {{inventory_hostname}}"
          - "server:     {{server_ip}}"
          - "gateway:    {{server_gateway}}"
          - "network:    {{server_network}}"
          - "arpha:      {{server_arpa}}"
          - "os-name:    {{ansible_distribution}}"
      tags: always

    - name: dynamic values from init role
      debug:
        msg: 
          - "production: {{ 'active' if is_production else 'inactive' }}"
          - "flags:      is_suse: {{is_suse}}, is_fedora: {{is_fedora}}"
          - "www:        user: {{www_username}}, group: {{www_group}}, etc: {{www_etc}}"
      tags: always

    - { import_role: { name: fluentd, tasks_from: create_shared_folder }, tags: [ 'fluentd' ] }  # is creating /etc/fluent/_.ansible.d

    - { import_role: { name: apache, tasks_from: create_shared_folder }, tags: [ 'apache' ] }    # is creating /etc/{{www_etc}}/_.ansible.d

  tasks:
    - { import_role: { name: base }, tags: [ 'base' ] }                                          # basic setup like global folders and some often used basic packages

    - { import_role: { name: network }, tags: [ 'network' ] }                                    # basic network tweaks like enabled ipv6
      
    - { import_role: { name: firewalld }, tags: [ 'firewalld' ] }                                # firewalld configuration
    - { import_role: { name: dns }, tags: [ 'dns' ] }                                            # dns server to handle you server domain properly together with a vpn
    
    - { import_role: { name: cron }, tags: [ 'cron' ] }                                          # basic cron configuration + common cron jobs
    - { import_role: { name: cron_service_check }, tags: [ 'cron_service_check' ] }              # checking for failed service starts

    - { import_role: { name: mdadm }, tags: [ 'mdadm' ] }                                        # raid monitor + weekly check cron job
    - { import_role: { name: smartd }, tags: [ 'smartd' ] }                                      # disk monitoring

    - { import_role: { name: container }, tags: [ 'container' ] }                                # installs and initializes the container infrastructure (docker & podman)

    - { import_role: { name: ssh }, tags: [ 'ssh' ] }                                            # settup allowed ssh user

    - { import_role: { name: openvpn }, tags: [ 'openvpn' ] }                                    # vpn server installation
    - { import_role: { name: openvpn_mobile }, tags: [ 'openvpn' ] }                             # vpn configuration (mobile access)

    - { import_role: { name: postfix }, tags: [ 'postfix' ] }                                    # mail server to forward root mails

    - { import_role: { name: php }, tags: [ 'php' ] }                                            # php cli
    #- { import_role: { name: php }, tags: [ 'php' ], when: "not dockerized_apache" }             # php cli
    
    - { import_role: { name: java }, tags: [ 'java' ] }                                          # jdk 1.8
    - { import_role: { name: java_maven }, tags: [ 'java_maven' ] }                              # apache maven => needed to compile cloudsync
    - { import_role: { name: java_ant }, tags: [ 'java_ant' ] }                                  # apache ant
    - { import_role: { name: java_jython }, tags: [ 'java_jython' ] }                            # python for java => used by openhab's rule engine

    - { import_role: { name: nfs }, tags: [ 'nfs' ] }                                            # nfs file server

    - { import_role: { name: samba }, tags: [ 'samba' ] }                                        # smb file server

    - { import_role: { name: ftp }, tags: [ 'ftp' ] }                                            # ftp file server for camera picture upload and cleanup             [docker]

    - { import_role: { name: mysql }, tags: [ 'mysql' ] }                                        # mysql db => needed by nextcloud and openhab                       [docker]

    - { import_role: { name: influxdb }, tags: [ 'influxdb' ] }                                  # influxdb => needed by openhab and netdata                         [docker]
    
    - { import_role: { name: elasticsearch }, tags: [ 'elasticsearch' ] }                        # elasticsearch db => needed by elastalert and fluentd              [docker]
    - { import_role: { name: kibana }, tags: [ 'kibana' ] }                                      # elasticsearch management ui kibana                                [docker]
    
    - { import_role: { name: redis }, tags: [ 'redis' ] }                                        # redis db => needed by nextcloud                                   [docker]
    
    - { import_role: { name: mosquitto }, tags: [ 'mosquitto' ] }                                # mqtt message broker                                               [docker]

    - { import_role: { name: apache_ssl }, tags: [ 'apache_ssl' ] }                              # ssl certificates used for apache https
    - { import_role: { name: apache }, tags: [ 'apache' ], when: "not dockerized_apache" }       # web server
    - { import_role: { name: apache_docker }, tags: [ 'apache' ], when: "dockerized_apache|bool" }    # web server                                                        [docker]

    - { import_role: { name: fluentd }, tags: [ 'fluentd' ] }                                    # log collector !!! MUST BE THE LAST ONE !!!

    # ************ FLUSH HANDLER ***********    
    - { meta: flush_handlers }                                                                   # Previous roles are independent from upcomming roles, But lot of upcomming roles are depending from previous roles
    # **************************************

    - { import_role: { name: user }, tags: [ 'user' ] }                                          # default users and permissions (linux, samba, web ...)
    
    - { import_role: { name: elastalert }, tags: [ 'elastalert' ] }                              # log alerting

    #- { import_role: { name: clamav, tags: [ 'clamav' ] }                                      # antivirus

    - { import_role: { name: netdata }, tags: [ 'netdata' ] }                                    # server monitoring

    - { import_role: { name: grafana }, tags: [ 'grafana' ] }                                    # graphical dashboards                                              [docker]

    - { import_role: { name: mysql_phpmyadmin }, tags: [ 'mysql_phpmyadmin' ] }                  # phpMyAdmin

    - { import_role: { name: apache_webui }, tags: [ 'apache_webui' ] }                          # responsive web ui

    - { import_role: { name: nextcloud }, tags: [ 'nextcloud' ] }                                # private cloud
     
    - { import_role: { name: openhab }, tags: [ 'openhab' ] }                                    # openhab iot server
    - { import_role: { name: openhab_toolbox }, tags: [ 'openhab_toolbox' ] }                    # admin scripts and tools

    - { import_role: { name: cron_backup_rsync }, tags: [ 'cron_backup_rsync' ] }                # rsync copy of {{data_path}} to {{local_backup_path}}dataDisk/

    - { import_role: { name: deployment }, tags: [ 'deployment' ] }                              # ansible deployment project + backup collector

    # ************ CUSTOM ROLES ************
    - { include_tasks: "{{config_path}}roles.yml", tags: [ 'always' ] }                          # Details can be found inside the demo configuration 'config/demo/roles.yml'
    # **************************************

    # ****** BACKUP RESTORE ON STAGING *****     
    - { import_role: { name: backup_restore }, tags: [ 'backup_restore' ], when: "not is_production" } # !!! will drop and reimport nextcloud, openhab, maxvin and mysql databases
    # **************************************
    
  post_tasks:
    - { import_role: { name: nextcloud, tasks_from: enable_apps }, tags: [ 'nextcloud' ] }       # ENABLE NEXTCLOUD APPS needs a running system (php, database, redis ...)

    - { import_role: { name: kibana, tasks_from: import_dashboards }, tags: [ 'kibana' ] }       # IMPORT KIBANA DASHBOARDS needs a running system (elasticsearch & kibana)
