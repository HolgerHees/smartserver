---
- hosts: all
  become: yes
  become_user: root
  pre_tasks:
    - name: init
      import_tasks: roles/_init/tasks/main.yml                                  # detect environment and load configs
      tags: always

    - name: loaded values from config files
      debug:
        msg: 
          - "mode:       {{inventory_hostname}}"
          - "server:     {{server_ip}}"
          - "gateway:    {{server_gateway}}"
          - "network:    {{server_network}}"
          - "arpha:      {{server_arpa}}"
          - "os-name:    {{ansible_distribution}}"
      tags: always

    - name: dynamic values from init role
      debug:
        msg: 
          - "production: {{ 'active' if is_production else 'inactive' }}"
          - "flags:      is_suse: {{is_suse}}, is_fedora: {{is_fedora}}"
          - "www:        user: {{www_username}}, group: {{www_group}}, etc: {{www_etc}}"
      tags: always

    - name: create shared fluentd ._ansible folder
      import_tasks: roles/fluentd/tasks/create_shared_folder.yml                # is creating /etc/fluent/_.ansible.d
      tags: fluentd

    - name: create shared apache ._ansible folder
      import_tasks: roles/apache/tasks/create_shared_folder.yml                 # is creating /etc/{{www_etc}}/_.ansible.d
      tags: apache

  roles:
    - { role: base, tags: [ 'base' ] }                                          # basic setup like global folders and some often used basic packages

    - { role: network, tags: [ 'network' ] }                                    # basic network tweaks like enabled ipv6
      
    - { role: firewalld, tags: [ 'firewalld' ] }                                # firewalld configuration
    - { role: dns, tags: [ 'dns' ] }                                            # dns server to handle you server domain properly together with a vpn
    
    - { role: cron, tags: [ 'cron' ] }                                          # basic cron configuration + common cron jobs
    - { role: cron_service_check, tags: [ 'cron_service_check' ] }              # checking for failed service starts

    - { role: mdadm, tags: [ 'mdadm' ] }                                        # raid monitor + weekly check cron job
    - { role: smartd, tags: [ 'smartd' ] }                                      # disk monitoring

    - { role: container, tags: [ 'container' ] }                                # installs and initializes the container infrastructure (docker & podman)

    - { role: ssh, tags: [ 'ssh' ] }                                            # settup allowed ssh user

    - { role: openvpn, tags: [ 'openvpn' ] }                                    # vpn server installation
    - { role: openvpn_mobile, tags: [ 'openvpn' ] }                             # vpn configuration (mobile access)
    - { role: openvpn_cloud, tags: [ 'openvpn' ] }                              # vpn configuration (cloud)

    - { role: postfix, tags: [ 'postfix' ] }                                    # mail server to forward root mails

    - { role: php, tags: [ 'php' ] }                                            # php cli
    
    - { role: java, tags: [ 'java' ] }                                          # jdk 1.8
    - { role: java_maven, tags: [ 'java_maven' ] }                              # apache maven => needed to compile cloudsync
    - { role: java_ant, tags: [ 'java_ant' ] }                                  # apache ant
    - { role: java_jython, tags: [ 'java_jython' ] }                            # python for java => used by openhab's rule engine

    - { role: nfs, tags: [ 'nfs' ] }                                            # nfs file server

    - { role: samba, tags: [ 'samba' ] }                                        # smb file server

    - { role: ftp, tags: [ 'ftp' ] }                                            # ftp file server for camera picture upload and cleanup             [docker]

    - { role: mysql, tags: [ 'mysql' ] }                                        # mysql db => needed by nextcloud and openhab                       [docker]

    - { role: influxdb, tags: [ 'influxdb' ] }                                  # influxdb => needed by openhab and netdata                         [docker]
    
    - { role: elasticsearch, tags: [ 'elasticsearch' ] }                        # elasticsearch db => needed by elastalert and fluentd              [docker]
    - { role: kibana, tags: [ 'kibana' ] }                                      # elasticsearch management ui kibana                                [docker]
    
    - { role: redis, tags: [ 'redis' ] }                                        # redis db => needed by nextcloud                                   [docker]
    
    - { role: mosquitto, tags: [ 'mosquitto' ] }                                # mqtt message broker                                               [docker]

    - { role: apache_ssl, tags: [ 'apache_ssl' ] }                              # ssl certificates used for apache https
    - { role: apache, tags: [ 'apache' ] }                                      # web server
    #- { role: apache_docker, tags: [ 'apache_docker' ] }                        # web server                                                       [docker]

    - { role: fluentd, tags: [ 'fluentd' ] }                                    # log collector !!! MUST BE THE LAST ONE !!!

    # ******* SPECIAL FLUSH HANDLER ********
    # Previous roles are independent from upcomming roles, But lot of upcomming roles are depending from previous roles
    - { role: _flush, tags: [ 'all' ], tasks_from: main.yml }
    # **************************************

    - { role: elastalert, tags: [ 'elastalert' ] }                              # log alerting

    #- { role: clamav, tags: [ 'clamav' ] }                                      # antivirus

    - { role: apache_webui, tags: [ 'apache_webui' ] }                          # responsive web ui
    - { role: mysql_phpmyadmin, tags: [ 'mysql_phpmyadmin' ] }                  # phpMyAdmin

    - { role: nextcloud, tags: [ 'nextcloud' ] }                                # private cloud
     
    - { role: netdata, tags: [ 'netdata' ] }                                    # server monitoring
    - { role: grafana, tags: [ 'grafana' ] }                                    # graphical dashboards                                              [docker]

    - { role: roomba, tags: [ 'roomba' ] }                                      # roomba vacuum cleaner. is using mosquitto.

    - { role: vcontrold, tags: [ 'vcontrold' ] }                                # heating
    #- { role: electricmeter, tags: [ 'electricmeter' ] }                        # electricity
    - { role: openhab, tags: [ 'openhab' ] }                                    # openhab iot server
    - { role: openhab_toolbox, tags: [ 'openhab_toolbox' ] }                    # admin scripts and tools

    - { role: alexa, tags: [ 'alexa' ] }                                        # deployable alexa skill project.

    - { role: deployment, tags: [ 'deployment' ] }                              # ansible deployment project + backup collector

    - { role: cloudsync, tags: [ 'cloudsync' ] }                                # encrypted backup sync job to remote cloud endpoint
    - { role: cloudexport, tags: [ 'cloudexport' ] }                            # prepare local cloud endpoint (clouduser and nfs export)

    - { role: cron_backup_rsync, tags: [ 'cron_backup_rsync' ] }                # rsync copy of {{data_path}} to {{local_backup_path}}dataDisk/
    - { role: cron_backup_axxus, tags: [ 'cron_backup_axxus' ] }                # backup axxus
    
    - { role: user, tags: [ 'user' ] }                                          # default users and permissions (linux, samba, web ...)
    
    - { role: backup_restore, tags: [ 'backup_restore' ], when: "not is_production" } # !!! will drop and reimport nextcloud, openhab, maxvin and mysql databases
    
  post_tasks:
    # ENABLE NEXTCLOUD APPS needs a running system (php, database, redis ...) 
    - name: enable nextcloud apps                                               # enable nextcloud apps => news, keeweb ....
      import_tasks: roles/nextcloud/tasks/enable_apps.yml
      tags: [ 'nextcloud' ]

    # IMPORT KIBANA DASHBOARDS needs a running system (elasticsearch & kibana) 
    - name: import kibana dashboards                                            # import kibana dashboards
      import_tasks: roles/kibana/tasks/import_dashboards.yml
      tags: [ 'kibana' ]
