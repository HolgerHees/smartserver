---
- hosts: all
  become: yes
  become_user: root
  pre_tasks:
    #- name: debug
    #  debug: msg="{{ hostvars }}"
    #  tags: always
      
    - name: set config path
      set_fact:
        config_path: "config/{{inventory_hostname}}/"
      tags: always

    - name: load env vars
      include_vars: "{{config_path}}env.yml"
      tags: always
      
    - name: detect ip address
      set_fact:
        host_ip: "{{ item }}"
      with_items: "{{ ansible_all_ipv4_addresses }}"
      when: "item == production_ip or item == develop_ip"
      tags: always
        
    - fail:
        msg: "No valid host ip found. Allowed are: production: {{ production_ip if production_ip else 'disabled' }}, develop: {{ develop_ip if develop_ip else 'disabled' }}"
      when: host_ip is not defined
  
    - name: load vault vars
      include_vars: "{{config_path}}vault/vault.yml"
      ignore_errors: true
      tags: always
      
    - name: set pre state vars
      set_fact:
        is_suse: "{{ansible_distribution == 'openSUSE Leap'}}"
        is_fedora: "{{ansible_distribution == 'Fedora'}}"
        is_production: "{{host_ip == production_ip}}"
        vault_active: "{{admin_mail is defined}}"
      tags: always
      
    - name: load shared vars
      include_vars: "config/shared.yml"
      tags: always
      
    - name: set apache vars
      set_fact:
        www_username: "{{ 'wwwrun' if is_suse else 'apache' }}"
        www_group: "{{ 'www' if is_suse else 'apache' }}"
        www_etc: "{{ '/etc/apache2/' if is_suse else '/etc/httpd/' }}"
      tags: always
      
    - name: set post state vars
      set_fact:
        use_vault_files: "{{is_production and vault_active}}"
        vault_files: "{{config_path}}vault/"
        use_import_files: "{{not is_production}}"
        local_import_path: "{{playbook_dir}}/{{config_path}}backup/"
      tags: always
      
    - name: debug
      debug:
        msg: 
          - "mode:       {{inventory_hostname}}"
          - "server:     {{server_ip}}"
          - "gateway:    {{server_gateway}}"
          - "network:    {{server_network}}"
          - "arpha:      {{server_arpa}}"
          - "os-name:    {{ansible_distribution}}"
          - "vault:      {{ 'active' if vault_active else 'inactive' }}"
          - "production: {{ 'active' if is_production else 'inactive' }}"
          - "www:        user: {{www_username}}, group: {{www_group}}, etc: {{www_etc}}"
          - "flags:      is_suse: {{is_suse}}, is_fedora: {{is_fedora}}"
      tags: always
  roles:
    - { role: base, tags: [ 'base' ] }                                          # basic setup like global folders and some often used basic packages

    - { role: network, tags: [ 'network' ] }                                    # basic network tweaks like enabled ipv6
      
    - { role: firewalld, tags: [ 'firewalld' ] }                                # firewalld configuration
    - { role: dns, tags: [ 'dns' ] }                                            # dns server to handle you server domain properly together with a vpn
    
    - { role: cron, tags: [ 'cron' ] }                                          # basic cron configuration + common cron jobs
    - { role: cron_service_check, tags: [ 'cron_service_check' ] }              # checking for failed service starts

    - { role: mdadm, tags: [ 'mdadm' ] }                                        # raid monitor + weekly check cron job
    - { role: smartd, tags: [ 'smartd' ] }                                      # disk monitoring

    - { role: fluentd, tags: [ 'fluentd' ] }                                    # log collector => is creating /etc/fluent/_.ansible.d

    - { role: container, tags: [ 'container' ] }                                # installs and initializes the container infrastructure (docker & podman)

    - { role: ssh, tags: [ 'ssh' ] }                                            # settup allowed ssh user

    - { role: openvpn, tags: [ 'openvpn' ] }                                    # vpn server

    - { role: postfix, tags: [ 'postfix' ] }                                    # mail server to forward root mails

    - { role: php, tags: [ 'php' ] }                                            # php cli
    
    - { role: java, tags: [ 'java' ] }                                          # jdk 1.8
    - { role: java_maven, tags: [ 'java_maven' ] }                              # apache maven => needed to compile cloudsync
    - { role: java_ant, tags: [ 'java_ant' ] }                                  # apache ant
    - { role: java_jython, tags: [ 'java_jython' ] }                            # python for java => used by openhab's rule engine

    - { role: apache_ssl, tags: [ 'apache_ssl' ] }                              # ssl certificates used for apache https
    - { role: apache, tags: [ 'apache' ] }                                      # web server => is creating {{www_etc}}_.ansible.d
    #- { role: apache_docker, tags: [ 'apache_docker' ] }                        # web server => is creating {{www_etc}}_.ansible.d                  [docker]

    - { role: nfs, tags: [ 'nfs' ] }                                            # nfs file server

    - { role: samba, tags: [ 'samba' ] }                                        # smb file server

    - { role: ftp, tags: [ 'ftp' ] }                                            # ftp file server for camera picture upload and cleanup             [docker]

    - { role: clamav, tags: [ 'clamav' ] }                                      # antivirus

    - { role: mysql, tags: [ 'mysql' ] }                                        # mysql db => needed by nextcloud and openhab                       [docker]

    - { role: influxdb, tags: [ 'influxdb' ] }                                  # influxdb => needed by openhab and netdata                         [docker]
    
    - { role: elasticsearch, tags: [ 'elasticsearch' ] }                        # elasticsearch db => needed by elastalert and fluentd              [docker]
    - { role: kibana, tags: [ 'kibana' ] }                                      # elasticsearch management ui kibana                                [docker]
    
    - { role: redis, tags: [ 'redis' ] }                                        # redis db => needed by nextcloud                                   [docker]
    
    - { role: mosquitto, tags: [ 'mosquitto' ] }                                # mqtt message broker                                               [docker]

    - { role: elastalert, tags: [ 'elastalert' ] }                              # log alerting

    - { role: apache_webui, tags: [ 'apache_webui' ] }                          # responsive web ui
    - { role: mysql_phpmyadmin, tags: [ 'mysql_phpmyadmin' ] }                  # phpMyAdmin

    - { role: nextcloud, tags: [ 'nextcloud' ] }                                # private cloud
     
    - { role: netdata, tags: [ 'netdata' ] }                                    # server monitoring
    - { role: grafana, tags: [ 'grafana' ] }                                    # graphical dashboards                                              [docker]

    - { role: roomba, tags: [ 'roomba' ] }                                      # roomba vacuum cleaner. is using mosquitto.

    - { role: vcontrold, tags: [ 'vcontrold' ] }                                # heating
    #- { role: electricmeter, tags: [ 'electricmeter' ] }                        # electricity
    - { role: openhab, tags: [ 'openhab' ] }                                    # openhab iot server
    - { role: openhab_toolbox, tags: [ 'openhab_toolbox' ] }                    # admin scripts and tools

    - { role: alexa, tags: [ 'alexa' ] }                                        # deployable alexa skill project.

    - { role: deployment, tags: [ 'deployment' ] }                              # ansible deployment project + backup collector

    - { role: cloudsync, tags: [ 'cloudsync' ] }                                # encrypted backup sync job to remote cloud endpoint
    - { role: cloudexport, tags: [ 'cloudexport' ] }                            # prepare local cloud endpoint (user "philipp" and nfs export)

    - { role: cron_backup_rsync, tags: [ 'cron_backup_rsync' ] }                # rsync copy of {{data_path}} to {{local_backup_path}}dataDisk/
    - { role: cron_backup_axxus, tags: [ 'cron_backup_axxus' ] }                # backup axxus
    
    - { role: user, tags: [ 'user' ] }                                          # default users and permissions (linux, samba, web ...)
    
    - { role: backup_restore, tags: [ 'backup_restore' ], when: "use_import_files|bool" } # !!! will drop and reimport nextcloud, openhab, maxvin and mysql databases
    
  post_tasks:
    # ENABLE NEXTCLOUD APPS needs a running system (php, database, redis ...) 
    - name: enable nextcloud apps                                               # enable nextcloud apps (news, keeweb ...).
      import_tasks: roles/nextcloud/tasks/enable_apps.yml
      tags: [ 'nextcloud' ]
