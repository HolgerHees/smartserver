# suse user: ftp:x:476:476:FTP Account:/srv/ftp:/sbin/nologin
# suse group: ftp:!:476:
# fedora user: ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
# fedora group: ftp:x:50:
- name: ensure user and group exists
  vars:
    user: { name: "ftp", system: true, home: "{{ftp_path}}" }
    group: { name: "ftp", system: true }
  import_tasks: roles/user/tasks/add_system_user.yml

- name: prepare ftp folder
  file:
    path: "{{ftp_path}}"
    state: directory
    owner: "{{system_users['ftp'].name}}"
    group: "{{system_groups['ftp'].name}}"
    mode: 750

- name: check owner and group
  file:
    path: "{{ftp_path}}"
    state: directory
    owner: "{{system_users['ftp'].name}}"
    group: "{{system_groups['ftp'].name}}"
    recurse: yes

#- name: check podman image exists => is_suse
#  shell: "podman images custom_vsftpd:1.0.0"
#  register: image_exists
#  changed_when: "'custom_vsftpd' not in image_exists.stdout"
#  when: "is_suse|bool"

#- name: compose podman image => is_suse and image does not exists
#  shell: "podman build -t custom_vsftpd:1.0.0 roles/ftp/templates/container/"
#  register: output
#  when: "is_suse|bool and 'custom_vsftpd' not in image_exists.stdout"

#- name: check podman container exists => is_suse
#  shell: "podman ps -a --filter \"name=vsftpd\""
#  register: container_exists
#  changed_when: "'vsftpd' not in container_exists.stdout"
#  when: "is_suse|bool"

#- name: compose podman image => is_suse and container does not exists
#  shell: >
#    podman create \
#    --name=vsftpd \
#    --env "FTP_USER={{vault_ftp_username}}" \
#    --env "FTP_PASS={{vault_ftp__password}}" \
#    --env "FTP_UID={{system_users['ftp'].id}}" \
#    --env "FTP_GID={{system_groups['ftp'].id}}" \
#    --env "ONLY_UPLOAD=YES" \
#    --env "ONLY_DOWNLOAD=NO" \
#    --env "PASV_ENABLE=YES" \
#    --env "PASV_ADDRESS=127.0.0.1" \
#    --env "PASV_MIN=50000" \
#    --env "PASV_MAX=50100" \
#    --env "UMASK=027" \
#    --log-driver=journald \
#    --volume="{{ftp_path}}:/home/uploads:rw" \
#    -p 9021:21 \
#    -p 50000-50100:30000-30100 \
#    custom_vsftpd:1.0.0
#  register: output
#  notify: "restart vsftpd"
#  when: "is_suse|bool and 'vsftpd' not in container_exists.stdout"

#- name: create systemd service
#  vars:
#    container_name: "vsftpd"
#  copy:
#    content: "{{ lookup('template', 'roles/container/templates/podman_service') }}"
#    dest: "/etc/systemd/system/vsftpd.service"
#    owner: root
#    group: root
#    mode: 0644
#  notify: "restart vsftpd"
#  when: is_suse|bool

- name: build docker image
  vars:
    name: "ftp"
    image_name: "custom_vsftpd"
    image_version: "{{alpine_version}}"
    files:
      - roles/ftp/templates/container/Dockerfile
      - roles/ftp/templates/container/entrypoint.sh
  import_tasks: roles/container/tasks/build_docker_image.yml
  
- name: create docker container
  docker_container:
    name: vsftpd
    image: "custom_vsftpd:{{alpine_version}}"
    state: present
#    recreate: true
    env:
      FTP_USER: "{{vault_ftp_username}}"
      FTP_PASS: "{{vault_ftp_password}}"
      FTP_UID: "{{system_users['ftp'].id}}"
      FTP_GID: "{{system_groups['ftp'].id}}"
      ONLY_UPLOAD: "YES"
      ONLY_DOWNLOAD: "NO"
      PASV_ENABLE: "YES"
      PASV_ADDRESS: "127.0.0.1"
      PASV_MIN: "30000"
      PASV_MAX: "30100"
      UMASK: "027"
      TZ: "{{timezone}}"
    log_driver: journald
    log_options:
      tag: vsftpd
    volumes:
      - '{{ftp_path}}:/home/uploads:z'
    ports:
      - "21:21"
      - "30000-30100:30000-30100"
  notify: "restart vsftpd"

#- name: clean old docker images => image does not exists
#  shell: "docker rmi -f $(docker images --filter \"dangling=true\" -q)"
#  when: "'custom_vsftpd' not in image_exists.stdout"
  
# ***** FINALIZE *****
- name: create cron job
  vars:
    name: "Camera Cleanup"
    cmd: "find {{ftp_path}} -name \"*.jpg\" -mtime +2 -exec rm {} +"
    file: "ansible_ftp_camera"
    hour: "0"
    minute: "50"
  import_tasks: roles/cron/tasks/add_cronjob.yml

- name: create systemd service
  vars:
    container_name: "vsftpd"
  import_tasks: roles/container/tasks/add_docker_service.yml

- name: trigger service check handler
  vars:
    notify: "restart vsftpd"
    service: "vsftpd.service"
  import_tasks: roles/base/tasks/service_check.yml
          
    
    
