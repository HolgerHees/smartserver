- name: set version
  set_fact:
    redis_version: '5.0.8'
  tags: [ 'update_notifier_configs' ]
  
- name: check started docker
  systemd:
    name: docker
    state: started
    
#- name: check docker image exists
#  shell: "docker images custom_redis:1.0.0"
#  register: image_exists
#  changed_when: "'custom_redis' not in image_exists.stdout"
  
#- name: prepare build folder
#  file:
#    path: "{{global_build}}redis/"
#    state: directory
#    owner: root
#    group: root
#    mode: 0750
    
#- name: copy dockerfile
#  copy:
#    src: "roles/redis/templates/container/Dockerfile"
#    dest: "{{global_build}}redis/Dockerfile"
#    owner: root
#    group: root
#  when: "'custom_redis' not in image_exists.stdout"

## async docker build is used to show progress and prevent travisci killing our job because of inactivity
#- name: compose docker image => image does not exists
#  shell: "docker build -t custom_redis:1.0.0 {{global_build}}redis/"
#  async: 600
#  poll: 0
#  register: docker_build
#  when: "'custom_redis' not in image_exists.stdout"

#- name: wait for docker image => image does not exists
#  async_status: jid={{ docker_build.ansible_job_id }}
#  register: job_result
#  until: job_result.finished
#  retries: 10
#  delay: 60
#  when: "'custom_redis' not in image_exists.stdout"
  
#- name: debug
#  debug:
#    var: output

- name: create docker container
  docker_container:
    name: redis
    image: "redis:{{redis_version}}-alpine"
    state: present
#    network_mode: "none"
#    recreate: true
    env:
      TZ: "{{timezone}}"
    log_driver: journald
    log_options:
      tag: redis
    ports:
     - "127.0.0.1:6379:6379"
  notify: "restart redis"

#- name: clean old docker images => image does not exists
#  shell: "docker rmi -f $(docker images --filter \"dangling=true\" -q)"
#  when: "'custom_redis' not in image_exists.stdout"
  
# ***** FINALIZE *****
- name: create systemd service
  vars:
    container_name: "redis"
  import_tasks: roles/container/tasks/add_docker_service.yml

- name: register update notifier
  vars:
    name: "redis"
    type: "docker"
    url: "https://raw.githubusercontent.com/antirez/redis/5.0/00-RELEASENOTES"
    config: {
      repository: "redis",
      pattern: "^([0-9\\.]+)-alpine$"
    }
  import_tasks: roles/update_notifier/tasks/add_notifier.yml

- name: trigger service check handler
  vars:
    notify: "restart redis"
    service: "redis.service"
  import_tasks: roles/base/tasks/service_check.yml
