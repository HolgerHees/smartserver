- name: set version
  set_fact:
    influxdb_version: '2.7.10'
  tags: [ 'update_notifier_config' ]    

- name: "create user and group => user or group does not exists"
  vars:
    user: { name: "influxdb", system: true, home: "{{ global_lib }}influxdb" }
    group: { name: "influxdb", system: true }
  include_tasks: roles/user/shared/add_system_user.yml
  when: "'influxdb' not in system_users or 'influxdb' not in system_groups"

- name: prepare needed directories
  vars:
    directories:
      - { mode: "u=rwx,g=rwx,o=rx", owner: "{{system_users['influxdb'].name}}", group: "{{system_groups['influxdb'].name}}", path: "{{ global_etc }}influxdb" } # mode sync with influxdb entrypoint.sh
      - { mode: "u=rwx,g=,o=", owner: "{{system_users['influxdb'].name}}", group: "{{system_groups['influxdb'].name}}", path: "{{ global_lib }}influxdb" }      # mode sync with influxdb entrypoint.sh
      - { mode: "u=rwx,g=rx,o=",  owner: "{{system_users['influxdb'].name}}", group: "{{system_groups['influxdb'].name}}", path: "{{database_backup_path}}influxdb" }
      - { mode: "u=rwx,g=rwx,o=", owner: "root", group: "root", path: "{{ global_build }}influxdb" }
  include_tasks: roles/_shared/create_directories.yml

- name: create podman container
  containers.podman.podman_container:
    name: influxdb
    image: "influxdb:{{influxdb_version}}-alpine"
    state: present
    security_opt:
      - label=disable
    entrypoint: '["sh", "-c", "/entrypoint.sh influxd 2>&1" ]'
    user: "{{system_users['influxdb'].id}}:{{system_groups['influxdb'].id}}"
    env:
      DOCKER_INFLUXDB_INIT_MODE: "setup"
      DOCKER_INFLUXDB_INIT_USERNAME: "{{influxdb_admin_username}}"
      DOCKER_INFLUXDB_INIT_PASSWORD: "{{influxdb_admin_password}}"
      DOCKER_INFLUXDB_INIT_ORG: "default-org"
      DOCKER_INFLUXDB_INIT_BUCKET: "default-bucket"
      DOCKER_INFLUXDB_INIT_RETENTION: "1w"
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: "{{influxdb_admin_token}}"
      INFLUXD_REPORTING_DISABLED: "true"
#      INFLUXDB_LOGGING_FORMAT: "json"
#      INFLUXDB_DATA_WAL_FSYNC_DELAY: "1s"
      TZ: "{{timezone}}"
    log_driver: journald
    log_options:
      tag: influxdb
    network: "isolated"
    ip: "{{podman_influxdb_ip}}"
    volumes:
      - '{{ global_etc }}influxdb:/etc/influxdb2'
      - '{{ global_lib }}influxdb:/var/lib/influxdb2'
      - '{{database_backup_path}}influxdb:/var/lib/influxdb_backup'
    exposed_ports:
     - "8086"
  register: "podman_container_state"
  notify: "restart influxdb"

# ***** SERVICE CONFIGS *****
- name: handle systemd service
  vars:
    container_name: "influxdb"
    container_ip: "{{podman_influxdb_ip}}"
    container_readyness: { "type": "url_check", "url": "http://{{podman_influxdb_ip}}:8086/ping" }
    container_changed: "{{podman_container_state.changed}}"
  include_tasks: roles/container/shared/handle_podman_service.yml
  tags: ['systemd_watcher_config','systemd_service_config']

- name: add service name
  vars:
    host_name: "influxdb"
    host_ip_address: "{{podman_influxdb_ip}}"
  include_tasks: roles/_shared/add_to_hosts.yml

# ***** DEPENDENCY CONFIGS *****
- name: create cron job
  vars:
    name: "Influxdb Cleanup"
    cmd: "find {{database_backup_path}}influxdb/ -mindepth 1  -type d -mtime +3 -exec rm -rf {} +;"
    group: "influxdb"
    log: "dump_cleanup"
    hour: "0"
    minute: "45"
  include_tasks: roles/cron/shared/add_cronjob.yml
  tags: ['cron_job']

- name: register webui
  vars:
    name: "influxdb"
    js_file: "templates/webui/influxdb.js"
    i18n_files: [ { language: "de", file: "templates/webui/influxdb.de.json" } ]
    icons: [ 'templates/webui/icons/influxdb_logo.svg' ]
  include_tasks: roles/apache_webui/shared/add_webui.yml
  tags: ['apache_webui_config']

- name: copy apache vhost
  vars:
    sub_domain: "influxdb"
    usergroup: "admin"
    include: "templates/etc/apache2/_.ansible.vhost.d/influxdb.inc"
  include_tasks: roles/apache/shared/add_vhost.yml
  tags: ['apache_config']

- name: copy fluentd config
  vars:
    config_file: "templates/etc/fluent/_.ansible.d/influxdb.conf"
  include_tasks: roles/fluentd/shared/add_config.yml
  tags: ['fluentd_config']
  when: "monitoring_enabled"
    
- name: register update notifier
  vars:
    name: "influxdb"
    type: "docker"
    url: "https://docs.influxdata.com/influxdb/v{{influxdb_version | regex_replace('\\.[0-9]+$', '') }}/reference/release-notes/influxdb/"
    config: {
      repository: "influxdb",
      pattern: "^([0-9\\.]+)-alpine$"
    }
  include_tasks: roles/update_service/shared/add_software.yml
  tags: ['update_notifier_config']
  when: "update_service_software_check_enabled"

# CHECK local cli token => only needed if a new container is created and data folder already exists
- name: check influxdb service
  include_tasks: roles/influxdb/shared/wait_until_ready.yml
  when: "podman_container_state.changed"
  
- name: check cli config
  shell: "podman exec influxdb sh -c \"influx config list\""
  register: influxdb_config_result
  changed_when: False
  when: "podman_container_state.changed"
  
- name: create cli config token => config does not exists
  shell: "podman exec influxdb sh -c \"influx config create --config-name default --host-url http://localhost:8086 --org default-org --token '{{influxdb_admin_token}}' --active\""
  when: "podman_container_state.changed and '\tdefault\t' not in influxdb_config_result.stdout"
