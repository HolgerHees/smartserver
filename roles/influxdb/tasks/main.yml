- name: set version
  set_fact:
    influxdb_version: '2.1.1'
  tags: [ 'update_notifier_configs' ]    

- name: prepare needed folder
  file:
    path: '{{item.path}}'
    state: directory
    owner: "{{item.user}}"
    group: "{{item.group}}"
    mode: 0750
  with_items:
    - { user: "root", group: "root", path: "{{ global_build }}influxdb" }
    - { user: "1000", group: "1000", path: "{{ global_lib }}influxdb" }
    - { user: "root", group: "root", path: "{{backup_path}}influxdb" }

- name: check started docker
  systemd:
    name: docker
    state: started

- name: create docker container
  docker_container:
    name: influxdb
    image: "influxdb:{{influxdb_version}}-alpine"
    state: present
#    recreate: true
    entrypoint: "sh -c \"/entrypoint.sh influxd 2>&1\""
    env:
      DOCKER_INFLUXDB_INIT_MODE: "setup"
      DOCKER_INFLUXDB_INIT_USERNAME: "{{vault_influxdb_admin_username}}"
      DOCKER_INFLUXDB_INIT_PASSWORD: "{{vault_influxdb_admin_password}}"
      DOCKER_INFLUXDB_INIT_ORG: "default-org"
      DOCKER_INFLUXDB_INIT_BUCKET: "default-bucket"
      DOCKER_INFLUXDB_INIT_RETENTION: "1w"
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: "{{vault_influxdb_admin_token}}"
      INFLUXD_REPORTING_DISABLED: "true"
#      INFLUXDB_LOGGING_FORMAT: "json"
#      INFLUXDB_DATA_WAL_FSYNC_DELAY: "1s"
      TZ: "{{timezone}}"
    log_driver: journald
    log_options:
      tag: influxdb
    container_default_behavior: "compatibility"
    network_mode: "default"
    networks:
      - name: "isolated"
        ipv4_address: "{{docker_influxdb_ip}}"
    networks_cli_compatible: yes
    volumes:
      - '{{ global_lib }}influxdb:/var/lib/influxdb2:z'
      - '{{backup_path}}influxdb:/var/lib/influxdb_backup:z'
    exposed_ports:
     - "8086"
  register: influxdb_container_result
  notify: "restart influxdb"

- name: add container name
  vars:
    host_name: "influxdb"
    host_ip_address: "{{docker_influxdb_ip}}"
  import_tasks: roles/network/tasks/add_to_hosts.yml

# ***** FINALIZE *****
- name: create cron job
  vars:
    name: "Influxdb Cleanup"
    cmd: "find {{backup_path}}influxdb/ -mindepth 1  -type d -mtime +3 -exec rm -rf {} +;"
    file: "ansible_influxdb"
    hour: "0"
    minute: "45"
  import_tasks: roles/cron/tasks/add_cronjob.yml

- name: register webui
  vars:
    name: "influxdb"
    js_file: "templates/webui/influxdb.js"
    i18n_files: [ { language: "de", file: "templates/webui/influxdb.de.json" } ]
    icons: [ 'templates/webui/icons/influxdb_logo.svg' ]
  import_tasks: roles/apache_webui/tasks/add_webui.yml

- name: copy apache vhost
  vars:
    sub_domain: "influxdb"
    include: "templates/etc/apache2/_.ansible.vhost.d/influxdb.inc"
  import_tasks: roles/apache/tasks/add_vhost.yml

- name: copy fluentd config
  vars:
    config_file: "templates/etc/fluent/_.ansible.d/influxdb.conf"
  import_tasks: roles/fluentd/tasks/add_config.yml
    
- name: create systemd service
  vars:
    container_name: "influxdb"
  import_tasks: roles/container/tasks/add_docker_service.yml
  
- name: register update notifier
  vars:
    name: "influxdb"
    type: "docker"
    url: "https://docs.influxdata.com/influxdb/v2.0/reference/release-notes/influxdb/"
    config: {
      repository: "influxdb",
      pattern: "^([0-9\\.]+)-alpine$"
    }
  import_tasks: roles/update_daemon/tasks/add_software.yml

- name: trigger influxdb handler
  vars:
    notify: "restart influxdb"
    service: "influxdb.service"
  import_tasks: roles/_shared/tasks/service_check.yml

# CHECK local cli token => only needed if a new container is created and data folder already exists
- name: check influxdb service
  import_tasks: roles/influxdb/tasks/wait_until_ready.yml
  when: "influxdb_container_result.changed"
  
- name: check cli config
  shell: "docker exec influxdb sh -c \"influx config list\""
  register: influxdb_config_result
  changed_when: False
  when: "influxdb_container_result.changed"
  
- name: create cli config token => config does not exists
  shell: "docker exec influxdb sh -c \"influx config create --config-name default --host-url http://localhost:8086 --org default-org --token '{{vault_influxdb_admin_token}}' --active\""
  when: "influxdb_container_result.changed and '\tdefault\t' not in influxdb_config_result.stdout"
