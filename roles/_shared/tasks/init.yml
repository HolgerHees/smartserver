#- name: debug
#  debug: msg="{{ hostvars }}"
#  tags: always
  
#- name: read service facts
#  service_facts:
#  tags: always
      
# set config path based on hostname
- name: set config path
  set_fact:
    config_path: "config/{{inventory_hostname}}/"
  tags: always

# load initial environment variables
- name: load env vars
  include_vars: "{{config_path}}env.yml"
  tags: always
  
# detect main ip. must be specified in env.yml
- name: detect ip address
  set_fact:
    host_ip: "{{ item }}"
  with_items: "{{ ansible_all_ipv4_addresses }}"
  when: "item == production_ip or item == staging_ip"
  tags: always
    
# check for a valid main ip
- assert:
    that: host_ip is defined
    msg: "No valid ip found. Allowed are: production ({{ production_ip if production_ip else 'disabled' }}), staging ({{ staging_ip if staging_ip else 'disabled' }})"
  tags: always

- name: detect network interface
  shell: "ip a | grep -P \"inet {{host_ip}}\" | grep -Po \"[a-z0-9]*$\""
  register: "main_device_result"
  changed_when: False
  tags: always

# load vault file
- name: load vault vars
  include_vars: "{{config_path}}vault/vault.yml"
  tags: always
  
- name: check if vault is encrypted
  shell: "cat {{config_path}}vault/vault.yml | grep \"\\$ANSIBLE_VAULT\""
  changed_when: False
  failed_when: no
  register: "vault_check_result"
  
# load shared variables
- name: load shared vars
  include_vars: "config/pre_shared.yml"
  tags: always

# load initial environment variables
- name: load default vars
  include_vars: "config/default.yml"
  tags: always
  
- name: check default variables
  set_fact: 
    default_variables_check: |
      [
        {% for item in default_variables %}
            { 'name': '{{item}}',
              'state':
            {% if item not in vars and ('condition' not in default_variables[item] or default_variables[item]['condition']) %}
                {% if 'default' not in default_variables[item] %}
                  'missing'
                {% else %}
                  'default'
                {% endif %}
            {% else %}
                {% if item in vars %}
                  'custom'
                {% else %}
                  'not needed'
                {% endif %}
            {% endif %}
            },
        {% endfor %}
      ]
    
- name: apply default vars
  set_fact: 
    "{{item.name}}": "{{ default_variables[item.name]['default']}}"
  when: >
    item.state in ['failed','default']
  failed_when: >
    item.state  == 'failed'
  ignore_errors: yes
  register: check_result
  with_items: "{{default_variables_check}}"

#- name: apply default vars => ['green' means DEFAULT value, 'turquoise' means CUSTOM value or skipped, 'red' means MISSING value]
#  set_fact: 
#    "{{item}}": "{{ default_variables[item]['default'] if default_variables[item]['default'] is defined else None }}"
#  when: >
#    vars[item] is not defined
#    and
#    (
#      default_variables[item]['condition'] is not defined
#      or
#      default_variables[item]['condition']
#    )
#  failed_when: >
#    vars[item] is not defined
#    and 
#    default_variables[item]['default'] is not defined 
#    and
#    default_variables[item]['condition']
#  ignore_errors: yes
#  register: check_result
#  with_items: "{{default_variables}}"
  
- name: check for missing variables
  assert:
    that: "check_result.failed is not defined or not check_result.failed"
    msg: "Some variables are not defined. Please check the 'config/default.yml' file and add the missing variables to your configuration."

# set environment specific variables [pre]
- name: set pre state vars
  set_fact:
    system_users: {}
    system_groups: {}
    is_suse: "{{ansible_distribution == 'openSUSE Leap'}}"
    is_fedora: "{{ansible_distribution == 'Fedora'}}"
    is_ubuntu: "{{ansible_distribution == 'Ubuntu'}}"
    os_type: "{{ 'fedora' if ansible_distribution == 'Fedora' else 'ubuntu' if ansible_distribution == 'Ubuntu' else 'opensuse'}}"
    is_production: "{{host_ip == production_ip}}"
    default_gateway: "{{ ansible_default_ipv4['gateway'] }}"
#    ansible_remote_ip: "{{ ansible_ssh_host if ansible_ssh_host != '127.0.0.1' else host_ip }}"
    main_network_interface: "{{main_device_result.stdout_lines[0]}}"
    has_encrypted_vault: "{{true if vault_check_result.rc == 0 else false}}"
  tags: always
  
# load shared variables
- name: load shared vars
  include_vars: "config/post_shared.yml"
  tags: always

  
