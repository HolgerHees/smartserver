- name: install required packages => is_fedora
  yum:
    name: [
      #python2-setuptools      # needed by openssl ansible module
      python3-setuptools
      , certbot-apache
    ]
    state: present
  when: is_fedora|bool
  
- name: install required packages => is_suse
  zypper:
    name: [
      python2-setuptools      # needed by openssl ansible module
      #python3-setuptools
      , python2-certbot-apache # is installing right Python libraries cryptography needed by openssl ansible module and python2-setuptools
      #, python3-certbot-apache
    ]
    state: present
  when: is_suse|bool
  
# **** CERTIFICATE - check ****
- name: check certificate
  stat:
    path: /etc/letsencrypt/live/{{server_domain}}/
  register: certificate_files
  changed_when: not certificate_files.stat.exists

- name: check for vault certificate files => is_production and certificate_files does not exists
  stat:
    path: "{{config_path}}vault/letsencrypt"
  register: certificate_files_from_vault
  changed_when: certificate_files_from_vault.stat.exists
  when: is_production and not certificate_files.stat.exists

- name: decide to create or restore easy_rsa certificates
  set_fact:
    certificate_file_mode: "{% if certificate_files_from_vault.stat is defined and certificate_files_from_vault.stat.exists %}vault{% elif not certificate_files.stat.exists %}create{% endif %}"
  changed_when: not certificate_files.stat.exists

# **** CERTIFICATE - process ****
- name: prepare needed folder => certificate_file_mode == 'create'
  file:
    path: "/etc/{{item}}"
    state: directory
    owner: root
    group: root
    mode: 0755
  with_items:
    - "letsencrypt/"
    - "letsencrypt/live"
    - "letsencrypt/live/{{server_domain}}"
  when: "certificate_file_mode == 'create'"

- name: generate openssl privatekey => certificate_file_mode == 'create'
  openssl_privatekey:
    path: "/etc/letsencrypt/live/{{server_domain}}/privkey.pem"
  when: "certificate_file_mode == 'create'"
    
- name: generate openssl csr => certificate_file_mode == 'create'
  openssl_csr:
    path: "/etc/letsencrypt/live/{{server_domain}}/cert.csr"
    privatekey_path: "/etc/letsencrypt/live/{{server_domain}}/privkey.pem"
    common_name: "*.{{server_domain}}"
  when: "certificate_file_mode == 'create'"
    
- name: generate openssl certificate => certificate_file_mode == 'create'
  openssl_certificate:
    path: "/etc/letsencrypt/live/{{server_domain}}/fullchain.pem"
    privatekey_path: "/etc/letsencrypt/live/{{server_domain}}/privkey.pem"
    csr_path: "/etc/letsencrypt/live/{{server_domain}}/cert.csr"
    provider: selfsigned
  when: "certificate_file_mode == 'create'"
  
- name: install certificate => certificate_file_mode == 'vault'
  unarchive:
    src: "{{config_path}}vault/letsencrypt/letsencrypt.tgz"
    dest: "/etc/"
    creates: "/etc/letsencrypt/"
    decrypt: yes
  notify: "restart apache2"
  when: "certificate_file_mode == 'vault'"

- name: create certificate symlink
  file:
    src: "letsencrypt"
    dest: "/etc/certbot"
    state: link
    follow: no
    owner: root
    group: root
    
# TODO add renew job
#certbot certonly --manual --preferred-challenges=dns --email {{vault_root_email}} --server https://acme-v02.api.letsencrypt.org/directory --agree-tos -d *.{{server_domain}} -d {{server_domain}}
