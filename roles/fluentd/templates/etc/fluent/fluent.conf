@include _.ansible.d/*.conf

# **** FLUENTD ****
<filter fluent.**>
  @type record_modifier
  <record>
    group fluentd
    level ${tag_parts[1]}
  </record>
  <replace>
    key level
    expression /^fatal$/
    replace ALERT
  </replace>
  <replace>
    key level
    expression /^error$/
    replace ERROR
  </replace>
  <replace>
    key level
    expression /^warn$/
    replace WARN
  </replace>
  <replace>
    key level
    expression /^info$/
    replace INFO
  </replace>
  <replace>
    key level
    expression /^debug|trace$/
    replace DEBUG
  </replace>
  <replace>
    key level
    expression /^((?!ALERT|ERROR|WARN|INFO|DEBUG).)*$/
    replace UNKNOWN
  </replace>
</filter>

<match *.**>
  @type copy
  
  #<store>
  #  @type elasticsearch
  #  host 127.0.0.1
  #  port 9200
  #  logstash_format true
  #  logstash_prefix fluentd
  #  logstash_dateformat %Y-%m-%d
  #  include_tag_key true
  #  type_name _doc
  #  tag_key @log_name
  #  
  #  <buffer tag>
  #      @type memory
  #      flush_thread_count 2
  #      flush_interval 5s
  #  </buffer>
  #</store>

  <store>
        @type loki
        url "http://loki:3100"
        extra_labels {"env":"fluentd"}
        <label>
          group
        </label>
        <label>
          level
        </label>
        #line_format json
        flush_interval 10s
        flush_at_shutdown true
        buffer_chunk_limit 1m
  </store>
  
  <store>
    @type relabel
    @label @NOTIFICATION
  </store>
      
#  <store>
#    @type stdout
#  </store>
</match>

<label @NOTIFICATION>
  # ****** STAGE: '_notify' => extract group and level from tag name and send notification ******
  <filter _notify.**>
    @type record_modifier
    <record>
      group ${tag_parts[4]}
      level ${tag_parts[3]}
    </record>
  </filter>
  
  <match _notify.**>
    @type mail
    host postfix
    port 25
    from fluentd
    to root
    subject 'LOG %s of \'%s\' occurs %s time(s)'
    subject_out_keys level,group,count
    message 'LOG %s of \'%s\' occurs %s time(s)\n\n%s'
    message_out_keys level,group,count,message
  </match>

  #<match _notify.**>
  #  @type stdout
  #</match>
  # ***********************************************************************************************

  # ****** STAGE: '_count' => count and group events forward to the next '_notify' stage **********
  <match _count.**>
    @type grepcounter
    count_interval 60 
    input_key message
    regexp .*
    threshold 1
    add_tag_prefix _notify
    delimiter \n\n----------------------------------------------------------------------\n\n
  </match>
  # ***********************************************************************************************

  # ****** STAGE: '_filter' => filter out unwanted events and forward to the next '_count' stage **
  <filter _filter.ERROR.**>
    @type grep
    <regexp>
      key group
      pattern /^(?!.*(netdata|crony).*)/
    </regexp>
  </filter>
  
  <filter _filter.ERROR.**>
    @type grep
    <exclude>
      key group
      pattern /sshd/
    </exclude>
    <exclude>
      key message
      pattern /Failed to release session/
    </exclude>
  </filter>

  <filter _filter.ERROR.**>
    @type grep
    <exclude>
      key group
      pattern /nextcloud/
    </exclude>
    <exclude>
      key message
      pattern /Unable to parse content from/
    </exclude>
  </filter>

  <filter _filter.ERROR.**>
    @type grep
    <exclude>
      key group
      pattern /php/
    </exclude>
    <exclude>
      key message
      pattern /ALERT: oops, unknown child([0-9]*) exited with code 127/
    </exclude>
  </filter>

  <filter _filter.ERROR.**>
    @type grep
    <exclude>
      key group
      pattern /mysql/
    </exclude>
    <exclude>
      key message
      pattern /Aborted connection [0-9]* to db: 'openhab'/
    </exclude>
  </filter>

  <match _filter.ERROR.** _filter.ALERT.**>
    @type rewrite_tag_filter
    <rule>
      key group
      pattern /^(.*)/
      tag _count.${tag_parts[0]}.${tag_parts[1]}.$1
    </rule>
  </match>
  # ***********************************************************************************************

  # ****** STAGE: default => catch ERRORS and ALERTS and forward to the next '_filter' stage ******
  <match **>
    @type rewrite_tag_filter
    <rule>
      key level
      pattern /^ERROR$/
      tag _filter.ERROR.${tag}
    </rule>
    <rule>
      key level
      pattern /^ALERT$/
      tag _filter.ALERT.${tag}
    </rule>
  </match>
  # ***********************************************************************************************
</label>

# Listen DRb for debug
#<source>
#  @type debug_agent
#  @id debug_agent_input
#
#  bind 127.0.0.1
#  port 24230
#</source>

## match tag=debug.** and dump to console
#<match debug.**>
#  @type stdout
#  @id stdout_output
#</match>

<source>
  @type forward
  @id forward_input
</source>

#<source>
#  @type http
#  @id http_input
#
#  port 8888
#</source>

#<source>
#  @type monitor_agent
#  @id monitor_agent_input
#
#  port 24220
#</source>
