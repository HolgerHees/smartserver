<source>
  @type systemd
  tag systemd
  path {{ '/run' if is_suse else '/var' }}/log/journal
  matches [{ "PRIORITY": [0,1,2,3,4,5,6] }]
  <storage>
    @type local
    persistent false
    path systemd.pos
  </storage>
  <entry>
    fields_strip_underscores true
    fields_lowercase true
    #field_map {"MESSAGE": "log", "_PID": ["process", "pid"], "_CMDLINE": "process", "_COMM": "cmd"}
  </entry>
</source>
<filter systemd>
  @type record_modifier
  <record>
    group ${record['syslog_identifier']}
    level ${record['priority']}
  </record>
  <replace>
    key level
    expression /^0|1|2$/
    replace ALERT
  </replace>
  <replace>
    key level
    expression /^3$/
    replace ERROR
  </replace>
  <replace>
    key level
    expression /^4$/
    replace WARN
  </replace>
  <replace>
    key level
    expression /^5$/
    replace NOTICE
  </replace>
  <replace>
    key level
    expression /^6$/
    replace INFO
  </replace>
  <replace>
    key level
    expression /^7$/
    replace DEBUG
  </replace>
  <replace>
    key level
    expression /^((?!ALERT|ERROR|WARN|NOTICE|INFO|DEBUG).)*$/
    replace UNKNOWN
  </replace>
</filter>  

<match systemd>
  @type rewrite_tag_filter
  #log_level trace
  # 'comm' field comes from systemd
  <rule>
    key comm
    # 'cat' values is sometimes filled by systemd-cat
    pattern /^((?!cat).+)$/
    tag ${tag_parts[0]}.$1
  </rule>
  # otherwise fallback to syslog_identifier
  <rule>
    key syslog_identifier
    pattern /(.+)/
    tag ${tag_parts[0]}.$1
  </rule>
</match>

<filter systemd.**>
  @type record_modifier
#  whitelist_keys group,level,message
  remove_keys boot_id,cap_effective,cmdline,comm,exe,gid,hostname,machine_id,pid,source_realtime_timestamp, syslog_timestamp, syslog_facility,syslog_identifier,priority,syslog_pid, systemd_cgroup,systemd_invocation_id,systemd_owner_uid,systemd_session,systemd_slice,systemd_unit,systemd_user_slice,transport,uid,selinux_context,stream_id
</filter>

#<match systemd>
#  @type rewrite_tag_filter
#  <rule>
#    key group
#    pattern ^(.+)$
#    tag ${tag}.$1
#  </rule>
#</match>
#<filter systemd.cronic>
#  @type parser
#  key_name message
#  reserve_data true
#  inject_key_prefix cronic.
#  <parse>
#    @type json
#  </parse>
#</filter>
#<filter systemd.cronic>
#  @type record_modifier
#  <record>
#    message ${record['cronic.message']}
##    cmd ${record['cronic.cmd']}
#  </record>
#  remove_keys cronic.message
#</filter>
