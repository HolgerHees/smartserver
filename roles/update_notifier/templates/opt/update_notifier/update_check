#!/usr/bin/python3

import json
import glob
import os.path
import sys

import importlib

from datetime import datetime

import subprocess

server_host = "{{server_domain}}"

target_dir = "{{global_log}}update_notifier/"
config_dir = "{{global_etc}}update_notifier/"

state_file = "{}software_versions.state".format(target_dir)

global_config = { 
  "github_access_token": "{{vault_deployment_token_git}}"
}

limit_config = None
if len(sys.argv) >= 2:
    limit_config = sys.argv[1]

last_states = {}
if os.path.isfile(state_file):
    with open(state_file, 'r') as f:
        data = json.load(f)
        for state in data['states']:
            last_states[state['name']] = state

update_time = "{}Z".format(datetime.now().utcnow().isoformat('T'))
            
current_states = { 'last_update': update_time, 'states': [] }

print("Processing projects")

update_message_r = []

files = glob.glob("{}*.conf".format(config_dir))
for config_file in files:
    with open(config_file) as json_data:
        config = json.load(json_data)
        
        if limit_config != None and limit_config != config['name']:
            continue

        print("  - '{}'".format(config['name']), end='')

        try:
            plugin = importlib.import_module("plugins.{}".format(config['type']))
        except ModuleNotFoundError:
            print("Plugin '{}' not found".format(config['type']),file=sys.stderr)
            print("")
            continue
        
        repo = plugin.Repository(config['config'], global_config)
        
        last_state = last_states.get(config['name'], None)

        last_updates = last_state['updates'] if last_state != None else None

        current_version = last_state['current'] if last_state != None else None
        if current_version == None or current_version['version'] != repo.getCurrentVersionString():
            current_version = repo.getCurrentVersion()

        current_state = { 'name': config['name'], 'type': config['type'], 'url': config['url'], 'current': current_version, 'updates': [] }
        
        new_versions = repo.getUpdates(last_updates)
        for branch in new_versions:
            current_state['updates'].append(new_versions[branch])
            
        new_updates = []
        if last_updates != None:
            
            for current_update in current_state['updates']:
                found = False
                for last_update in last_updates:
                    if last_update['version'] == current_update['version']:
                        found = True
                
                if not found:
                    new_updates.append(current_update['version'])

        if len(new_updates) > 0:
            print( " \033[0;31mhas new updates {}\033[0m".format(new_updates))
            update_message_r.append("{}: versions {} are available".format(current_state['name'], new_updates))
        elif len(current_state['updates']) > 0:
            print( " \033[1;33mhas updates\033[0m")
        else:
            print( " \033[0;32mis updatet\033[0m")
            
        current_states['states'].append(current_state)
            
if limit_config == None:
    if len(update_message_r) > 0:
        message_r = []
        message_r.append("There are new updates")
        for message in update_message_r:
            message_r.append("  - {}".format(message))
        message_r.append("\n\nCheck https://{}/?ref=other|tools|update_notifier for details".format(server_host))
        
        print("Send notification mail")

        subprocess.run([ u"echo -e \"{}\" | mail -s \"{}\" root".format("\n".join(message_r),"New updates available") ], shell=True, check=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=None )

    with open(state_file, 'w') as f:
        json.dump(current_states, f)
