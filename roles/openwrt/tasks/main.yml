- name: prepare default configs
  set_fact:
    default_packages: [ "mc", "htop", "strace", "tcpdump", "ntpclient", "openssh-sftp-server" ]
    default_features: [ "rpcd", "snmpd" ]
    device_files: {}

- name: prepare needed folder
  file:
    path: '{{item.path}}'
    state: directory
    owner: "{{item.user}}"
    group: "{{item.group}}"
    mode: "{{item.mode}}"
  with_items:
    - { user: "1000", group: "1000", mode: "u=rwx,g=rx,o=", path: "{{global_etc}}openwrt" }
    - { user: "1000", group: "1000", mode: "u=rwx,g=rx,o=", path: "{{global_etc}}openwrt/ap/" }

# **** PREPARE & BUILD CONFIGS ****
- name: prepare used services
  set_fact:
    devices: |
      {
        {% for device in openwrt_devices %}
          '{{device.host}}': {
             'host': '{{device.host}}', 'name': '{{device.name}}', 'is_ap': {{'1' if 'ap' in device.config.roles else '0'}},
             'features': [
               {% for feature in default_features %}
                 { 'name': '{{feature}}', 'cfg': 'service_config_{{feature}}'},
               {% endfor %}
               {% if device.config.features is defined %}{% for feature in device.config.features %}
                 { 'name': '{{feature}}', 'cfg': 'service_config_{{feature}}'},
               {% endfor %}{% endif %}
             ]
           },
        {% endfor %}
      }

# check feature files
- name: check for custom host data
  shell: "find {{config_path}}templates/openwrt/ -type f 2>/dev/null"
  changed_when: no
  failed_when: no
  delegate_to: 127.0.0.1
  register: custom_feature_result

- name: check for core feature data
  shell: "find roles/openwrt/templates/features/ -type f"
  changed_when: no
  delegate_to: 127.0.0.1
  register: core_feature_result

# include feature configs
- name: include feature configs
  include_vars:
    file: "{{item.value['src']}}"
    name: "{{item.value['cfg']}}"
#  when: "'roles/openwrt/templates/features/' + item.value['name'] + '/config.yml' in core_feature_result.stdout_lines"
  with_dict:  |
    {
      {% for host in devices %}{% for feature in devices[host]['features'] %}
          {% if config_path + 'templates/openwrt/' + feature['name'] + '/config.yml' in custom_feature_result.stdout_lines %}
              '{{feature['name']}}': { 'cfg': '{{feature['cfg']}}', 'src': '{{ config_path + 'templates/openwrt/' + feature['name'] + '/config.yml' }}' },
          {% elif 'roles/openwrt/templates/features/' + feature['name'] + '/config.yml' in core_feature_result.stdout_lines %}
              '{{feature['name']}}': { 'cfg': '{{feature['cfg']}}', 'src': '{{ 'roles/openwrt/templates/features/' + feature['name'] + '/config.yml' }}' },
          {% endif %}
      {% endfor %}{% endfor %}
    }

- name: prepare removed packages
  set_fact:
    device_remove_packages: |
      {
        {% for device in openwrt_devices %}
          '{{device.host}}': [
              {% for feature in devices[device.host]['features'] %}
                 {% if feature['cfg'] in vars and 'remove_packages' in vars[feature['cfg']] %}{% for package in vars[feature['cfg']]['remove_packages'] %}
                    '{{package}}',
                  {% endfor %}{% endif %}
              {% endfor %}
              {% if device.config.remove_packages is defined %}{% for package in device.config.remove_packages %}
                  '{{package}}',
              {% endfor %}{% endif %}
          ],
        {% endfor %}
      }

- name: prepare installed packages
  set_fact:
    device_install_packages: |
      {
        {% for device in openwrt_devices %}
          '{{device.host}}': [
              {% for package in default_packages %}{% if package not in device_remove_packages[device.host] %}
                  '{{package}}',
              {% endif %}{% endfor %}
              {% for feature in devices[device.host]['features'] %}
                  {% if feature['cfg'] in vars and 'install_packages' in vars[feature['cfg']] %}{% for package in vars[feature['cfg']]['install_packages'] %}
                    '{{package}}',
                  {% endfor %}{% endif %}
              {% endfor %}
              {% if device.config.install_packages is defined %}{% for package in device.config.install_packages %}
                  '{{package}}',
              {% endfor %}{% endif %}
          ],
        {% endfor %}
      }

# process feature files
- name: process file data
  vars:
    device_list: "{{devices.values() | list}}"
    custom_files: "{{custom_feature_result.stdout_lines}}"
    core_files: "{{core_feature_result.stdout_lines}}"
  include_tasks: process_device.yml
  with_items:
    - { path: "{{config_path}}templates/openwrt/", files: "custom_files", type: "host" }
    - { path: "{{config_path}}templates/openwrt/", files: "custom_files", type: "features" }
    - { path: "roles/openwrt/templates/features/", files: "core_files", type: "features" }

# **** DEPLOYMENT CONFIG ****
- name: synchronize deployment script
  synchronize:
    src: "templates/deploy.sh"
    dest: "{{global_etc}}openwrt/ap/deploy.sh"
    archive: no
    checksum: yes
    group: yes
    owner: yes
    perms: yes
    recursive: yes
    rsync_opts:
      - "--chown=root:root"
      - "--chmod=F750"

- name: copy deployment config
  vars:
    install_packages: "{{device_install_packages[item.host]}}"
    remove_packages: "{{device_remove_packages[item.host]}}"
    enabled_services: |
      [
        {% for feature in devices[item.host]['features'] %}{% if feature['cfg'] in vars and 'initd' in vars[feature['cfg']] and vars[feature['cfg']]['initd'] %}
          '{{feature['name']}}',
        {% endif %}{% endfor %}
      ]
    hostname: "{{item.name | lower}}"
    is_ap: "{{ item.is_ap }}"
  template:
    src: "templates/deploy.env"
    dest: "{{global_etc}}openwrt/ap/{{item.host}}.env"
    owner: "root"
    group: "root"
    mode: "u=rw,g=r,o="
  with_items: "{{devices.values() | list}}"

# **** TEMPLATE CONFIGS ****
- name: check template paths
  file:
    dest: "{{global_etc}}openwrt/ap/{{item}}"
    state: "directory"
  with_items: |
    {
      {% for host in device_files %}{% for file in device_files[host].values() %}
          '{{file.host}}/{{file.filename | dirname}}' : 1,
      {% endfor %}{% endfor %}
    }

- name: copy template configs
  vars:
    device_email: "{{root_email}}"
    device_name:  "{{item['name']}}"
    device_is_ap: "{{devices[item.host]['is_ap']}}"
  template:
    src: "{{item.src}}"
    dest: "{{global_etc}}openwrt/ap/{{item.host}}/{{item.filename}}"
    owner: "root"
    group: "root"
    mode: "u=rwX,g=rX,o="
#  changed_when: no
  with_items: |
    [
      {% for host in device_files %}{% for file in device_files[host].values() %}
          {{file | to_json }},
      {% endfor %}{% endfor %}
    ]

# **** WEB UI ****
- name: register webui
  vars:
    name: "openwrt"
    js_file: "templates/webui/openwrt.js"
    i18n_files: [ { language: "de", file: "templates/webui/openwrt.de.json" } ]
    icons: []
  import_tasks: roles/apache_webui/shared/add_webui.yml
