- name: "container : build_podman_image_task : run shutdown hook"
  include_tasks: "{{container_shutdown_hook}}"
  when: "podman_container_image_state.rc == 0 and container_shutdown_hook is defined"

- name: "container : build_podman_image_task : stop service"
  systemd:
    name: "{{container_name}}"
    state: stopped
  failed_when: no
  when: "podman_container_image_state.rc == 0"

- name: "container : build_podman_image_task : clean old image"
  shell: "podman image rm --force {{item}}"
  with_items: |
    [
        {% if podman_container_image_state.rc == 0 %}'{{podman_container_image_state.stdout}}',{% endif %}
        {% if podman_named_image_state.rc == 0 and podman_container_image_state.stdout != podman_named_image_state.stdout %}'{{podman_named_image_state.stdout}}',{% endif %}
    ]

# async podman build is used to show progress and prevent travisci killing our job because of inactivity
- name: "container : build_podman_image_task : compose podman image => image does not exists"
#  shell: "podman build --network host --no-cache -t {{image_name}} {{global_build}}{{container_name}}/"
  shell: "podman build --network host -t {{image_name}} {{global_build}}{{container_name}}/ > {{global_build}}{{container_name}}/build.log"
#  async: 1800
#  poll: 0
#  register: podman_build
#  changed_when: yes

#- name: "container : build_podman_image_task : wait for podman image => image does not exists"
#  async_status: jid={{ podman_build.ansible_job_id }}
#  register: job_result
#  until: job_result.finished
#  retries: 30
#  delay: 60
#  when: "podman_build.changed"

#- name: "container : push image to podman registry"
#  shell: "podman push {{dockerhub_username}}/{{image_name}}"
#  when: "podman_build.changed or ( image_remote_exists.skipped | default(False) and image_name not in image_remote_exists.stdout )"
