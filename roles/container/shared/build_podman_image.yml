- name: "container : build_podman_image : prepare build folder"
  file:
    path: "{{global_build}}{{container_name}}/"
    state: directory
    owner: root
    group: root
    mode: 0750

- name: "container : build_podman_image : copy dockerfiles"
  vars:
    alpine_build_cache: |-
      --mount=type=cache,id=alpine-{{alpine_version}}-pip,sharing=locked,target=/root/.cache/pip/ \
          --mount=type=cache,id=alpine-{{alpine_version}}-apk,sharing=locked,target=/var/cache/apk \
          ln -s /var/cache/apk /etc/apk/cache
  template:
    src: "{{item}}"
    dest: "{{global_build}}{{container_name}}/{{item | basename}}"
    owner: root
    group: root
    mode: 0600
  register: file_status
  with_items: "{{image_files + (['roles/container/templates/entrypoint.sh'] if entrypoint_startup is defined else [] )}}"

- name: "container : build_podman_image : get container image id"
  shell: "podman inspect --format '{{ '{{' }} .Image {{ '}}'}}' {{container_name}}"
  register: "podman_container_image_state"
  changed_when: no #"podman_container_image_state.rc != 0"
  failed_when: no
#  when: "file_status.changed"

- name: "container : build_podman_image : get local image id"
  shell: "podman image inspect {{image_name}} --format '{{ '{{' }} .Id {{ '}}'}}'"
  register: "podman_named_image_state"
  changed_when: "podman_named_image_state.rc != 0"
  failed_when: no
#  when: "file_status.changed"

- name: "container : build_podman_image_task"
  include_tasks: "roles/container/shared/_build_podman_image_task.yml"
  when: "file_status.changed or podman_named_image_state.rc != 0 or ( podman_container_image_state.rc == 0 and podman_container_image_state.stdout != podman_named_image_state.stdout )"
