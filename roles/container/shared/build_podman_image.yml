- name: "container : build_podman_image : prepare build folder"
  file:
    path: "{{global_build}}{{name}}/"
    state: directory
    owner: root
    group: root
    mode: 0750

- name: "container : build_podman_image : check podman local image exists"
  shell: "podman images {{image_name}}:{{image_version}}"
  register: image_local_exists
  changed_when: "image_name not in image_local_exists.stdout"

#- name: "container : check podman remote image exists"
#  shell: "podman search {{dockerhub_username}}/{{image_name}}:{{image_version}}"
#  register: image_remote_exists
#  changed_when: "image_name not in image_remote_exists.stdout"
#  when: "image_upload | default(False) and dockerhub_username is not defined"

- name: "container : build_podman_image : copy dockerfiles"
  template:
    src: "{{item}}"
    dest: "{{global_build}}{{name}}/{{item | basename}}"
    owner: root
    group: root
    mode: 0600
  register: file_status
  with_items: "{{files}}"

# async podman build is used to show progress and prevent travisci killing our job because of inactivity
- name: "container : build_podman_image : compose podman image => image does not exists"
  shell: "podman build --network host --no-cache -t {{image_name}}:{{image_version}} {{global_build}}{{name}}/"
  async: 1800
  poll: 0
  register: podman_build
  changed_when: yes
  when: "file_status.changed or image_local_exists.changed"

- name: "container : build_podman_image : wait for podman image => image does not exists"
  async_status: jid={{ podman_build.ansible_job_id }}
  register: job_result
  until: job_result.finished
  retries: 30
  delay: 60
  when: "podman_build.changed"

- name: "container : build_podman_image : stop service '{{name}}'"
  systemd:
    name: "{{name}}"
    state: stopped
    enabled: yes
    masked: no
  failed_when: no
  when: "podman_build.changed"

- name: "container : build_podman_image : cleanup outdated container '{{name}}'"
  shell: "podman rm {{name}}"
  changed_when: "podman_container_state.rc == 0"
  failed_when: "podman_container_state.rc != 0 and podman_container_state.rc != 1"
  register: podman_container_state
  when: "podman_build.changed"

#- name: "container : push image to podman registry"
#  shell: "podman push {{dockerhub_username}}/{{image_name}}:{{image_version}}"
#  when: "podman_build.changed or ( image_remote_exists.skipped | default(False) and image_name not in image_remote_exists.stdout )"
