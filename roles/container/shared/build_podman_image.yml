- name: "container : build_podman_image : prepare build folder"
  file:
    path: "{{global_build}}{{container_name}}/"
    state: directory
    owner: root
    group: root
    mode: 0750

- name: "container : build_podman_image : copy dockerfiles"
  template:
    src: "{{item}}"
    dest: "{{global_build}}{{container_name}}/{{item | basename}}"
    owner: root
    group: root
    mode: 0600
  register: file_status
  with_items: "{{image_files + (['roles/container/templates/entrypoint.sh'] if entrypoint_services is defined else [] )}}"

- name: "container : build_podman_image : get container image id"
  shell: "podman inspect --format '{{ '{{' }} .Image {{ '}}'}}' {{container_name}}"
  register: "podman_container_image_state"
  changed_when: no #"podman_container_image_state.rc != 0"
  failed_when: no
#  when: "file_status.changed"

- name: "container : build_podman_image : get local image id"
  shell: "podman image inspect {{image_name}}:{{image_version}} --format '{{ '{{' }} .Id {{ '}}'}}'"
  register: "podman_named_image_state"
  changed_when: "podman_named_image_state.rc != 0"
  failed_when: no
#  when: "file_status.changed"

- name: "container : build_podman_image : clean old image"
  shell: "podman image rm -f {{item}}"
  with_items: |
    [
        {% if podman_container_image_state.rc == 0 %}'{{podman_container_image_state.stdout}}',{% endif %}
        {% if podman_named_image_state.rc == 0 and podman_container_image_state.stdout != podman_named_image_state.stdout %}'{{podman_named_image_state.stdout}}',{% endif %}
    ]
  when: "file_status.changed or podman_named_image_state.rc != 0 or ( podman_container_image_state.rc == 0 and podman_container_image_state.stdout != podman_named_image_state.stdout )"

# async podman build is used to show progress and prevent travisci killing our job because of inactivity
- name: "container : build_podman_image : compose podman image => image does not exists"
  shell: "podman build --network host --no-cache -t {{image_name}}:{{image_version}} {{global_build}}{{container_name}}/"
  async: 1800
  poll: 0
  register: podman_build
  changed_when: yes
  when: "file_status.changed or podman_named_image_state.rc != 0 or ( podman_container_image_state.rc == 0 and podman_container_image_state.stdout != podman_named_image_state.stdout )"

- name: "container : build_podman_image : wait for podman image => image does not exists"
  async_status: jid={{ podman_build.ansible_job_id }}
  register: job_result
  until: job_result.finished
  retries: 30
  delay: 60
  when: "podman_build.changed"

#- name: "container : push image to podman registry"
#  shell: "podman push {{dockerhub_username}}/{{image_name}}:{{image_version}}"
#  when: "podman_build.changed or ( image_remote_exists.skipped | default(False) and image_name not in image_remote_exists.stdout )"
