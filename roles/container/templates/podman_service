[Unit]
Description={{container_name}}
StartLimitBurst=12
StartLimitIntervalSec=180
Wants=network-online.target
After=network-online.target{% if container_after is defined and container_after != None %}{% for dependency_name in container_after %} {{dependency_name}}{% if '.' not in dependency_name %}.service{% endif %}{% endfor %}{% endif +%}
#RequiresMountsFor={{global_tmp}}containers/storage/

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Type=notify
NotifyAccess=all
TimeoutStartSec=0
TimeoutStopSec={{container_stop_timeout | default('300')}}
Restart=on-failure
RestartSec=10
#RestartSteps=4
#RestartMaxDelaySec=60
Environment=NETAVARK_FW=none
{% if container_readyness['type'] == 'state_check' %}
    {%- set readyness_cmd="podman inspect --format '{{ .State.Status }}' " + container_name + " | grep 'running'" %}
{% elif container_readyness['type'] == 'ping_check' %}
    {%- set readyness_cmd="ping -c 1 " + container_readyness['ip'] + " > /dev/null" %}
{% elif container_readyness['type'] == 'port_check' %}
    {%- set readyness_cmd="nc -w 5 -z" + ( ' -u' if 'protocol' in container_readyness and container_readyness['protocol'] == 'udp' else '' ) + " " + container_readyness['ip'] + " " + container_readyness['port'] %}
{% elif container_readyness['type'] == 'url_check' %}
    {%- set readyness_cmd="wget -q " + container_readyness['url'] %}
{% elif container_readyness['type'] == 'container_exec' %}
    {%- set readyness_cmd="podman exec " + container_name + " sh -c \\\"" + container_readyness['cmd'] + "\\\" 2> /dev/null" %}
{% elif container_readyness['type'] == 'host_exec' %}
    {%- set readyness_cmd=container_readyness['cmd'] %}
{% endif %}
ExecStartPre=/bin/sh -c "echo 'Readyness check started' && while ! {{readyness_cmd}}; do sleep {{ '1.0' if container_readyness['type'] in ['url_check','container_exec','host_exec'] else '0.5' }}; done && systemd-notify --ready && echo 'Readyness detected' &"
{% if container_pre_exec is defined and container_pre_exec != None %}
ExecStartPre=/bin/sh -c "echo 'Run PreExec' && {{container_pre_exec}}"
{% endif %}
ExecStart=/bin/sh -c "/usr/bin/podman start {{container_name}} | grep -v \"^{{container_name}}$\""
ExecStartPost=/bin/sh -c "(echo 'Set gateway' && /opt/container/update_gateways --container={{container_name}} --gateway=default{% if container_routes is defined and container_routes != None %}{% for route in container_routes %} --gateway={{route.subnet}}:{{route.gateway}}{% endfor %}{% endif %})"
{% if container_post_exec is defined and container_post_exec != None %}
ExecStartPost=/bin/sh -c "echo 'Run PostExec' && {{container_post_exec}}"
{% endif %}
ExecStop=/usr/bin/podman stop {{container_name}}
#ExecStop=/usr/bin/podman stop -t {{container_stop_timeout | default('300')}} {{container_name}}
{% if container_reload_exec is defined and container_reload_exec != None %}
ExecReload={{container_reload_exec}}
{% endif %}
SyslogIdentifier={{container_name}}

[Install]
WantedBy=multi-user.target
