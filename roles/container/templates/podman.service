[Unit]
Description={{container_name}}
StartLimitBurst=12
StartLimitIntervalSec=180
#Wants=network-online.target
After={% if container_name in ['fluentd','loki'] %}systemd-journald.service{% else %}network-online.target fluentd.service{% endif %}
{% if container_after is defined and container_after != None %}{% for dependency_name in container_after %} {{dependency_name}}{% if '.' not in dependency_name %}.service{% endif %}{% endfor %}{% endif %}

RequiresMountsFor={{base_path}}

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Type=notify
NotifyAccess=all
TimeoutStartSec=120
TimeoutStopSec=30
Restart=on-failure
RestartSec=60
#RestartSteps=4
#RestartMaxDelaySec=60
Environment=NETAVARK_FW=none
{% if container_readyness['type'] == 'state_check' %}
    {%- set readyness_cmd="podman inspect --format '{{ .State.Status }}' " + container_name + " | grep 'running'" %}
{% elif container_readyness['type'] == 'ping_check' %}
    {%- set readyness_cmd="ping -c 1 " + container_readyness['ip'] + " > /dev/null" %}
{% elif container_readyness['type'] == 'port_check' %}
    {%- set readyness_cmd="nc -w 1 -z" + ( ' -u' if 'protocol' in container_readyness and container_readyness['protocol'] == 'udp' else '' ) + " " + container_readyness['ip'] + " " + container_readyness['port'] %}
{% elif container_readyness['type'] == 'url_check' %}
    {%- set readyness_cmd="wget -q " + container_readyness['url'] %}
{% elif container_readyness['type'] == 'container_exec' %}
    {%- set readyness_cmd="podman exec " + container_name + " sh -c \\\"" + container_readyness['cmd'] + "\\\" 2> /dev/null" %}
{% elif container_readyness['type'] == 'host_exec' %}
    {%- set readyness_cmd=container_readyness['cmd'] %}
{% endif %}
ExecStartPre=/bin/sh -c "echo 'Service - Starting readyness check' && while ! {{readyness_cmd}}; do sleep {{ '1.0' if container_readyness['type'] in ['url_check','container_exec','host_exec'] else '0.5' }}; done && systemd-notify --ready && echo 'Service - Readyness detected' &"
{% if container_pre_exec is defined and container_pre_exec != None %}
ExecStartPre=/bin/sh -c "echo 'Service - Run PreExec' && {{container_pre_exec}}"
{% endif %}
ExecStart=/bin/sh -c "echo 'Service - Starting container' && /usr/bin/podman start {{container_name}} > /dev/null"
ExecStartPost=/bin/sh -c "echo 'Service - Set gateway' && /opt/container/update_gateways --container={{container_name}} --gateway=default{% if container_routes is defined and container_routes != None %}{% for route in container_routes %} --gateway={{route.subnet}}:{{route.gateway}}{% endfor %}{% endif %}"
{% if container_post_exec is defined and container_post_exec != None %}
ExecStartPost=/bin/sh -c "echo 'Service - Run PostExec' && {{container_post_exec}}"
{% endif %}
ExecStop=/bin/sh -c "echo 'Service - Stopping container' && /usr/bin/podman stop --ignore -t 15 {{container_name}} > /dev/null {% if container_ip is defined %} && ip neigh flush {{container_ip}}{% endif %}"
{% if container_reload_exec is defined and container_reload_exec != None %}
ExecReload=/bin/sh -c "echo 'Service - Run ReloadExec' && {{container_reload_exec}}"
{% endif %}
SyslogIdentifier={{container_name}}

[Install]
WantedBy=multi-user.target
