[Unit]
Description={{container_name}}
Requires=docker.service{% if container_requires is defined %}{% for dependency_name in container_requires %} {{dependency_name}}{% if '.' not in dependency_name %}.service{% endif %}{% endfor %}{% endif %}

After=docker.service{% if container_after is defined %}{% for dependency_name in container_after %} {{dependency_name}}{% if '.' not in dependency_name %}.service{% endif %}{% endfor %}{% endif %}

{% if container_wants is defined %}Wants={% for dependency_name in container_wants %}{{dependency_name}}{% if '.' not in dependency_name %}.service{% endif %} {% endfor %}{% endif %}


[Service]
TimeoutStartSec=0
TimeoutStopSec={{container_stop_timeout | default('300')}}
Restart=always
ExecStart=/usr/bin/docker start -a {{container_name}}
{% if container_routes is defined %}{% for route in container_routes %}
ExecStartPost=/bin/bash -c "sleep 1 && {% if route.subnet == 'default' %}nsenter -n -t $(docker inspect --format {{'{{'}}.State.Pid{{'}}'}} {{container_name}}) ip route del {{route.subnet}} && {% endif %}nsenter -n -t $(docker inspect --format {{'{{'}}.State.Pid{{'}}'}} {{container_name}}) ip route add {{route.subnet}} via {{route.gateway}}"
{% endfor %}{% endif %}
ExecStop=/usr/bin/docker stop {{container_name}}
#ExecStop=/usr/bin/docker stop -t {{container_stop_timeout | default('300')}} {{container_name}}
#SyslogIdentifier={{container_name}}
StandardOutput=null
StandardError=null

[Install]
WantedBy=multi-user.target
