#!/usr/bin/python3

import subprocess
import json
import socket
import re
import ipaddress
import json
from textwrap import wrap

from smartserver.processlist import Processlist
from smartserver import nsenter


TYPE_HEADLINE = 0
TYPE_NETWORK = 1
TYPE_CONTAINER = 2

row_colors = {
    TYPE_HEADLINE: [0,"1;37","1;37","1;37","1;37","1;37","1;37"],
    TYPE_NETWORK: [0,"0;30;47","0;30;43","0;30;45","0;30;45","0;30;45","0;30;46"],
    TYPE_CONTAINER: [0,"0;37","0;33","0;35","0;35","0;35","0;36"]
}

port_colors = {
    "local": "0;37",
    "intern": "0;32",
    "extern": "0;91"
}

MAX_INCOMING_RULES_LENGTH = MAX_OUTGOING_RULES_LENGTH = 58

class Network:
    def __init__(self,id,name,driver,scope):
        self.id = id
        self.name = name
        self.driver = driver
        self.scope = scope
        self.connection_r = {}
        self.subnet = ""
        self.gateway = ""
        self.bridge = ""

    def addDetails(self,subnet,gateway,bridge):
        self.subnet = subnet
        self.gateway = gateway
        self.bridge = bridge

    def addConnection(self,connection):
        self.connection_r[connection.ip + connection.container.name] = connection

    def getConnection(self, container):
        for connection in self.connection_r.values():
            if connection.container == container:
                return connection
        return None

class Container:
    def __init__(self, name, sandboxKey, pids):
        self.name = name
        self.sandboxKey = sandboxKey
        self.pids = pids
        self.ports = []

    def addPort(self, port, protocol):
        self.ports.append({"port": port, 'protocol': protocol})

    def isService(self):
        return self.sandboxKey is None

class Connection:
    def __init__(self,container, ip, veth):
        self.container = container
        self.ip = ip
        self.veth = veth
        self.ports = []

    def addPort(self, port, protocol, access):
        self.ports.append({"port": port, 'protocol': protocol, 'access': access})

class Chain:
    def __init__(self,name):
        self.name = name
        self.rule_r = []

    def addRule(self, sourceIp, sourcePorts, targetIp, targetPorts, mode, protocol, interface):
        self.rule_r.append({"chain": self.name, "sourceIp": sourceIp, "sourcePorts": sourcePorts, "targetIp": targetIp, "targetPorts": targetPorts, "mode": mode, "protocol": protocol, "interface": interface })

def execCommand(cmd, cwd=None ):
    return subprocess.run([ cmd ], shell=True, check=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=cwd )

def convertSetToArray(value):
    return value['set'] if isinstance(value, dict) and 'set' in value else [value]

def detectAccess(ip, host_ip, interface = None):
    return "intern" if ip == host_ip or interface == "macvlan" else "local"

def splitRulesIntoRows(rules, sort_lambda, max_length):
    values = list(set(rules.keys()))
    if sort_lambda is not None:
        values.sort(key=sort_lambda)
    else:
        values.sort()
    values = list(map(lambda x: x.replace(' ', '°'), values))
    return wrap(", ".join(values), max_length )

def convertRowToArray(rows, rules):
    array = []
    if len(rows) > 0:
        values = rows.pop(0).strip(',').replace('°', ' ').split(", ")
        for value in values:
            array.append(rules[value])
    return array

# Collect ip addresses
ip_list = execCommand("ip a").stdout.decode("utf-8")

# Collect network links
link_list = execCommand("ip link").stdout.decode("utf-8")

# Collect host data
host_ip = execCommand("ip route get 1.1.1.1 | grep -oP 'src \K\S+'").stdout.decode("utf-8").strip()
host_gateway = execCommand("ip route | grep default").stdout.decode("utf-8").split()[2]
host_device = re.findall("^.*{}.*".format(host_ip), ip_list, flags=re.MULTILINE)[0].split()[-1]
host_subnet = execCommand("ip route | grep 'src {}'".format(host_ip)).stdout.decode("utf-8").split()[0]

# Collect networks
network_r = {}
_result = execCommand("podman network ls --format='json'")
_networks_json = json.loads(_result.stdout.decode("utf-8"))
for _json in _networks_json:
    network = Network(_json['id'],_json['name'],_json['driver'],"local")
    network_r[network.name]=network

# Collect network details
_result = execCommand("podman network inspect {}".format(" ".join(list(network_r.keys()))))
_networks_json = json.loads(_result.stdout.decode("utf-8"))
for _json in _networks_json:
    network = network_r[_json['name']]
    subnet = _json['subnets'][0]['subnet']
    gateway = _json['subnets'][0]['gateway']

    result = re.findall("^.*{}.*".format(gateway), ip_list, flags=re.MULTILINE)
    bridge_device = re.findall("^.*{}.*".format(gateway), ip_list, flags=re.MULTILINE)[0].split()[-1] if len(result)>0 else host_device
    network.addDetails(subnet,gateway,bridge_device)

network = Network('host', 'host', 'host',"local")
network.addDetails(host_subnet,host_gateway,host_device)
network_r[network.name]=network

container_r = {}
pid_map_r = {}

dns_map_r = {}
dns_reverse_r = {}

# Collect container details
result = execCommand("podman ps -a --format='{{.Names}}'")
_container_names = result.stdout.decode("utf-8").split("\n")
_containers_result = execCommand("podman inspect {}".format(" ".join(_container_names)))
_containers_json = json.loads(_containers_result.stdout.decode("utf-8"))
_interface_result_r = {}
for container_json in _containers_json:
    name = container_json['Name']

    if name in container_r:
        container = container_r[name]
    else:
        pids = [ str(container_json["State"]["Pid"]) ]
        if "ConmonPid" in container_json["State"]:
            pids.append( str(container_json["State"]["ConmonPid"]) )

        sandboxKey = container_json['NetworkSettings']['SandboxKey']

        _interface_result_r[name] = "" if sandboxKey == '' else execCommand("nsenter --net={} ip a".format(sandboxKey)).stdout.decode("utf-8").strip()

        container = Container(name, sandboxKey, pids)
        container_r[name] = container

        for portKey in container_json['NetworkSettings']['Ports']:
            port,protocol = portKey.split("/")
            container.addPort(port, protocol)

    for networkName in container_json['NetworkSettings']['Networks']:
        network = network_r[networkName]

        if network.name == 'host':
            ip = host_ip
            veth = "host"
        else:
            if network.name == 'macvlan':
                veth = "macvlan"
            else:
                veth = ""
                interfaceList = re.findall("inet.*", _interface_result_r[name], flags=re.MULTILINE)
                network_subnet = ipaddress.ip_network(network.subnet, strict=False)
                for interface in interfaceList:
                    columns = interface.split(" ")
                    interface_subnet = ipaddress.ip_network(columns[1], strict=False)
                    if network_subnet == interface_subnet:
                        container_ns_result = execCommand("nsenter --net={} ip link show | grep -oP '{}@if\K[0-9]*'".format(container.sandboxKey,columns[6]))
                        peer_ifindex = container_ns_result.stdout.decode("utf-8").strip()
                        if peer_ifindex:
                            result = re.findall("^{}: ([^:]*):".format(peer_ifindex), link_list, flags=re.MULTILINE)
                            if len(result)>0:
                                veth = result[0]
                        break

            ip = container_json['NetworkSettings']['Networks'][networkName]['IPAddress']
            if ip == "": # stopped container
                ip = "0.0.0.0"

        if name not in dns_map_r:
            dns_map_r[name] = []
        dns_map_r[name].append(ip)
        dns_reverse_r[ip] = name

        connection = Connection(container, ip, veth)
        for port in container.ports:
            connection.addPort( port['port'], port['protocol'], detectAccess(ip, host_ip, veth) )

        network.addConnection(connection)

# Collect nftables chains
chain_r = {}
_nftables_data = execCommand("nft -j list ruleset").stdout.decode("utf-8")
_nftables_rules = json.loads(_nftables_data)
for line in _nftables_rules['nftables']:
    if 'rule' not in line:
        continue

    chain_name = line['rule']['chain']

    if chain_name not in chain_r:
        chain = Chain(chain_name)
        chain_r[chain_name] = chain
    else:
        chain = chain_r[chain_name]

    source_ips = [None]
    source_ports = None
    target_ips = [None]
    target_ports = None
    mode = "DROP"
    protocol = None # tcp, udp, icmp etc
    interface = None

    #print(line)
    for part in line['rule']['expr']:
        if 'match' in part:
            if part['match']['op'] != '==':
                continue

            if 'payload' in part['match']['left']:
                field = part['match']['left']['payload']['field']
                value = part['match']['right']

                if field == 'protocol':
                    protocol = value
                elif field == 'saddr':
                    source_ips = convertSetToArray(value)
                elif field == 'daddr':
                    target_ips = convertSetToArray(value)
                elif field == 'sport':
                    source_ports = list(map(str, convertSetToArray(value)))
                    protocol = part['match']['left']['payload']['protocol']
                elif field == 'dport':
                    target_ports = list(map(str, convertSetToArray(value)))
                    protocol = part['match']['left']['payload']['protocol']
            elif 'meta' in part['match']['left']:
                key = part['match']['left']['meta']['key']
                if key == 'l4proto':
                    protocols = part['match']['right']['set'] if 'set' in part['match']['right'] else part['match']['right']
                    if len(protocols) == 1:
                        protocol = protocols[0]
                elif key == 'oif':
                    interface = part['match']['right']

        elif 'accept' in part:
            mode = "ACCEPT"

    for source_ip in source_ips:
        for target_ip in target_ips:
            if source_ip is not None and 'prefix' in source_ip:
                source_ip = source_ip['prefix']['addr'] + '/' + str(source_ip['prefix']['len'])
            if target_ip is not None and 'prefix' in target_ip:
                target_ip = target_ip['prefix']['addr'] + '/' + str(target_ip['prefix']['len'])
            chain.addRule(source_ip, source_ports, target_ip, target_ports, mode, protocol, interface)

# collect all pids from containers
pid_container_map = {}
ppid_map = {}
_pid_list = execCommand("ps -e -o pid,ppid --no-headers").stdout.decode("utf-8").strip().split("\n")
for pid_row in _pid_list:
    pid, ppid = re.split("\s+", pid_row.strip())
    if ppid not in ppid_map:
        ppid_map[ppid] = []
    ppid_map[ppid].append(pid)

def collectChildPIDs(container, pid_container_map, ppid_map, ppid):
    pid_container_map[ppid] = container
    if ppid not in ppid_map:
        return
    for pid in ppid_map[ppid]:
        collectChildPIDs(container, pid_container_map, ppid_map, pid)

for name in container_r:
    container = container_r[name]
    for pid in container.pids:
        collectChildPIDs(container, pid_container_map, ppid_map, pid)

# collect all open ports
_ss_list = execCommand("ss -l -t -u -p -n").stdout.decode("utf-8").strip().split("\n")
for ss_data in _ss_list:
    match = re.match("^(udp|tcp)\s+(UNCONN|LISTEN)\s+.*?\s+([^\s]*?\:[0-9]+)\s+(.*)", ss_data)
    if not match:
        continue

    host, port = match[3].rsplit(":", 1)
    protocol = match[1]

    match = re.match("^.*?pid=([0-9]+)", match[4])
    pid = match[1] if match else None

    if host == '*' or host == "0.0.0.0":
        host = host_ip
    elif host[0] == '[' and host[-1] == ']':
        match = re.match("^\[\:\:.+?\:([0-9\.]+)\]", host)
        if not match:
            continue
        host = match.group(1)

    if host not in [host_ip,"127.0.0.1"]:
        continue

    # currently it is not possible to get pid from wireguard_mobile in host mode
    # maybe migrate wireguard_mobile to a container in isolated network
    if pid is None:
        container = container_r["wireguard_mobile"]
    else:
        if pid not in pid_container_map:
            service = Processlist.getComm(pid)
            if service[0:6] == "python":
                service = Processlist.getCmdLine(pid).rsplit("/", 1)[1]

            container = Container(service, None, None)
            container_r[name] = container
            pid_container_map[pid] = container
        else:
            container = pid_container_map[pid]

    network = network_r['host']
    connection = network.getConnection(container)
    if not connection:
        connection = Connection(container, host_ip, "host" if container.isService() else "forwarded")
        network.addConnection(connection)

    connection.addPort(port, protocol, detectAccess(host, host_ip))

# Prepare column values
rows = [[TYPE_HEADLINE,"Type","Name","Network","Outgoing (local, intern, extern) traffic allowed","Incoming (local, intern, extern) traffic allowed","Interface"]]
for network in network_r:
    network = network_r[network]
    if len(network.connection_r) == 0:
        continue

    rows.append([TYPE_NETWORK,"Network",network.name,network.gateway,network.subnet,"",network.bridge])

    key_r = list(network.connection_r.keys())
    key_r.sort(key=lambda item: network.connection_r[item].container.name, reverse=False)

    for key in key_r:
        connection = network.connection_r[key]
        container = connection.container

        incomingRules = {}
        for port in connection.ports:
            value = str(port["port"])+"/"+port["protocol"]
            incomingRules[value] = {
              "value": value,
              "port": port["port"],
              "access": port["access"]
            }

        outgoingRules = {}
        for chain in chain_r:
            if chain not in [ 'SMARTSERVER_FORWARD', 'SMARTSERVER_INPUT' ]:
                continue

            rule_r = chain_r[chain].rule_r

            for rule in rule_r:
                if rule['sourceIp'] is not None and ( rule['sourceIp'] == connection.ip or ipaddress.ip_address(connection.ip) in ipaddress.ip_network(rule['sourceIp']) ):
                    if rule['targetIp'] is None:
                        targetIp = "host" if chain == 'SMARTSERVER_INPUT' and network.name not in ['host','macvlan'] else '*'
                        access = "extern" if targetIp != "host" else "intern"
                    else:
                        targetIp = rule['targetIp']
                        if targetIp in dns_reverse_r:
                            targetIp = dns_reverse_r[targetIp]
                            access = "local"
                        else:
                            access = 'intern' if ipaddress.ip_network(rule['targetIp']).is_private else 'extern'

                    value_r = []

                    if rule['sourcePorts'] is not None:
                        sourcePorts = rule['sourcePorts']
                        value_r.append(":" + ( sourcePorts[0] if len(sourcePorts) == 1 else "[" + ",".join(sourcePorts) + "]" ))

                    if rule['interface'] is not None:
                        value_r.append(rule['interface'])

                    value = targetIp
                    if rule['targetPorts'] is not None:
                        targetPorts = rule['targetPorts']
                        value += ":" + ( targetPorts[0] if len(targetPorts) == 1 else "[" + ",".join(targetPorts) + "]" )
                    elif rule['protocol'] is not None:
                        value += ":" + rule['protocol']
                    value_r.append(value)

                    value = " ➞ ".join(value_r).strip()

                    outgoingRules[value] = {
                      "value": value,
                      "access": access
                    }

                if network.driver == "host" and rule['targetPorts'] is not None:
                    activeChain = 'SMARTSERVER_INPUT' if network.name == 'host' and connection.veth != "forwarded" else 'SMARTSERVER_FORWARD'

                    if chain == activeChain:
                        for key in incomingRules:

                            data = incomingRules[key]
                            sourceIp = rule['sourceIp'].split('/')[0] if rule['sourceIp'] is not None else rule['sourceIp']

                            if rule['mode'] == "DROP":
                                if data['port'] in rule['targetPorts']:
                                    data["access"] = "local"
                                    data["port"] += " (" + sourceIp + ")"
                            else:
                                if data['port'] in rule['targetPorts'] and (sourceIp is None or not ipaddress.ip_address(sourceIp).is_private):
                                    data["access"] = "extern"

        outgoingRulesRows = splitRulesIntoRows(outgoingRules, None, MAX_OUTGOING_RULES_LENGTH)
        incomingRulesRows = splitRulesIntoRows(incomingRules, lambda x: int(x.split('/')[0]), MAX_INCOMING_RULES_LENGTH)

        firstRow = True
        while len(outgoingRulesRows) > 0 or len(incomingRulesRows) > 0:
            outgoingRulesArray = convertRowToArray(outgoingRulesRows, outgoingRules)
            incomingRulesArray = convertRowToArray(incomingRulesRows, incomingRules)

            if firstRow:
                rows.append([TYPE_CONTAINER, "Service" if container.isService() else "Container", container.name, connection.ip, outgoingRulesArray, incomingRulesArray, connection.veth])
                firstRow = False
            else:
                rows.append([TYPE_CONTAINER, "", "", "", outgoingRulesArray, incomingRulesArray, ""])

# Calculate column sizes
columnLength = [0] * len(rows[0])
for row in rows:
    for i in range(1,len(row)):
        if isinstance(row[i], str):
            length = len(row[i])
        else:
            length = 0
            for _row in row[i]:
                length += len(_row['value'])
            if length > 0:
                length += len(row[i]) * 2 - 2
        if length > columnLength[i]:
            columnLength[i] = length
#print(columnLength)

# Visualize
active_background = ""
for row in rows:
    row_type = row[0]
    if row_type == TYPE_CONTAINER:
        if row[1] != "":
            active_background = ";48;2;50;50;50" if active_background == "" else ""
    else:
        print("")
        active_background = ""
    _colors = row_colors[row_type]

    for i in range(1,4):
        print("\033[{}{}m {} \033[0m".format(_colors[i], active_background, row[i].ljust(columnLength[i])),end="")

    for index in range(4,6):
        column = row[index]
        if row_type != TYPE_CONTAINER:
            value = column.ljust(columnLength[index])
            if "(local, intern, extern)" in value:
                value = value.replace("(local, intern, extern)", "(\033[0;37mlocal\033[0m\033[1;37m, \033[0;32mintern\033[0m\033[1;37m, \033[0;91mextern\033[0m\033[1;37m)")
            print("\033[{}{}m {} \033[0m".format(_colors[index], active_background, value),end="")
        else:
            values = []
            length = 0
            for port in column:
                color = port_colors[port["access"]]
                value = "\033[{}{}m{}\033[0m".format(color, active_background, port["value"])
                length += len(port["value"])
                values.append(value)
            if length > 0:
                length += len(column) * 2 - 2

            value = "\033[{}m \033[0m".format(active_background) + "\033[{}m, \033[0m".format(active_background).join(values) + "\033[{}m \033[0m".format(active_background)
            print(value + "\033[{}m".format(active_background) + "".ljust(columnLength[index] - length) + "\033[0m",end="")

    print("\033[{}{}m {}\033[0m".format(_colors[6], active_background, row[6].ljust(columnLength[6])),end="")
    print("")
print("")
