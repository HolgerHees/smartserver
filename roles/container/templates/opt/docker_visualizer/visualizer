#!/usr/bin/python3

import subprocess
import json
import socket

class Network:
    def __init__(self,id,name,drive,scope):
        self.id = id
        self.name = name
        self.drive = drive
        self.scope = scope
        self.connection_r = {}
        self.subnet = ""
        self.gateway = ""
        
    def addDetails(self,subnet,gateway):
        self.subnet = subnet
        self.gateway = gateway

    def addConnection(self,connection):
        key = connection.ip if connection.ip != "" else connection.container.name
        self.connection_r[key] = connection

class Container:
    def __init__(self,name):
        self.name = name
        self.exposedPorts = []
        
    def addPort(self,hostIp,hostPort,exposedPort):
        self.exposedPorts.append({"hostIp": hostIp, "hostPort": hostPort, "exposedPort": exposedPort})

class Connection:
    def __init__(self,container,ip):
        self.container = container
        self.ip = ip;
      

def execCommand(cmd, cwd=None ):
    return subprocess.run([ cmd ], shell=True, check=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=cwd )
  
container_r = {}
network_r = {}
result = execCommand("docker network list")
lines = result.stdout.decode("utf-8").split("\n")
for line in lines[1:-1]:
    columns = line.split()
    network = Network(columns[0],columns[1],columns[2],columns[3])
    network_r[network.name]=network

    network_result = execCommand("docker network inspect {}".format(network.name))
    network_json = json.loads(network_result.stdout.decode("utf-8"))[0]
    
    if len(network_json['IPAM']['Config']) > 0:
        subnet = network_json['IPAM']['Config'][0]['Subnet']
        gateway = network_json['IPAM']['Config'][0]['Gateway']
        network.addDetails(subnet,gateway)
    
    for container_id in network_json['Containers']:
      
        name = network_json['Containers'][container_id]['Name']

        if name in container_r:
            container = container_r[name]
        else:
            container = Container(name)
            container_r[name] = container

            container_result = execCommand("docker inspect {}".format(name))
            container_json = json.loads(container_result.stdout.decode("utf-8"))[0]

            portBindings = container_json['HostConfig']['PortBindings']
            if portBindings != None:
                for exposedPort in portBindings:
                  
                    hostIp = container_json['HostConfig']['PortBindings'][exposedPort][0]['HostIp']
                    hostPort = container_json['HostConfig']['PortBindings'][exposedPort][0]['HostPort']
                  
                    container.addPort(hostIp,hostPort,exposedPort)
                                   
        ip = network_json['Containers'][container_id]['IPv4Address']
        connection = Connection(container,ip)
        
        network.addConnection(connection)

print("Container")

for container in container_r:
    container = container_r[container]
    
    exposedPorts = []
    for port in container.exposedPorts:
        exposedPorts.append("{}:{}:{}".format(port["hostIp"],port["hostPort"],port["exposedPort"]))
    
    portStr = ", ".join(exposedPorts)
    portStr = (portStr[:75] + '..') if len(portStr) > 75 else portStr
    
    print("  {} {}".format(container.name.ljust(31), portStr ) )

print("")

for network in network_r:
    network = network_r[network]

    print("Network:     {} {} {}".format(network.name.ljust(20),network.subnet,network.gateway))

    ip_r = list(network.connection_r.keys())
    ip_r.sort(key=lambda item: socket.inet_aton(item.split("/")[0]) if "." in item else item, reverse=False)

    for ip in ip_r:
        connection = network.connection_r[ip]
        container = connection.container
        
        name = container.name.ljust(20)
        ip_str = (ip if ip != container.name else "").ljust(30)
        
        print("  Container: {} {}".format(name, ip_str ) )
        
    print("")
