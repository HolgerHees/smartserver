#!/usr/bin/python3

import subprocess
import json
from datetime import datetime

from lib.config import GLOBAL_BUILD

DATETIME_FORMAT = '%Y-%m-%d %H:%M:%S %z %Z'

class Container:
    def __init__(self,id,name,image):
        self.id = id
        self.name = name
        self.image = image

class Image:
    def __init__(self,id,name,tag,created):
        self.id = id
        self.name = name
        self.tag = tag
        self.created = created
        
    def __eq__(self, other):
        return self.id == other.id

    def __lt__(self, other):
        return self.name < other.name or ( self.name == other.name and self.created < other.created )
      
def execCommand(cmd, cwd=None ):
    return subprocess.run([ cmd ], shell=True, check=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=cwd )
  
# Collect Images used in Dockerfiles
build_images = {}
result = execCommand("grep -RPo \"^FROM [^ ]*\" {}*/Dockerfile".format(GLOBAL_BUILD))
lines = result.stdout.decode("utf-8").split("\n")
for line in lines[0:-1]:
    columns = line.split()
    build_images[columns[-1]] = True

# Collect Images used in Containers
containers = {}
result = execCommand("docker ps -a --format '{{json .}}'")
lines = result.stdout.decode("utf-8").split("\n")
for line in lines[0:-1]:
    obj = json.loads(line)
    
    container = Container(obj["ID"],obj["Names"],obj["Image"])
    if container.image not in containers:
        containers[container.image] = []
    containers[container.image].append(container)

# Collect all Images
images = {}
result = execCommand("docker image list --format '{{json .}}'")
lines = result.stdout.decode("utf-8").split("\n")
for line in lines[0:-1]:
    #print(line)
    obj = json.loads(line)
    
    created = datetime.strptime(obj["CreatedAt"], DATETIME_FORMAT)
    image = Image(obj["ID"],obj["Repository"],obj["Tag"],created)
    if image.name not in images:
        images[image.name] = []
    images[image.name].append(image)
    
for name in sorted(images):
    image_versions = sorted(images[name], reverse=True)
    
    for image_version in image_versions:
        container_image = u"{}:{}".format(image_version.name,image_version.tag)
        if container_image in containers:
            print(u"\033[0;32mUSED\033[0m      : '{}', '{}'".format(image_version.id,container_image))
            continue

        if container_image in build_images:
            print(u"\033[0;33mREFERENCED\033[0m: '{}', '{}'".format(image_version.id,container_image))
            continue

        print(u"\033[0;91mDELETED\033[0m   : '{}', '{}'".format(image_version.id,container_image))

        execCommand("docker image rm {}".format(image_version.id))
