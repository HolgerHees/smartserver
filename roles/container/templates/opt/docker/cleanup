#!/usr/bin/python3

import json
import sys
from datetime import datetime
from functools import cmp_to_key

from config import config

from smartserver import command


DATETIME_FORMAT = '%Y-%m-%d %H:%M:%S %z %Z'

class Container:
    def __init__(self,id,name,image,is_stopped_since):
        self.id = id
        self.name = name
        self.image = image
        self.is_stopped_since = is_stopped_since

class Image:
    def __init__(self,id,repository,tag,created):
        self.id = id
        self.repository = repository
        self.tag = tag
        self.created = created
        
        if self.repository is not None and self.tag is not None:
            if self.tag == "latest":
                self.name = self.repository
            else:
                self.name = u"{}:{}".format(self.repository,self.tag)
        else:
            self.name = self.id
            
    def __eq__(self, other):
        return self.id == other.id

    def __lt__(self, other):
        return self.name < other.name or ( self.name == other.name and self.created < other.created )
      
def execCommand(cmd, cwd=None ):
    return subprocess.run([ cmd ], shell=True, check=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=cwd )
  
is_quite = None
if len(sys.argv) >= 2:
    is_quite = sys.argv[1] == "-q"

# Collect Images used in Dockerfiles
build_images = {}
result = command.exec(["grep -RPo \"^FROM [^ ]*\" {}*/Dockerfile".format(config.GLOBAL_BUILD) ] , shell=True)
lines = result.stdout.decode("utf-8").split("\n")
for line in lines[0:-1]:
    columns = line.split()
    build_images[columns[-1]] = True

# Collect Images used in Containers
containers = {}
result = command.exec(["docker", "ps", "-a", "--format", "'{{json .}}'"])
lines = result.stdout.decode("utf-8").split("\n")
for line in lines[0:-1]:
    obj = json.loads(line[1:-1])
    
    is_stopped_since = None
    if obj["State"] == "exited":
        result = command.exec(["docker", "inspect", obj["ID"]])
        _obj = json.loads(result.stdout.decode("utf-8"))
        state = _obj[0]["State"]
        finished_at = state["FinishedAt"].split('.')[0]
        finished_at = datetime.strptime("{}Z".format(finished_at), '%Y-%m-%dT%H:%M:%SZ')
        is_stopped_since = (datetime.utcnow() - finished_at)
    #else:
    #    started_at = obj["CreatedAt"]
    #    started_at = datetime.strptime(started_at, '%Y-%m-%d %H:%M:%S %z %Z')
    #    time_diff = (datetime.now().astimezone() - started_at).total_seconds()

    container = Container(obj["ID"],obj["Names"],obj["Image"],is_stopped_since)  
    
    if container.image not in containers:
        containers[container.image] = []
    containers[container.image].append(container)

# Collect all Images
images = {}
result = command.exec(["docker", "image", "list", "--format", "'{{json .}}'"])
lines = result.stdout.decode("utf-8").split("\n")
for line in lines[0:-1]:
    obj = json.loads(line[1:-1])
    
    created = datetime.strptime(obj["CreatedAt"], DATETIME_FORMAT)
    image = Image(obj["ID"],obj["Repository"] if obj["Repository"] != "<none>" else None,obj["Tag"] if obj["Tag"] != "<none>" else None,created)
    if image.repository not in images:
        images[image.repository] = []
    images[image.repository].append(image)
    
cleaned = False

def custom_sorted(item1, item2):
    item1_is_custom = item1.startswith("custom")
    item2_is_custom = item2.startswith("custom")
    
    if item1_is_custom and not item2_is_custom:
        return -1
    if item2_is_custom and not item1_is_custom:
        return 1
    
    if item1 < item2:
        return -1
    
    if item1 > item2:
        return 1
    
    return 0

#for name in sorted(images):
for name in sorted(images,key=cmp_to_key(custom_sorted)):
    
    image_versions = sorted(images[name], reverse=True)
    
    for image_version in image_versions:
        container_image = image_version.name
        
        if container_image in containers:
            container_used = False
            for container in containers[container_image]:
                if container.is_stopped_since is not None:
                    # remove containers, stopped more then 1 week ago
                    if container.is_stopped_since.total_seconds() < 60 * 60 * 24 * 7:
                        if not is_quite:
                            stopped_since = str(container.is_stopped_since).split(".")[0]
                            print(u"\033[0;33mSTOPPED\033[0m   : CNT '{}', '{}' => IMG '{}', '{}' stopped since {}".format(container.id,container.name, image_version.id, container_image, stopped_since))
                        container_used = True
                    else:
                        print(u"\033[0;91mDELETED\033[0m   : CNT '{}', '{}' => IMG '{}', '{}'".format(container.id, container.name, image_version.id, container_image))
                        command.exec(["docker", "rm", "{}".format(container.id)])
                        
                else:
                    container_used = True
               
            if container_used:
                if not is_quite:
                    print(u"\033[0;32mUSED\033[0m      : IMG '{}', '{}'".format(image_version.id,container_image))
                continue

        if container_image in build_images:
            if not is_quite:
                print(u"\033[0;33mREFERENCED\033[0m: IMG '{}', '{}'".format(image_version.id,container_image))
            continue

        print(u"\033[0;91mDELETED\033[0m   : IMG '{}', '{}'".format(image_version.id,container_image))
        
        cleaned = True

        command.exec(["docker", "image", "rm", "{}".format(image_version.id)])
      
if is_quite and not cleaned:
    print(u"No images deleted")
