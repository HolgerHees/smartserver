#!/usr/bin/python3

import subprocess
import json
import socket
import re
import ipaddress

class Network:
    def __init__(self,id,name,driver,scope):
        self.id = id
        self.name = name
        self.driver = driver
        self.scope = scope
        self.connection_r = {}
        self.subnet = ""
        self.gateway = ""
        self.bridge = ""
        self.is_internal = False
        
    def addDetails(self,subnet,gateway,bridge,is_internal):
        self.subnet = subnet
        self.gateway = gateway
        self.bridge = bridge
        self.is_internal = is_internal

    def addConnection(self,connection):
        key = connection.ip + " " + connection.container.type + ' ' + connection.container.name
        self.connection_r[key] = connection

class Container:
    def __init__(self,type,name,sandboxKey,interfaceResult):
        self.type = type
        self.name = name
        self.sandboxKey = sandboxKey
        self.interfaceResult = interfaceResult
        self.exposedPorts = {}
        self.publishedPorts = {}
        
    def addExposedPort(self,exposedPort,protocol):
        key = exposedPort + ':' + protocol
        
        self.exposedPorts[key] = {"port": exposedPort, 'protocol': protocol}

    def addPublishedPort(self,hostIp,hostPort,exposedPort,protocol):
        key = hostIp + ':' + hostPort + ':' + exposedPort + ':' + protocol
        
        access = "local" if hostIp == "127.0.0.1" else "intern"
        self.publishedPorts[key] = {"hostIp": hostIp, "hostPort": hostPort, "exposedPort": exposedPort, 'protocol': protocol, 'access': access}

class Connection:
    def __init__(self,container,ip, veth):
        self.container = container
        self.ip = ip
        self.veth = veth
      
class Chain:
    def __init__(self,name):
        self.name = name
        self.rule_r = []

    def addRule(self,sourceIp,targetIp,targetPort, mode, raw):
        self.rule_r.append({"chain": self.name, "sourceIp": sourceIp, "targetIp": targetIp, "targetPort": targetPort, "mode": mode, "raw": raw })

def execCommand(cmd, cwd=None ):
    return subprocess.run([ cmd ], shell=True, check=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=cwd )
 
def messureLength(value):
    return len(re.sub(r"\033\[[^m]*m","",value))

# Collect networks
container_r = {}
network_r = {}
result = execCommand("docker network list")
lines = result.stdout.decode("utf-8").split("\n")
for line in lines[1:-1]:
    columns = line.split()
    network = Network(columns[0],columns[1],columns[2],columns[3])
    network_r[network.name]=network
    
# Collect network details
container_json_dict = {}
networks_json_dict = {}
networks_result = execCommand("docker network inspect {}".format(" ".join(list(network_r.keys()))))
networks_json = json.loads(networks_result.stdout.decode("utf-8"))
for network_json in networks_json:
    networks_json_dict[network_json["Name"]] = network_json
    
    for container_id in network_json['Containers']:
        name = network_json['Containers'][container_id]['Name']
        container_json_dict[name]= None

# Collect container details
containers_result = execCommand("docker inspect {}".format(" ".join(list(container_json_dict.keys()))))
containers_json = json.loads(containers_result.stdout.decode("utf-8"))
for container_json in containers_json:
    container_json_dict[container_json["Name"][1:]] = container_json
    
# Collect ip addresses
ip_list = execCommand("ip a").stdout.decode("utf-8")

# Collect network links
link_list = execCommand("ip link").stdout.decode("utf-8")

# Collect host data
host_ip = execCommand("hostname -I").stdout.decode("utf-8").split()[0]
host_gateway = execCommand("ip route | grep default").stdout.decode("utf-8").split()[2]
host_device = re.findall("^.*{}.*".format(host_ip), ip_list, flags=re.MULTILINE)[0].split()[-1]
host_subnet = execCommand("ip route | grep 'src {}'".format(host_ip)).stdout.decode("utf-8").split()[0]

#192.168.0.0/24 dev eth0 proto kernel scope link src 192.168.0.50

# Collect iptables chains
iptables_rules = execCommand("iptables -nvL").stdout.decode("utf-8").split("\n")
current_chain = None
chain_r = {}
for rule in iptables_rules:
    if len(rule) == 0:
        continue
    rule_r = rule.split(" ")
    rule_r = list(filter(lambda item: item.strip(), rule_r))
    if rule_r[0].lower() == "chain":
        current_chain = Chain(rule_r[1].lower())
        chain_r[current_chain.name] = current_chain
    else:
        if ( rule_r[2] != "ACCEPT" and rule_r[2] != "DROP" ) or rule_r[5] == "lo":
            continue
        #print(rule_r)
        source_ip = rule_r[7]
        target_ip = rule_r[8]
        target_port = ""
        if len(rule_r) > 10:
            if rule_r[10].startswith("dpt:"):
                target_port = rule_r[10][4:]
            else:
                continue
        
        current_chain.addRule(source_ip,target_ip,target_port,rule_r[2],rule_r)
        #print(source_ip + ' => ' + target_ip + ' ' + target_port)
            
        #chain_r[current_chain].append()
#target     prot opt source               destination

# Collect additional ports
listen_port_map = {}
additional_port_list = execCommand("lsof -i -P -n +c0 | grep LISTEN").stdout.decode("utf-8").strip().split("\n")
for additional_port in additional_port_list:
    additional_port = additional_port.split(" ")
    additional_port = list(filter(lambda item: item.strip(), additional_port))
        
    if additional_port[8][0] == "[":
        continue
    
    columns = additional_port[8].split(":")
    if len(columns)>1:
        if additional_port[0] in listen_port_map:
            listen_ports = listen_port_map[additional_port[0]]
        else:
            listen_ports = {}
            listen_port_map[additional_port[0]] = listen_ports
        protocol = additional_port[7].lower()
        port = columns[1].split("->")[0]
        listen_ports[port] = {'access': 'intern' if columns[0] == '*' or columns[0] == host_ip else 'local', 'port':port,'protocol':protocol}
   
# Collect additional kernel ports
additional_port_list = execCommand("ss -lun").stdout.decode("utf-8").strip().split("\n")
for additional_port in additional_port_list:
    additional_port = additional_port.split(" ")
    additional_port = list(filter(lambda item: item.strip(), additional_port))
    columns = additional_port[-2:-1][0].split(":")
    if len(columns)!=2:
        continue

    if columns[1] in listen_port_map:
        listen_ports = listen_port_map[columns[1]]
    else:
        listen_ports = {}
        listen_port_map[columns[1]] = listen_ports
    protocol = '*'
    port = columns[1]
    if port not in listen_ports:
        access = 'intern' if columns[0] == '*' or columns[0] == '0.0.0.0' else 'local'
        #print(columns)
        listen_ports[port] = {'access': access, 'port':port,'protocol':protocol}

#print(listen_port_map)

# Process collected data
for name in network_r:
    network = network_r[name]
    network_json = networks_json_dict[network.name]
    
    if network.name == 'host':
        network.addDetails(host_subnet,host_gateway,host_device,False)
    else:
        if len(network_json['IPAM']['Config']) > 0:
            subnet = network_json['IPAM']['Config'][0]['Subnet']
            gateway = network_json['IPAM']['Config'][0]['Gateway']
            is_internal = network_json['Internal']
            
            result = re.findall("^.*{}.*".format(gateway), ip_list, flags=re.MULTILINE)
            if len(result)>0:
                bridge_device = re.findall("^.*{}.*".format(gateway), ip_list, flags=re.MULTILINE)[0].split()[-1]
            else:
                bridge_device = host_device
            network.addDetails(subnet,gateway,bridge_device,is_internal)
    
    for container_id in network_json['Containers']:
      
        name = network_json['Containers'][container_id]['Name']

        if name in container_r:
            container = container_r[name]
        else:
            container_json = container_json_dict[name]
            
            sandboxKey = container_json['NetworkSettings']['SandboxKey']
            interfaceResult = execCommand("nsenter --net={} ip a".format(sandboxKey))
            
            container = Container("Container",name,sandboxKey,interfaceResult.stdout.decode("utf-8").strip())
            container_r[name] = container
            
            if 'ExposedPorts' in container_json['Config'].keys():
                portBindings = container_json['Config']['ExposedPorts']
                if portBindings != None:
                    for exposedPortKey in portBindings:
                        exposedPort,protocol = exposedPortKey.split("/")
                        container.addExposedPort(exposedPort,protocol)
                        #if network.name == 'host':
                        #    container.addPublishedPort("0.0.0.0",exposedPort,exposedPort,protocol)
            
            if 'PortBindings' in container_json['HostConfig'].keys():
                portBindings = container_json['HostConfig']['PortBindings']
                if portBindings != None:
                    for exposedPortKey in portBindings:
                        exposedPort,protocol = exposedPortKey.split("/")
                        hostIp = portBindings[exposedPortKey][0]['HostIp']
                        hostPort = portBindings[exposedPortKey][0]['HostPort']
                        container.addPublishedPort(hostIp,hostPort,exposedPort,protocol)
        
        veth = ""
        if network.name != 'host':
            #print("#######")
            #print(container.name)
            interfaceList = re.findall("inet.*", container.interfaceResult, flags=re.MULTILINE)
            network_subnet = ipaddress.ip_network(network.subnet, strict=False)
                
            for interface in interfaceList:
                columns = interface.split(" ")
                interface_subnet = ipaddress.ip_network(columns[1], strict=False)
                if network_subnet == interface_subnet:
                    container_ns_result = execCommand("nsenter --net={} ethtool -S {} | grep peer_ifindex".format(container.sandboxKey,columns[6]))
                    peer_ifindex_r = container_ns_result.stdout.decode("utf-8").split()
                    if len(peer_ifindex_r) > 0:
                        result = re.findall("^{}: veth.*".format(peer_ifindex_r[-1]), link_list, flags=re.MULTILINE)
                        if len(result)>0:
                            veth_info = result[0].split()
                            veth = veth_info[1][:-1]
                    #print(columns[6])
                    #print(veth)
                    break
            ip = network_json['Containers'][container_id]['IPv4Address'].split("/")[0]
        else:
            ip = host_ip
            veth = "host"
            
        connection = Connection(container,ip,veth)
        
        network.addConnection(connection)
        
for name in container_r:
    container = container_r[name]
    if len(container.publishedPorts)==0:
        continue
      
    network = network_r['host']
        
    connection = Connection(container,host_ip,"forwarded")
    network.addConnection(connection)
    
for name in list(network_r.keys()):
    network = network_r[name]
    if network.driver != "macvlan":
        continue
    
    host_network = network_r['host']
    
    for key in network.connection_r:
        connection = network.connection_r[key]
        connection.veth = "macvlan"
        host_network.addConnection(connection)
    
    del network_r[name]

# Add Services
service_mapping = {
    "httpd": "apache2",
    "sshd": "sshd",
    "cupsd": "cupsd",
    "netdata": "netdata",
    "update_service": "update_service",
    "ci_service": "ci_service",
    "VBoxHeadl": "ci"
}
for name in listen_port_map:
    if name.isnumeric():
        continue
  
    ports = listen_port_map[name]
    if name not in service_mapping:
        #print(name)
        #print(ports)
        pass
        #for key in ports:
        #    port = ports[key]
        #    http_container.addExposedPort(port['port'],port['protocol'])
        #    #http_container.addPublishedPort("0.0.0.0",port['port'],port['port'],port['protocol'])
    else:
        name = service_mapping[name]
        if name in container_r:
            container = container_r[name]
            for key in ports:
                port = ports[key]
                container.addExposedPort(port['port'],port['protocol'])
        else:
            network = network_r['host']
            
            container = Container("Service",name,"","")
            container_r[name] = container
            
            for key in ports:
                port = ports[key]
                container.addExposedPort(port['port'],port['protocol'])
                #container.addPublishedPort("0.0.0.0",port['port'],port['port'],port['protocol'])
            
            connection = Connection(container,host_ip,"host")
            network.addConnection(connection)

TYPE_HEADLINE = 0
TYPE_NETWORK = 1
TYPE_CONTAINER = 2

colors = {
    TYPE_HEADLINE: [0,"1;37m","1;37m","1;37m","1;37m","1;37m","1;37m"],
    TYPE_NETWORK: [0,"0;30;47m","1;37;43m","1;37;45m","1;37;45m","0;100m","0;30;46m"],
    TYPE_CONTAINER: [0,"0;37m","0;33m","1;35m","1;35m","0;39m","0;36m"]
}

port_colors = {
    "local": "0;37",
    "intern": "0;32",
    "extern": "0;91"
}

# Prepare column values
rows = [[TYPE_HEADLINE,"Type","Name","Network","Subnet / Outgoing allowed","\033[1;37mPorts / Incomming (\033[0;37mlocal\033[0m\033[1;37m, \033[0;32mintern\033[0m\033[1;37m, \033[0;91mextern\033[0m\033[1;37m) traffic allowed\033[0m","Interface"]]

sorted_network_r = list(network_r)
sorted_network_r.sort(key=lambda item: socket.inet_aton(network_r[item].gateway) if network_r[item].gateway else socket.inet_aton("0.0.0.0"), reverse=False)

for network in sorted_network_r:
    network = network_r[network]
    
    if len(network.connection_r) == 0:
        continue
    
    subnet_msg = u"{}{}".format(network.subnet," (internal)" if network.is_internal else "")
    
    rows.append([TYPE_NETWORK,"Network",network.name,network.gateway,subnet_msg,"",network.bridge])

    key_r = list(network.connection_r.keys())
    key_r.sort(key=lambda item: socket.inet_aton(network.connection_r[item].ip), reverse=False)
    for key in key_r:
        connection = network.connection_r[key]
        container = connection.container

        openPorts = {}
        if network.name == 'host' and len(container.publishedPorts) > 0:
            for key in container.publishedPorts:
                parts = key.split(":")
                port = container.exposedPorts[parts[2] + ":" + parts[3]]
                access = "local"
                for name in listen_port_map:
                    for listen_port in listen_port_map[name]:
                        listen_port = listen_port_map[name][listen_port]
                        if listen_port['port'] == port["port"]:
                            access = listen_port['access']
                            break
                            
                openPorts[port["port"]] = {
                  "port": port["port"]+"/"+port["protocol"],
                  "access": access
                }
        else:
            for key in container.exposedPorts:
                access = "local"
                port = container.exposedPorts[key]

                if network.name == "host":
                    if connection.veth == "macvlan":
                        access = "intern"
                    else:
                        for name in listen_port_map:
                            for listen_port in listen_port_map[name]:
                                listen_port = listen_port_map[name][listen_port]
                                if listen_port['port'] == port["port"]:
                                    access = listen_port['access']
                                    break
                        
                openPorts[port["port"]] = {
                  "port": port["port"]+"/"+port["protocol"],
                  "access": access
                }
              
        outgoingValue = []
        if network.driver == "host" and connection.veth == "macvlan":
            outgoingValue.append("*")
        else:
            for chain in chain_r:
                rule_r = chain_r[chain].rule_r
                if chain != 'input' and chain != 'docker-user':
                    continue
                  
                for rule in rule_r:
                    if rule['sourceIp'] == connection.ip:
                        if rule['targetPort'] != '':
                            value = rule['targetPort']
                            if rule['chain'] == 'input':
                                value = ( "" if rule['targetIp'] == '0.0.0.0/0' else rule['targetIp'] ) + ":" + value
                            else:
                                value = rule['targetIp'] + ":" + value
                        else:
                            value = '*' if rule['targetIp'] == '0.0.0.0/0' else rule['targetIp']
                        outgoingValue.append(value)
                    
                    if network.driver == "host":
                        activeChain = 'input' if network.name == 'host' and connection.veth != "forwarded" else 'docker-user'
                        
                        if chain == activeChain:
                          
                            #if rule['mode'] == "DROP":
                            #    print(rule)
                          
                            hostMatch = rule['targetIp'] == connection.ip# or rule['targetIp'] == "0.0.0.0/0"
                            for key in openPorts:
                                data = openPorts[key]
                                sourceIp = rule['sourceIp'].split('/')[0]
                                
                                if rule['mode'] == "DROP":
                                    #sourceIp = sourceIp.lstrip("!") # remove left negates
                                    if hostMatch or rule['targetPort'] == key:
                                        data["access"] = "local"
                                        data["port"] += " (" + sourceIp + ")"
                                else:
                                    sourceIp = sourceIp.lstrip("!") # remove left negates
                                    if hostMatch or ( rule['targetPort'] == key and (sourceIp == '0.0.0.0' or not ipaddress.ip_address(sourceIp).is_private) ):
                                        data["access"] = "extern"

        rows.append([TYPE_CONTAINER,container.type,container.name,connection.ip,"",openPorts,connection.veth,", ".join(outgoingValue)])
                
# Calculate column sizes
columnLength = [0] * (len(rows[0]) + 1)
for row in rows:
    for i in range(1,len(row)):
        if isinstance(row[i], str):
            length = messureLength(row[i])
            if length > columnLength[i]:
                columnLength[i] = length
    
# Visualize
for row in rows:
    if row[0] == TYPE_HEADLINE:
        print("")
    elif row[0] == TYPE_NETWORK:
        print("")
    print("\033[{} {} \033[0m".format(colors[row[0]][1],row[1].ljust(columnLength[1])),end="")
    print("\033[{} {} \033[0m".format(colors[row[0]][2],row[2].ljust(columnLength[2])),end="")
    print("\033[{} {} \033[0m".format(colors[row[0]][3],row[3].ljust(columnLength[3])),end="")
    
    if row[0] != TYPE_CONTAINER:
        print("\033[{} {} \033[0m".format(colors[row[0]][4],row[4].ljust(columnLength[4])),end="")
    else:
        print("\033[0;91m {} \033[0m".format(row[7].ljust(columnLength[4])),end="")
      
    if row[0] != TYPE_CONTAINER:
        length = messureLength(row[5])
        print("\033[{} {} \033[0m".format(colors[row[0]][5],row[5] + "".ljust(65-length-2)),end="")
    else:
        values = []
        length = 0
        for key in row[5]:
            port = row[5][key]
            color = port_colors[port["access"]]
            value = "\033[{}m{}\033[0m".format(color,port["port"])
            _length = len(port["port"]) + 2
            if length + _length >= 59:
                break
            length += _length
            values.append(value)
        
        if len(values)>0:
            value = " " + ", ".join(values) + " "
            if len(row[5]) > len(values):
                value += "... "
                length += 4
        else:
            value = ""
            
        print(value + "".ljust(65-length),end="")
        #print(value,end="")
        
    print("\033[{} {}\033[0m".format(colors[row[0]][6],row[6].ljust(columnLength[6])),end="")

    print("")
print("")
