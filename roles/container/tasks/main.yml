- name: install required packages => is_rhel or is_fedora
  yum:
    name: [
        podman
    ]
    state: present
  when: is_rhel or is_fedora

- name: install required packages => is_ubuntu
  apt:
    name: [
        podman
    ]
    state: present
  when: is_ubuntu

- name: check netavark => is_ubuntu
  shell: "/usr/lib/podman/netavark version | grep 'version' | grep -Po '[0-9\\.]*'"
  changed_when: "netavark_version.stdout != '1.11.0'"
  register: netavark_version
  when: "nftables_enabled and is_ubuntu"

  # With old netavark version, firewall_driver 'none' is not possible
- name: upgrade netavark => is_ubuntu
  shell: "wget -O - https://github.com/containers/netavark/releases/download/v1.11.0/netavark.gz | gzip -d > /usr/lib/podman/netavark && chown root:root /usr/lib/podman/netavark && chmod 755 /usr/lib/podman/netavark"
  when: "nftables_enabled and is_ubuntu and netavark_version.stdout != '1.11.0'"

- name: install required packages => is_suse
  zypper:
    name: [
        podman
    ]
    state: present
  when: is_suse

#https://bugs.launchpad.net/ubuntu/+source/libpod/+bug/2040483
- name: teardown apparmor for containers on ubuntu temporary
  shell: "{{item}}"
  with_items:
    - "ln -s /etc/apparmor.d/runc /etc/apparmor.d/disable/"
    - "apparmor_parser -R /etc/apparmor.d/runc"
    - "ln -s /etc/apparmor.d/crun /etc/apparmor.d/disable/"
    - "apparmor_parser -R /etc/apparmor.d/crun"
    - "ln -s /etc/apparmor.d/podman /etc/apparmor.d/disable/"
    - "apparmor_parser -R /etc/apparmor.d/podman"
  when: is_ubuntu

##### DOCKER #####
- name: prepare needed directories
  vars:
    directories:
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "/opt/container" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "/opt/container/config" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_lib}}libpod/storage/" }          # podman
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_lib}}containers/storage/" }      # podman
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_tmp}}libpod/" }                  # podman
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_tmp}}containers/storage/" }      # podman
  include_tasks: roles/_shared/create_directories.yml

- name: set container selinux configuration => is_rhel or is_fedora
  sefcontext:
    target: "{{item}}"
    ftype: "a"
    setype: "container_ro_file_t"
    seuser: "system_u"
    state: present
  with_items:
 #   - "{{global_lib}}libpod/storage(/.*)?"
    - "{{global_lib}}containers/storage(/.*)?"
  register: sefcontext_result
  when: is_rhel or is_fedora

- name: reload selinux configuration => (is_rhel or is_fedora) and sefcontext changed
  shell: "restorecon -irv {{item}}"
  with_items:
#    - "{{global_lib}}libpod/storage/"
    - "{{global_lib}}containers/storage/"
  when: (is_rhel or is_fedora) and sefcontext_result.changed

# ***** NESSECARRY UNTIL PODMAN 5 ********
# because "firewall_driver" setting in containers.conf is ignored
# second part is inside podman_service template
# ****************************************
- name: force none firewall driver
  lineinfile:
    path: /etc/environment
    regexp: '^NETAVARK_FW\s*='
    line: 'NETAVARK_FW=none'
  when: "nftables_enabled"

- name: copy podman config
  template:
    src: "templates{{item}}"
    dest: "{{item}}"
    owner: root
    group: root
    mode: 0640
  with_items:
    - "/etc/containers/containers.conf"
    - "/etc/containers/registries.conf"
    - "/etc/containers/storage.conf"

- name: copy fluentd config
  vars:
    config_file: "templates/etc/fluent/_.ansible.d/podman.conf"
  include_tasks: roles/fluentd/shared/add_config.yml
  tags: ['fluentd_config']
  when: "monitoring_enabled"

- name: synchronize container tools
  synchronize:
    src: "templates/opt/container"
    dest: "/opt/"
    archive: no
    checksum: yes
    group: yes
    owner: yes
    perms: yes
    recursive: yes
    rsync_opts:
      - "--chown=root:root"
      - "--chmod=D750,F750"

- name: copy nftables tools
  copy:
    src: "templates/{{item.src}}"
    dest: "/opt/container/{{item.dest}}"
    owner: root
    group: root
    mode: 0750
  with_items:
      - { src: "nftables_visualizer", dest: "visualizer" }
  when: "nftables_enabled"

- name: copy legacy iptables tools
  copy:
    src: "templates/{{item.src}}"
    dest: "/opt/container/{{item.dest}}"
    owner: root
    group: root
    mode: 0750
  with_items:
      - { src: "iptables_clean.sh", dest: "clean_iptables.sh" }
      - { src: "iptables_visualizer", dest: "visualizer" }
  when: "not nftables_enabled"

- name: copy container tools config
  template:
    src: "templates/config.py"
    dest: "/opt/container/config/config.py"
    owner: root
    group: root
    mode: 0750

- name: set podman config
  lineinfile:
    path: /etc/containers/{{item.file}}
    regexp: '^{{item.field}}\s*='
    line: '{{item.field}}="{{item.value}}"'
    create: true
    owner: root
    group: root
    mode: 0640
  with_items:
    - { file: 'libpod.conf', field: 'static_dir', value: '{{global_lib}}libpod/storage/' }
    - { file: 'libpod.conf', field: 'tmp_dir', value: '{{global_tmp}}libpod/' }
    - { file: 'libpod.conf', field: 'cgroup_manager', value: "systemd" }

# https://success.docker.com/article/node-using-swap-memory-instead-of-host-memory
# vm.swappiness = 0   # Swap is disabled. In earlier versions, this meant that the kernel would swap only to avoid an out of memory condition, but in later versions this is achieved by setting to 1.
# vm.swappiness = 1   # Kernel version 3.5 and over, as well as kernel version 2.6.32-303 and over: Minimum amount of swapping without disabling it entirely.
# to clean swap run 'swapoff -a && swapon -a'
- name: set sysctl values for container environments
  lineinfile:
    path: /etc/sysctl.conf
    regexp: '^{{item.regex}}\s*='
    line: '{{item.line}}'
  with_items:
    - { regex: "vm\\.swappiness", line: "vm.swappiness = 1" }
    - { regex: "vm\\.overcommit_memory", line: "vm.overcommit_memory = 1" }

    # IPV4 forwarding is not needed during docker build process. If you get problems, restart firewalld
    #- { regex: "net\\.ipv4\\.ip_forward", line: "net.ipv4.ip_forward = 0" }
  register: sysctlchanged
    
- name: refresh sysctl to activate sysctl changes => sysctl changed
  shell: sysctl -p
  when: sysctlchanged.changed

##### MACVLAN #####
# to avoid message '(udev-worker)[19262]: veth20: Could not generate persistent MAC address: No data available'
- name: check systemd network config direcory
  file:
    path: '/etc/systemd/network/'
    state: directory
    owner: root
    group: root
    mode: 0755

- name: copy veth network config tools
  copy:
    src: "templates/etc/systemd/network/98-default.link"
    dest: "/etc/systemd/network/98-default.link"
    owner: root
    group: root
    mode: 0644

- name: create macvlan network
  containers.podman.podman_network:
    name: 'macvlan'
    driver: "macvlan"
    ipv6: "{{ 'true' if default_server_ipv6 is defined else 'false' }}"
    opt:
      parent: '{{default_network_interface}}'
    net_config: |
      [
        { "subnet": "{{default_server_network}}", "gateway": "{{default_server_gateway}}" }
        {% if default_server_ipv6 is defined %}
            , { "subnet": "{{default_server_network_ipv6}}", "gateway": "{{default_server_gateway_ipv6}}" }
        {% endif %}
      ]

- name: create isolated podman network
  containers.podman.podman_network:
    name: "isolated"
    #driver: "ipvlan"
    internal: no
    ipv6: "{{ 'true' if default_server_ipv6 is defined else 'false' }}"
    subnet: "{{podman_base_network}}"
    gateway: "{{podman_base_gateway}}"

- name: copy macvlan_bridge cmd
  template:
    src: "templates/create_macvlan_bridge.sh"
    dest: "/opt/container/create_macvlan_bridge.sh"
    owner: root
    group: root
    mode: 0750
  notify: "restart macvlan_bridge"
  when: "macvlan_range | length > 0"

- name: "create systemd service for 'macvlan_bridge'"
  template:
    src: "templates/macvlan_bridge_service"
    dest: "/etc/systemd/system/macvlan_bridge.service"
    owner: root
    group: root
    mode: 0644
  notify: "restart macvlan_bridge"
  when: "macvlan_range | length > 0"

# ***** FINALIZE *****
- name: register systemd service watcher
  vars:
    watcher_name: "macvlan_bridge"
  include_tasks: roles/systemd_watcher/shared/add_watcher.yml
  tags: ['systemd_watcher_config']
  when: "monitoring_enabled and macvlan_range | length > 0"

- name: trigger macvlan_bridge handler
  vars:
    notify: "restart macvlan_bridge"
    service: "macvlan_bridge"
  include_tasks: roles/_shared/service_check.yml
  when: "macvlan_range | length > 0"

- name: register systemd service watcher
  vars:
    watcher_name: "podman"
  include_tasks: roles/systemd_watcher/shared/add_watcher.yml
  tags: ['systemd_watcher_config']
  when: "monitoring_enabled"

- name: create iptables rule cron job
  vars:
    name: "IPTables netavark leftover check"
    cmd: "/opt/container/clean_iptables.sh check"
    group: "container"
    log: "iptables_check"
    minute: "*/5"
  include_tasks: roles/cron/shared/add_cronjob.yml
  tags: ['cron_job']
  when: "not nftables_enabled"

- name: enable podman
  systemd:
    name: podman
    daemon_reload: yes
    enabled: yes
    masked: no
