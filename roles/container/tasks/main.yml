- name: install required packages => is_fedora
  yum:
    name: [
        docker
        , python3-docker  # used by ansible docker module
        , golang-github-docker-libnetwork-devel # needed to make docker running together with firewalld
#        , podman
    ]
    state: present
  when: is_fedora|bool
  
#- name: add suse zypper repository
#  zypper_repository:
#    name: Devel:Kubic (podman)
#    repo: 'http://download.opensuse.org/repositories/devel:/kubic/openSUSE_Leap_{{ansible_distribution_version}}/'
#    auto_import_keys: yes
#    priority: "100"
#    state: present
#  when: is_suse|bool

- name: install required packages => is_suse
  zypper:
    name: [
        docker
        , python2-docker  # used by ansible docker module
        #, python3-docker  # used by ansible docker module
        , podman
#        , podman>=1.6.2
#        , cni>=0.7.1
#        , cni-plugins>=0.8.3
    ]
    state: present
  when: is_suse|bool

- name: copy fluentd config => is_suse
  vars:
    config_file: "templates/etc/fluent/_.ansible.d/podman.conf"
  import_tasks: roles/fluentd/tasks/add_config.yml
  when: is_suse|bool
  
#- name: set podman config
#  lineinfile:
#    path: /etc/containers/{{item.file}}
#    regexp: '^{{item.field}}\s*='
#    line: '{{item.field}}="{{item.value}}"'
#    create: true
#    owner: root
#    group: root
#    mode: 0640
#  with_items:
#    - { file: 'libpod.conf', field: 'static_dir', value: '{{global_lib}}libpod/storage/' }
#    - { file: 'libpod.conf', field: 'tmp_dir', value: '{{global_tmp}}libpod/' }
#    - { file: 'libpod.conf', field: 'cgroup_manager', value: "{{ 'systemd' if is_suse|bool else 'systemd' }}" }
#    - { file: 'storage.conf', field: 'runroot', value: '{{global_tmp}}containers/storage/' }
#    - { file: 'storage.conf', field: 'graphroot', value: '{{global_lib}}containers/storage/' }

- name: prepare needed folder
  file:
    path:  "{{ global_lib }}docker"
    state: directory
    owner: root
    group: root
    mode: 0750

- name: disable docker daemon.json
  shell: "if [ -f /etc/docker/daemon.json ]; then mv /etc/docker/daemon.json /etc/docker/daemon.json.org; echo \"1\"; else echo \"0\"; fi"
  register: dockerjson_change
  changed_when: "'1' in dockerjson_change.stdout"
    
- name: change docker config => is_fedora
  lineinfile:
    path: /etc/sysconfig/docker
    insertafter: '^OPTIONS='
    regexp: '^\s*--{{item.field}}\s*='
    line: '  --{{item.field}}={{item.value}} \'
  with_items:
    - { field: "log-driver", value: "journald" }
    - { field: "graph", value: "{{global_lib}}docker" }
  notify: "restart docker"
  when: is_fedora|bool
  
- name: set docker selinux configuration => is_fedora
  sefcontext:
    target: "{{global_lib}}docker"
    ftype: "d"
    setype: "container_var_lib_t"
    seuser: "system_u"
    state: present
  register: sefcontext_result
  when: is_fedora|bool

- name: reload selinux configuration => is_fedora
  shell: "restorecon {{global_lib}}docker"
  when: is_fedora|bool and sefcontext_result.changed

#- name: check started docker => is_fedora
#  systemd:
#    name: docker
#    state: started
#  when: is_fedora|bool

- name: change docker config => is_suse
  lineinfile:
    path: /etc/sysconfig/docker
    backrefs: yes
    regexp: '^(\s*DOCKER_OPTS\s*=(?!.*{{item.field}})\s*)"(.*)"'
    line: '\1"\2 --{{item.field}}={{item.value}}"'
  with_items:
    - { field: "log-driver", value: "journald" }
    - { field: "graph", value: "{{global_lib}}docker" }
  notify: "restart docker"
  when: is_suse|bool

- name: copy fluentd config
  vars:
    config_file: "templates/etc/fluent/_.ansible.d/docker.conf"
  import_tasks: roles/fluentd/tasks/add_config.yml

# https://success.docker.com/article/node-using-swap-memory-instead-of-host-memory
# vm.swappiness = 0   # Swap is disabled. In earlier versions, this meant that the kernel would swap only to avoid an out of memory condition, but in later versions this is achieved by setting to 1.
# vm.swappiness = 1   # Kernel version 3.5 and over, as well as kernel version 2.6.32-303 and over: Minimum amount of swapping without disabling it entirely.
# to clean swap run 'swapoff -a && swapon -a'
- name: set sysctl values for container environments
  lineinfile:
    path: /etc/sysctl.conf
    regexp: '^{{item.regex}}\s*='
    line: '{{item.line}}'
  with_items:
    - { regex: "vm\\.swappiness", line: "vm.swappiness = 1" }
    - { regex: "vm\\.overcommit_memory", line: "vm.overcommit_memory = 1" }
  register: sysctlchanged
    
- name: refresh sysctl to activate sysctl changes => sysctl changed
  shell: sysctl -p
  when: sysctlchanged.changed
