#https://kofler.info/docker-unter-centos-8-und-fedora-31-installieren/

- name: make sure docker from distro is not installed => is_fedora
  yum:
    name: [
      moby-engine
      #,docker
      #,docker-client
      #,docker-common
      #,docker-latest
      #,docker-logrotate
      #,container-selinux
      #,docker-selinux
      #,docker-engine-selinux
      #,docker-engine
    ]
    state: absent
  when: is_fedora|bool

- name: make sure dnf-plugins.core installed => is_fedora
  dnf:
    name: dnf-plugins-core
    state: present
  when: is_fedora|bool

- name: remove old packages => is_fedora
  yum:
    name: [
        docker
        , docker-client
        , docker-client-latest
        , docker-common
        , docker-latest
        , docker-latest-logrotate
        , docker-logrotate
        , docker-selinux
        , docker-engine-selinux
        , docker-engine
    ]
    state: absent
  when: is_fedora|bool

- name: install docker repository => is_fedora
  command: dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
  args:
    warn: no
  changed_when: no
  when: is_fedora|bool

- name: install required packages => is_fedora
  yum:
    name: [
        docker-ce
        , docker-ce-cli 
        , containerd.io #-1.4.6 # 1.4.8 does not work
#        docker
        , python3-docker  # used by ansible docker module
#        , golang-github-docker-libnetwork-devel # needed to make docker running together with firewalld
        , podman
        , hostname
    ]
    state: present
  when: is_fedora|bool
  
- name: remove old packages => is_ubuntu
  apt:
    name: [
        docker 
        , docker-engine 
        , docker.io 
        , containerd 
        , runc
    ]
    state: absent
  when: is_ubuntu|bool

- name: add docker gpg key => is_ubuntu
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
  when: is_ubuntu|bool
        
- name: install docker repository => is_ubuntu
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ansible_distribution_release}} stable"
    state: present
  when: is_ubuntu|bool

- name: install required packages => is_ubuntu
  apt:
    name: [
        docker-ce 
        , docker-ce-cli 
        , containerd.io
        , python3-docker
        , podman
        , hostname
    ]
    state: present
  when: is_ubuntu|bool

#- name: add suse zypper repository
#  zypper_repository:
#    name: Devel:Kubic (podman)
#    repo: 'http://download.opensuse.org/repositories/devel:/kubic/openSUSE_Leap_{{ansible_distribution_version}}/'
#    auto_import_keys: yes
#    priority: "100"
#    state: present
#  when: is_suse|bool

- name: install required packages => is_suse
  zypper:
    name: [
        docker
#        , python2-docker   # used by ansible docker module => python2 is used because "/usr/lib/python3.6/site-packages/ansible/modules/cloud/docker_container.py" is using python2 (vagrant suse version is using it)
        , python3-docker    # used by ansible docker module
        , podman
        , hostname          # used by container visualizer cli
#        , cni
#        , podman>=1.6.2
#        , cni>=0.7.1
#        , cni-plugins>=0.8.3
    ]
    state: present
  when: is_suse|bool

##### DOCKER #####
- name: prepare needed folder
  file:
    path: "{{item.path}}"
    state: directory
    owner: root
    group: root
    mode: "{{item.mode}}"
  with_items:
    - { mode: "u=rwx,g=rx,o=", path: "/etc/docker/" }
    - { mode: "u=rwx,g=rx,o=", path: "/opt/docker" }
    - { mode: "u=rwx,g=rx,o=", path: "/opt/docker/config" }
    - { mode: "u=rwx,g=x,o=", path: "{{global_lib}}docker" }
    - { mode: "u=rwx,g=x,o=", path: "{{global_etc}}networks" }

- name: set docker selinux configuration => is_fedora
  sefcontext:
    target: "{{global_lib}}docker"
    ftype: "d"
    setype: "container_var_lib_t"
    seuser: "system_u"
    state: present
  register: sefcontext_result
  when: is_fedora|bool

- name: reload selinux configuration => is_fedora and sefcontext changed
  shell: "restorecon {{global_lib}}docker"
  when: is_fedora|bool and sefcontext_result.changed

- name: copy daemon config
  template:
    src: "templates/etc/docker/daemon.json"
    dest: "/etc/docker/daemon.json"
    owner: root
    group: root
    mode: 0644
  register: docker_config_result
  notify: "restart docker"

- name: copy fluentd config
  vars:
    config_file: "templates/etc/fluent/_.ansible.d/docker.conf"
  import_tasks: roles/fluentd/tasks/add_config.yml

- name: synchronize docker tools
  synchronize:
    src: "templates/opt/docker"
    dest: "/opt/"
    archive: no
    checksum: yes
    group: yes
    owner: yes
    perms: yes
    recursive: yes
    rsync_opts:
      - "--chown=root:root"
      - "--chmod=D750,F750"

- name: copy docker tools config
  template:
    src: "templates/config.py"
    dest: "/opt/docker/config/config.py"
    owner: root
    group: root
    mode: 0700

#### PODMAN ####
# !!!!remote deployment does not work
#- name: install roles from ansible galaxy
#  local_action: command ansible-galaxy collection install containers.podman
#  register: ag_result
#  changed_when: "'Installing' in ag_result.stdout"
    
- name: prepare needed folder
  file:
    path: "{{item}}"
    state: directory
    owner: root
    group: root
    mode: 0750
  with_items:
#    - "{{global_build}}podman_dnsname/"
    - "{{global_lib}}libpod/storage/"
    - "{{global_tmp}}libpod/"
    - "{{global_tmp}}containers/storage/"
    - "{{global_lib}}containers/storage/"
  
- name: set podman config
  lineinfile:
    path: /etc/containers/{{item.file}}
    regexp: '^{{item.field}}\s*='
    line: '{{item.field}}="{{item.value}}"'
    create: true
    owner: root
    group: root
    mode: 0640
  with_items:
    - { file: 'libpod.conf', field: 'static_dir', value: '{{global_lib}}libpod/storage/' }
    - { file: 'libpod.conf', field: 'tmp_dir', value: '{{global_tmp}}libpod/' }
    - { file: 'libpod.conf', field: 'cgroup_manager', value: "systemd" }
    - { file: 'storage.conf', field: 'driver', value: 'overlay' }
    - { file: 'storage.conf', field: 'runroot', value: '{{global_tmp}}containers/storage/' }
    - { file: 'storage.conf', field: 'graphroot', value: '{{global_lib}}containers/storage/' }

- name: copy fluentd config => is_suse
  vars:
    config_file: "templates/etc/fluent/_.ansible.d/podman.conf"
  import_tasks: roles/fluentd/tasks/add_config.yml
  
#http://download.opensuse.org/repositories/devel:/kubic/openSUSE_Tumbleweed/x86_64/
#- name: clone dnsname git
#  git:
#    accept_hostkey: yes
#    repo: 'https://github.com/containers/dnsname/'
#    dest: '{{global_build}}podman_dnsname/'
#    version: "master"
#  register: dnsname_git
  
#- name: compile and install dnsname
#  shell: "cd {{global_build}}podman_dnsname/ && make install PREFIX=/usr"
#  when: dnsname_git.changed
#### OTHER ####
    
# https://success.docker.com/article/node-using-swap-memory-instead-of-host-memory
# vm.swappiness = 0   # Swap is disabled. In earlier versions, this meant that the kernel would swap only to avoid an out of memory condition, but in later versions this is achieved by setting to 1.
# vm.swappiness = 1   # Kernel version 3.5 and over, as well as kernel version 2.6.32-303 and over: Minimum amount of swapping without disabling it entirely.
# to clean swap run 'swapoff -a && swapon -a'
- name: set sysctl values for container environments
  lineinfile:
    path: /etc/sysctl.conf
    regexp: '^{{item.regex}}\s*='
    line: '{{item.line}}'
  with_items:
    - { regex: "vm\\.swappiness", line: "vm.swappiness = 1" }
    - { regex: "vm\\.overcommit_memory", line: "vm.overcommit_memory = 1" }

    # IPV4 forwarding is not needed during docker build process. If you get problems, restart firewalld
    #- { regex: "net\\.ipv4\\.ip_forward", line: "net.ipv4.ip_forward = 0" }
  register: sysctlchanged
    
- name: refresh sysctl to activate sysctl changes => sysctl changed
  shell: sysctl -p
  when: sysctlchanged.changed

- name: force docker stop => docker_config_result changed
  systemd:
    state: stopped
    name: docker
  when: docker_config_result.changed

# needs to be started to create docker_network
- name: starting docker
  systemd:
    state: started
    name: docker
    
# bridge network to allow containers host access without beeing in networkmode "host"
- name: create isolated docker network
  docker_network:
    name: "isolated"
    ipam_config:
      - subnet: "{{docker_base_network}}/24"
        gateway: "{{docker_base_gateway}}"
    ipam_driver_options:
      "com.docker.network.bridge.enable_icc": "false"
#    appends: yes

##### MACVLAN #####
- name: create macvlan network
  docker_network:
    name: 'macvlan'
    driver: macvlan
    driver_options:
      parent: '{{main_network_interface}}'
    ipam_config:
      - subnet: '{{server_network}}'
        gateway: '{{server_gateway}}'

# needed, because macvlan in a VM has no internet access, but pihole needs internet access during startup
- name: macvlan routing => not is_production
  shell: |
    ip a | grep br-macvlan > /dev/null
    if [ $? -eq 1 ]; then
      ip link add br-macvlan link {{main_network_interface}} type macvlan mode bridge
      ip addr add {{server_gateway}}/24 dev br-macvlan
      ip link set dev br-macvlan up
      iptables -t filter -I FORWARD --in-interface br-macvlan --out-interface {{ansible_default_ipv4.interface}} --source {{server_network}} --destination {{ansible_default_ipv4.address}} -j ACCEPT
      iptables -t filter -I FORWARD --in-interface {{ansible_default_ipv4.interface}} --out-interface br-macvlan --source {{ansible_default_ipv4.network}}/24 --destination {{server_network}} -j ACCEPT
      iptables -t nat -I POSTROUTING -o {{ansible_default_ipv4.interface}} -j MASQUERADE
      echo "created"
    else
      echo "skipped"
    fi
  changed_when: macvlan_result.stdout != 'skipped'
  register: macvlan_result
  when: "macvlan_range | length > 0 and not is_production"

#- name: test
#  debug:
#    msg: "{{macvlan_result}}"

- name: copy macvlan_bridge cmd
  template:
    src: "templates/create_macvlan_bridge.sh"
    dest: "/opt/docker/create_macvlan_bridge.sh"
    owner: root
    group: root
    mode: 0750
  notify: "restart macvlan_bridge"
  when: "macvlan_range | length > 0"

- name: "create systemd service for 'macvlan_bridge'"
  template:
    src: "templates/macvlan_bridge_service"
    dest: "/etc/systemd/system/macvlan_bridge.service"
    owner: root
    group: root
    mode: 0644
  notify: "restart macvlan_bridge"
  when: "macvlan_range | length > 0"

# ***** FINALIZE *****
- name: register systemd service watcher
  vars:
    name: "macvlan_bridge"
  import_tasks: roles/systemd_watcher/tasks/add_watcher.yml
  when: "macvlan_range | length > 0"

- name: trigger macvlan_bridge handler
  vars:
    notify: "restart macvlan_bridge"
    service: "macvlan_bridge.service"
  import_tasks: roles/_shared/tasks/service_check.yml
  when: "macvlan_range | length > 0"

- name: register systemd service watcher
  vars:
    name: "docker"
  import_tasks: roles/systemd_watcher/tasks/add_watcher.yml

- name: trigger docker handler
  vars:
    notify: "restart docker"
    service: "docker.service"
  import_tasks: roles/_shared/tasks/service_check.yml

#- name: register systemd service watcher
#  vars:
#    name: "podman.socket"
#  import_tasks: roles/systemd_watcher/tasks/add_watcher.yml

#- name: trigger podman handler
#  vars:
#    notify: "restart podman"
#    service: "podman.socket"
#  import_tasks: roles/_shared/tasks/service_check.yml
