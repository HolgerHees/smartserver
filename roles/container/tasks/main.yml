#https://kofler.info/docker-unter-centos-8-und-fedora-31-installieren/

- name: make sure docker from distro is not installed => is_fedora
  yum:
    name: [
      moby-engine
      #,docker
      #,docker-client
      #,docker-common
      #,docker-latest
      #,docker-logrotate
      #,container-selinux
      #,docker-selinux
      #,docker-engine-selinux
      #,docker-engine
    ]
    state: absent
  when: is_fedora|bool

- name: make sure dnf-plugins.core installed => is_fedora
  dnf:
    name: dnf-plugins-core
    state: present
  when: is_fedora|bool

- name: install docker repository => is_fedora
  command: dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
  args:
    warn: no
  changed_when: no
  when: is_fedora|bool

- name: install docker => is_fedora
  dnf:
    name: [
      docker-ce
      #,docker-ce-cli 
      #,containerd.io
    ]
    state: present
  notify: "restart docker"
  when: is_fedora|bool
    
- name: install required packages => is_fedora
  yum:
    name: [
#        docker
        python3-docker  # used by ansible docker module
#        , golang-github-docker-libnetwork-devel # needed to make docker running together with firewalld
#        , podman
    ]
    state: present
  when: is_fedora|bool
  
#- name: add suse zypper repository
#  zypper_repository:
#    name: Devel:Kubic (podman)
#    repo: 'http://download.opensuse.org/repositories/devel:/kubic/openSUSE_Leap_{{ansible_distribution_version}}/'
#    auto_import_keys: yes
#    priority: "100"
#    state: present
#  when: is_suse|bool

- name: install required packages => is_suse
  zypper:
    name: [
        docker
        , python2-docker  # used by ansible docker module => python2 is used because "/usr/lib/python3.6/site-packages/ansible/modules/cloud/docker_container.py" is using python2
        #, python3-docker  # used by ansible docker module
#        , podman
#        , podman>=1.6.2
#        , cni>=0.7.1
#        , cni-plugins>=0.8.3
    ]
    state: present
  notify: "restart docker"
  when: is_suse|bool

- name: prepare needed folder
  file:
    path: "{{item}}"
    state: directory
    owner: root
    group: root
    mode: 0750
  with_items:
    - "/etc/docker/"
    - "{{global_lib}}docker"
    - "/opt/docker_visualizer"

- name: set docker selinux configuration => is_fedora
  sefcontext:
    target: "{{global_lib}}docker"
    ftype: "d"
    setype: "container_var_lib_t"
    seuser: "system_u"
    state: present
  register: sefcontext_result
  when: is_fedora|bool

- name: reload selinux configuration => is_fedora and sefcontext changed
  shell: "restorecon {{global_lib}}docker"
  when: is_fedora|bool and sefcontext_result.changed

- name: copy daemon config
  template:
    src: "templates/etc/docker/daemon.json"
    dest: "/etc/docker/daemon.json"
    owner: root
    group: root
    mode: 0644
  notify: "restart docker"

- name: copy fluentd config
  vars:
    config_file: "templates/etc/fluent/_.ansible.d/docker.conf"
  import_tasks: roles/fluentd/tasks/add_config.yml

- name: copy docker_visualizer
  copy:
    src: "templates/opt/docker_visualizer/visualizer"
    dest: "/opt/docker_visualizer/visualizer"
    owner: root
    group: root
    mode: 0700

#- name: copy fluentd config => is_suse
#  vars:
#    config_file: "templates/etc/fluent/_.ansible.d/podman.conf"
#  import_tasks: roles/fluentd/tasks/add_config.yml
#  when: is_suse|bool
  
#- name: set podman config
#  lineinfile:
#    path: /etc/containers/{{item.file}}
#    regexp: '^{{item.field}}\s*='
#    line: '{{item.field}}="{{item.value}}"'
#    create: true
#    owner: root
#    group: root
#    mode: 0640
#  with_items:
#    - { file: 'libpod.conf', field: 'static_dir', value: '{{global_lib}}libpod/storage/' }
#    - { file: 'libpod.conf', field: 'tmp_dir', value: '{{global_tmp}}libpod/' }
#    - { file: 'libpod.conf', field: 'cgroup_manager', value: "{{ 'systemd' if is_suse|bool else 'systemd' }}" }
#    - { file: 'storage.conf', field: 'runroot', value: '{{global_tmp}}containers/storage/' }
#    - { file: 'storage.conf', field: 'graphroot', value: '{{global_lib}}containers/storage/' }

# https://success.docker.com/article/node-using-swap-memory-instead-of-host-memory
# vm.swappiness = 0   # Swap is disabled. In earlier versions, this meant that the kernel would swap only to avoid an out of memory condition, but in later versions this is achieved by setting to 1.
# vm.swappiness = 1   # Kernel version 3.5 and over, as well as kernel version 2.6.32-303 and over: Minimum amount of swapping without disabling it entirely.
# to clean swap run 'swapoff -a && swapon -a'
- name: set sysctl values for container environments
  lineinfile:
    path: /etc/sysctl.conf
    regexp: '^{{item.regex}}\s*='
    line: '{{item.line}}'
  with_items:
    - { regex: "vm\\.swappiness", line: "vm.swappiness = 1" }
    - { regex: "vm\\.overcommit_memory", line: "vm.overcommit_memory = 1" }

    # IPV4 forwarding is not needed during docker build process. If you get problems, restart firewalld
    #- { regex: "net\\.ipv4\\.ip_forward", line: "net.ipv4.ip_forward = 0" }
  register: sysctlchanged
    
- name: refresh sysctl to activate sysctl changes => sysctl changed
  shell: sysctl -p
  when: sysctlchanged.changed

# needs to be started to create docker_network
- name: starting docker
  systemd:
    name: docker
    state: started
    
# bridge network to allow containers host access without beeing in networkmode "host"
- name: create host accessible network
  docker_network:
    name: hostaccess
    ipam_config:
      - subnet: "{{docker_hostaccess_network}}/24"
        gateway: "{{docker_hostaccess_gateway}}"
          
# ***** FINALIZE *****
- name: register systemd service watcher
  vars:
    name: "docker"
  import_tasks: roles/systemd_watcher/tasks/add_watcher.yml

- name: trigger service check handler
  vars:
    notify: "restart docker"
    service: "docker.service"
  import_tasks: roles/base/tasks/service_check.yml
