- name: set version
  set_fact:
    onlyoffice_version: "6.2.0.123"
  tags: [ 'update_notifier_configs' ]
  
- name: prepare needed folder
  file:
    path: "{{item}}"
    state: directory
    owner: "106" # user id from docker container
    group: "108" # group id from docker container
    mode: 0755
  with_items:
    - "{{global_log}}onlyoffice"
    - "{{global_lib}}onlyoffice"
    - "{{global_etc}}onlyoffice"

- name: build docker image
  vars:
    name: "onlyoffice"
    image_name: "custom_onlyoffice"
    image_version: "{{onlyoffice_version}}"
    files:
      - roles/nextcloud_onlyoffice/templates/container/Dockerfile
  import_tasks: roles/container/tasks/build_docker_image.yml

- name: create docker network
  docker_network:
    name: onlyoffice
    ipam_config:
      - subnet: "{{docker_onlyoffice_ip.split('.')[:3] | join('.')}}.0/24"
        gateway: "{{docker_onlyoffice_ip.split('.')[:3] | join('.')}}.1"
    connected:
      - mysql
      - redis
    appends: yes
  tags: ['mysql','redis']
  
- name: create docker container
  docker_container:
    name: onlyoffice
    image: "custom_onlyoffice:{{onlyoffice_version}}"
    state: present
#    network_mode: "host"
#    recreate: true
    env:
      TZ: "{{timezone}}"
      JWT_ENABLED: "true"
      JWT_SECRET: "{{vault_onlyoffice_shared_key}}"
      USE_UNAUTHORIZED_STORAGE: "true"
      REDIS_SERVER_HOST: "redis"
      REDIS_SERVER_PORT: "6379"
#      DB_TYPE: "mariadb" => gives
#         Aborted connection 16707 to db: 'unconnected' user: 'unauthenticated' host: '172.21.0.4' (This connection closed normally without authentication)

#      DB_TYPE: "mysql" => gives every hour
#         Aborted connection 15784 to db: 'onlyoffice' user: 'onlyoffice' host: '172.21.0.4' (Got timeout reading communication packets)

#      DB_TYPE: "mysql"
#      DB_HOST: "mysql"
#      DB_PORT: "3306"
#      DB_NAME: "onlyoffice"
#      DB_USER: "{{vault_onlyoffice_mysql_username}}"
#      DB_PWD: "{{vault_onlyoffice_mysql_password}}"
    log_driver: journald
    log_options:
      tag: onlyoffice
    volumes:
      - '{{global_log}}onlyoffice:/var/log/onlyoffice:z'
      - '{{global_lib}}onlyoffice:/var/www/onlyoffice/Data:z'
    networks:
      - name: "onlyoffice"
        ipv4_address: "{{docker_onlyoffice_ip}}"
    networks_cli_compatible: yes
    exposed_ports:
     - "80"  
     - "443"  
  notify: "restart onlyoffice"
    
- name: add container name
  vars:
    host_name: "onlyoffice"
    host_ip_address: "{{docker_onlyoffice_ip}}"
  import_tasks: roles/network/tasks/add_to_hosts.yml

# ***** DATABASE *****
- name: check mysql service
  import_tasks: roles/mysql/tasks/wait_until_ready.yml
  
- name: check mysql databases
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e 'show databases;'\""
  register: mysql_data_exists
  changed_when: "'onlyoffice' not in mysql_data_exists.stdout"

- name: create missing mysql databases => database does not exists
  shell: "docker exec mysql sh -c \"mysqladmin -u root -h 127.0.0.1 create onlyoffice\""
  when: "'onlyoffice' not in mysql_data_exists.stdout"
  
- name: create missing mysql user => database does not exists
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e \\\"CREATE USER IF NOT EXISTS '{{vault_onlyoffice_mysql_username}}'@'%' IDENTIFIED BY '{{vault_onlyoffice_mysql_password}}';\\\"\""
  when: "'onlyoffice' not in mysql_data_exists.stdout"

- name: grant permissions to mysql user => database does not exists
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e \\\"GRANT ALL PRIVILEGES ON onlyoffice.* TO '{{vault_onlyoffice_mysql_username}}'@'%';\\\"\""
  when: "'onlyoffice' not in mysql_data_exists.stdout"

- name: refresh mysql privileges => database does not exists
  shell: "docker exec mysql sh -c \"mysqladmin -u root -h 127.0.0.1 flush-privileges\""
  when: "'onlyoffice' not in mysql_data_exists.stdout"
  
# ***** FINALIZE *****
#- name: copy fluentd config
#  vars:
#    config_file: "templates/etc/fluent/_.ansible.d/mosquitto.conf"
#  import_tasks: roles/fluentd/tasks/add_config.yml

- name: allow onlyoffice service
  vars:
    name: "https.onlyoffice"
    rule: "proto tcp dport 443 saddr {{docker_onlyoffice_ip}}"
  import_tasks: roles/firewall/tasks/allow_service.yml
  tags: [ 'firewall_config' ]

- name: copy apache vhost
  vars:
    sub_domain: "onlyoffice"
    include: "templates/etc/apache2/_.ansible.vhost.d/onlyoffice.inc"
  import_tasks: roles/apache/tasks/add_vhost.yml

- name: create systemd service
  vars:
    container_name: "onlyoffice"
  import_tasks: roles/container/tasks/add_docker_service.yml

- name: register update notifier
  vars:
    name: "onlyoffice"
    type: "docker"
    url: "https://helpcenter.onlyoffice.com/de/server/document/changelog.aspx"
    config: { 
      repository: "onlyoffice/documentserver", 
      pattern: "^([0-9\\.]+)$" 
    }
  import_tasks: roles/update_notifier/tasks/add_notifier.yml

- name: trigger onlyoffice handler
  vars:
    notify: "restart onlyoffice"
    service: "onlyoffice.service"
  import_tasks: roles/_shared/tasks/service_check.yml
