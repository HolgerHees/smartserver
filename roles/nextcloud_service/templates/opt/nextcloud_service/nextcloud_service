#!/usr/bin/python3

import logging

from smartserver.server import Server
from smartserver.metric import Metric

from config import config

from lib import inotify_watcher
from lib import inotify_publisher
from lib import inotify_listener
from lib import preview_generator

from lib._process import Process


class Handler(Server):
    def __init__(self):
        super().__init__("nextcloud_service", "0.0.0.0", "80")

        Process.init(config.process_container_uid)

        self.preview_generator = preview_generator.PreviewGenerator(config)
        self.inotify_listener = inotify_listener.INotifyListener(config)
        self.inotify_publisher = inotify_publisher.INotifyPublisher(config, self.preview_generator, self)
        self.inotify_watcher = inotify_watcher.INotifyWatcher(config, self.inotify_publisher, self.startLazy)

    def confirmEvent(self, time):
        self.inotify_watcher.confirmEvent(time)

    def start(self):
        self.inotify_watcher.start()

        super().start()

    def startLazy(self):
        self.inotify_listener.start()
        self.inotify_publisher.start()
        self.preview_generator.start()

    def terminate(self):
        #logging.info("Terminate inotify watcher")
        self.inotify_watcher.terminate()

        #logging.info("Terminate inotify publisher")
        self.inotify_publisher.terminate()

        #logging.info("Terminate inotify listener")
        self.inotify_listener.terminate()

        #logging.info("Terminate preview generator")
        self.preview_generator.terminate()

        super().terminate()

    def getStateMetrics(self):
        metrics = []
        metrics += self.inotify_watcher.getStateMetrics()
        metrics += self.inotify_listener.getStateMetrics()
        metrics += self.inotify_publisher.getStateMetrics()
        metrics += self.preview_generator.getStateMetrics()
        return Metric.buildMetricsResult(metrics)

handler = Handler()
handler.start()
