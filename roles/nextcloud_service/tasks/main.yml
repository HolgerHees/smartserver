- name: prepare needed directories
  vars:
    directories:
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_opt}}nextcloud_service" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_opt}}nextcloud_service/config" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_lib}}nextcloud_service" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_build}}nextcloud_service" }
  include_tasks: roles/_shared/create_directories.yml

- name: synchronize service
  synchronize:
    src: "templates/opt/{{item.path}}"
    dest: "{{global_opt}}nextcloud_service/"
    archive: no
    checksum: yes
    group: yes
    owner: yes
    perms: yes
    recursive: yes
    rsync_opts:
      - "--chown=root:root"
      - "--chmod={{item.chmod}}"
  with_items:
    - { "chmod": "D750,F640", "path": "nextcloud_service/lib" }
    - { "chmod": "D750,F750", "path": "nextcloud_service/nextcloud_service" }
  notify: "restart nextcloud_service"

- name: copy service config
  template:
    src: "templates/config.py"
    dest: "{{global_opt}}nextcloud_service/config/config.py"
    owner: root
    group: root
    mode: 0750
  notify: "restart nextcloud_service"

- name: build container image
  vars:
    container_name: "nextcloud_service"
    image_name: "custom_nextcloud_service:{{alpine_version}}"
    image_files:
      - roles/nextcloud_service/templates/container/Dockerfile
    entrypoint_startup:
      - "/opt/shared/python/install.py"
      - "{{global_opt}}nextcloud_service/nextcloud_service &"
  include_tasks: roles/container/shared/build_podman_image.yml

- name: create container service
  vars:
    container_name: "nextcloud_service"
    container_image: "custom_nextcloud_service:{{alpine_version}}"
    container_network: "isolated"
    container_ip: "{{podman_nextcloud_service_ip}}"
    container_exposed_ports:
      - "80/tcp"
    container_pid_mode: "host"
    container_privileged: "true"
    container_volumes:
      - '{{global_opt}}shared/python:/opt/shared/python:ro,z'
      - '{{global_opt}}nextcloud_service/:{{global_opt}}nextcloud_service:ro,z' # needs to be same path as on host, because inside the container we use 'with nsenter.Host():'
      - '{{global_lib}}nextcloud_service/:/var/lib/nextcloud_service/nextcloud_service:ro,z'
      - '{{htdocs_path}}:{{htdocs_path}}:ro,z'
      - '{{nextcloud_data_path}}:{{nextcloud_data_path}}:z'
      - '/etc/group:/etc/group:ro'
      - '/etc/passwd:/etc/passwd:ro'
    container_readyness: { "type": "port_check", "ip": "{{podman_nextcloud_service_ip}}", "port": "80" }
  include_tasks: roles/container/shared/create_podman_service.yml
  tags: ['podman_container','systemd_watcher_config','systemd_service_config']

- name: allow container service
  vars:
    service_name: "nextcloud_service"
    container_to_container_rules:
      - { saddr: "{{podman_prometheus_ip}}", daddr: "{{podman_nextcloud_service_ip}}", protocol: "tcp", dport: "80", comment: "prometheus => nextcloud_service" }
      - { saddr: "{{podman_nextcloud_service_ip}}", daddr: "{{podman_redis_ip}}", protocol: "tcp", dport: "6379", comment: "nextcloud_service => redis" }
  include_tasks: roles/firewall/shared/allow_service.yml
  tags: ['firewall_config']
  
- name: register prometheus rules & metrics
  vars:
    name: "nextcloud_service"
    rules_file: "templates/prometheus/rules.yml"
    scrape_file: "templates/prometheus/scrape.yml"
  include_tasks: roles/prometheus/shared/add_config.yml
  tags: ['prometheus_config']
  when: "monitoring_enabled"

- name: copy service fluentd config
  vars:
    service_name: "nextcloud_service"
    service_is_container: yes
  include_tasks: roles/shared_libs/shared/add_fluentd_service_config.yml
  tags: ['fluentd_config']
  when: "monitoring_enabled"
