- name: set version
  set_fact:
    netdata_version: "1.29.3"
  tags: [ 'update_notifier_configs' ]
  
  
  
  
  
  
  
  
  
  
  
  
  
- name: prepare needed folder
  file:
    path: '{{item}}'
    state: directory
    owner: "201"
    group: "201"
    mode: 0750
  with_items:
    - "{{ global_lib }}netdata_test"
    - "{{ global_lib }}netdata_test/cache"
    - "{{ global_etc }}netdata"
    - "{{ global_etc }}netdata/health.d"
#    - "/opt/netdata_helper"

- name: copy config
  template:
    src: "templates{{item.src}}"
    dest: "{{item.dest}}"
    owner: "201"
    group: "201"
    mode: 0640
  with_items:
    - { src: "/etc/netdata_test/.environment", dest: "{{ global_etc }}netdata/.environment" }
    - { src: "/etc/netdata_test/netdata.conf", dest: "{{ global_etc }}netdata/netdata.conf" }
    - { src: "/etc/netdata_test/exporting.conf", dest: "{{ global_etc }}netdata/exporting.conf" }
    - { src: "/etc/netdata_test/python.d.conf", dest: "{{ global_etc }}netdata/python.d.conf" }
    - { src: "/etc/netdata_test/fping.conf", dest: "{{ global_etc }}netdata/fping.conf" }
    - { src: "/etc/netdata_test/health_alarm_notify.conf", dest: "{{ global_etc }}netdata/health_alarm_notify.conf" }
    - { src: "/etc/netdata_test/health.d/disks.conf", dest: "{{ global_etc }}netdata/health.d/disks.conf" }
    - { src: "/etc/netdata_test/health.d/softnet.conf", dest: "{{ global_etc }}netdata/health.d/softnet.conf" }
    - { src: "/etc/netdata_test/health.d/net.conf", dest: "{{ global_etc }}netdata/health.d/net.conf" }
    - { src: "/etc/netdata_test/health.d/fping.conf", dest: "{{ global_etc }}netdata/health.d/fping.conf" }
    - { src: "/etc/netdata_test/health.d/udp_errors.conf", dest: "{{ global_etc }}netdata/health.d/udp_errors.conf" }
  notify: "restart netdata"

#- name: copy helper
#  template:
#    src: "templates{{item}}"
#    dest: "{{item}}"
#    owner: root
#    group: root
#    mode: 750
#  with_items:
#    - "/opt/netdata_helper/send_notification.sh"
#    - "/opt/netdata_helper/inform_openhab"    
    
- name: check started docker
  systemd:
    name: docker
    state: started

#- name: create docker network
#  docker_network:
#    name: netdata
#    connected:
#      - influxdb
#    appends: yes
#  tags: ['influxdb']

- name: create docker container
  docker_container:
    name: netdata_test
    image: "netdata/netdata:v{{netdata_version}}"
    state: present
    #pid_mode: "host"
#    recreate: true
    env:
      TZ: "{{timezone}}"
      PGID: "473"
    #  NETDATA_PORT: "29999"
      NETDATA_PORT: "19999"
    #  DOCKER_USR: "root"
    #  VIRTUALIZATION: "kvm"
    log_driver: journald
    log_options:
      tag: netdata_test
    capabilities:
      - SYS_PTRACE
    #  - SYS_ADMIN
    security_opts:
      - "apparmor:unconfined"
    pid_mode: "host"
    privileged: yes
    container_default_behavior: "compatibility"
    network_mode: "host"
#    networks:
#      - name: "netdata"
#    networks_cli_compatible: yes
    volumes:
      - '{{ global_lib }}netdata_test:/var/lib/netdata:z'
      - '{{ global_lib }}netdata_test/cache:/var/cache/netdata:z'      
      - "{{ global_etc }}netdata/.environment:/etc/netdata/.environment:ro,z"
      - "{{ global_etc }}netdata/netdata.conf:/etc/netdata/netdata.conf:ro,z"
      - "{{ global_etc }}netdata/python.d.conf:/etc/netdata/python.d.conf:ro,z"
      - "{{ global_etc }}netdata/fping.conf:/etc/netdata/fping.conf:ro,z"
      - "{{ global_etc }}netdata/health_alarm_notify.conf:/etc/netdata/health_alarm_notify.conf:ro,z"
      - "{{ global_etc }}netdata/health.d/disks.conf:/etc/netdata/health.d/disks.conf:ro,z"
      - "{{ global_etc }}netdata/health.d/softnet.conf:/etc/netdata/health.d/softnet.conf:ro,z"
      - "{{ global_etc }}netdata/health.d/net.conf:/etc/netdata/health.d/net.conf:ro,z"
      - "{{ global_etc }}netdata/health.d/fping.conf:/etc/netdata/health.d/fping.conf:ro,z"
      - "{{ global_etc }}netdata/health.d/udp_errors.conf:/etc/netdata/health.d/udp_errors.conf:ro,z"
      - '/opt/netdata_helper/:/opt/netdata_helper/:ro'
      - '/etc/os-release:/host/etc/os-release:ro'
      - '/etc/passwd:/host/etc/passwd:ro'
      - '/etc/group:/host/etc/group:ro'
      - '/proc:/host/proc:ro'
      - '/sys:/host/sys:ro'
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
    exposed_ports:
     - "19999"  
    # - "127.0.0.1:19999:19999"  
#  notify: "restart netdata"

# chown -R netdata:netdata /usr/share/netdata/web/

# https://github.com/Tecnativa/docker-socket-proxy

#- name: create systemd service
#  vars:
#    container_name: "netdata_test"
#  import_tasks: roles/container/tasks/add_docker_service.yml

































- name: install required packages => is_fedora
  yum:
    name: [
        netdata
      , fping
      , lm_sensors
    ]
    state: present
  notify: "restart netdata"
  when: is_fedora|bool

- name: add zypper repository => is_suse
  zypper_repository:
    name: Network (netdata)
    repo: "http://download.opensuse.org/repositories/network/openSUSE_Leap_{{ansible_distribution_version}}/"
    auto_import_keys: yes
    priority: "100"
    state: present
  when: is_suse|bool

- name: install required packages => is_suse
  zypper:
    name: [
        "netdata>={{netdata_version}}"
      , fping
      , sensors
      # needed to rebuild rpm package
      #, rpm-build
      #, cups-devel
      #, judy-devel
      #, libcap-devel
      #, liblz4-devel
      #, libmnl-devel
      #, libnetfilter_acct-devel
      #, libuv-devel
      #, freeipmi-devel
    ]
    state: present
  notify: "restart netdata"
  when: is_suse|bool

- name: prepare needed folder
  file:
    path: '{{item}}'
    state: directory
    owner: root
    group: root
    mode: 0750
  with_items:
    - "{{ global_lib }}netdata"
    - "{{ global_lib }}netdata/cache"
    - "/etc/netdata/custom-plugins.d"
    - "/etc/netdata/health.d"
    - "/opt/netdata_helper"

- name: prepare missing folder => is_fedora
  file:
    path: '{{item}}'
    state: directory
    owner: root
    group: root
    mode: 0750
  with_items:
    - "/var/run/netdata"
    - "/usr/lib64/netdata/"
    - "/usr/lib64/netdata/conf.d/"
  when: is_fedora|bool

- name: copy config
  template:
    src: "templates{{item}}"
    dest: "{{item}}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - "/etc/netdata/.environment"
    - "/etc/netdata/netdata.conf"
    - "/etc/netdata/exporting.conf"
    - "/etc/netdata/python.d.conf"
    - "/etc/netdata/fping.conf"
    - "/etc/netdata/health_alarm_notify.conf"
    - "/etc/netdata/health.d/disks.conf"
    - "/etc/netdata/health.d/softnet.conf"
    - "/etc/netdata/health.d/net.conf"
    - "/etc/netdata/health.d/fping.conf"
    - "/etc/netdata/health.d/udp_errors.conf"
  notify: "restart netdata"

- name: copy helper
  template:
    src: "templates{{item}}"
    dest: "{{item}}"
    owner: root
    group: root
    mode: 750
  with_items:
    - "/opt/netdata_helper/send_notification.sh"
    - "/opt/netdata_helper/inform_openhab"

- name: change runtime user
  lineinfile:
    path: /usr/lib/systemd/system/netdata.service
    insertafter: '^\[Service\]'
    regexp: '^{{item.field}}\s*='
    line: '{{item.field}}={{item.value}}'
  with_items:
    - { field: "User", value: "root" }
    #- { field: "CPUSchedulingPolicy", value: "other" } # was "idle" before
    #- { field: "Nice", value: "0" } # was "#Nice=0" before
  notify: "restart netdata"

# ***** INFLUXDB2 DATABASE ****
- name: check influxdb service
  import_tasks: roles/influxdb/tasks/wait_until_ready.yml

- name: check bucket
  shell: "docker exec influxdb sh -c \"influx bucket list --name opentsdb --org default-org --json\""
  register: influxdb_bucket_result
  failed_when: "influxdb_bucket_result.rc == 1 and 'not found' not in influxdb_bucket_result.stdout"
  changed_when: False

- name: create bucket => bucket does not exists
  shell: "docker exec influxdb sh -c \"influx bucket create --name opentsdb --org default-org --retention 365d\""
  when: "'not found' in influxdb_bucket_result.stdout"

- name: check bucket mapping
  shell: "docker exec influxdb sh -c \"influx v1 dbrp list --db opentsdb --org default-org --json\""
  register: influxdb_mapping_result
  changed_when: False
  
- name: get bucket id => bucket mapping does not exists
  shell: "docker exec influxdb sh -c \"influx bucket list --name opentsdb --org default-org --json\""
  register: influxdb_bucket_result
  when: "( influxdb_mapping_result.stdout | from_json | length ) == 0"

- name: create bucket mapping => bucket mapping does not exists
  shell: "docker exec influxdb sh -c \"influx v1 dbrp create --db opentsdb --org default-org --rp autogen --bucket-id {{( influxdb_bucket_result.stdout | from_json)[0].id}} --default\""
  when: "( influxdb_mapping_result.stdout | from_json | length ) == 0"
  
# ***** OTHER *****
- name: register webui
  vars:
    name: "netdata"
    js_file: "templates/webui/netdata.js"
    i18n_files: [ { language: "de", file: "templates/webui/netdata.de.json" } ]
    listener: { "sub_domain": "netdata", "js_file": "templates/webui/netdata.listener.js" }
    icons: [ 'templates/webui/icons/netdata_logo.svg' ]
  import_tasks: roles/apache_webui/tasks/add_webui.yml

- name: copy apache vhost
  vars:
    sub_domain: "netdata"
    include: "templates/etc/apache2/_.ansible.vhost.d/netdata.inc"
  import_tasks: roles/apache/tasks/add_vhost.yml

- name: create cron job
  vars:
    name: "Influxdb OpenTSDB Backup"
    cmd: "docker exec influxdb sh -c \"influx backup --bucket opentsdb --org default-org /var/lib/influxdb_backup/opentsdb_$(date +\\%Y-\\%m-\\%d)/ > /dev/null\""
    file: "ansible_netdata"
    hour: "1"
    minute: "0"
  import_tasks: roles/cron/tasks/add_cronjob.yml

- name: create cron job
  vars:
    name: "Netdata error check"
    cmd: "/opt/netdata_helper/inform_openhab"
    file: "ansible_netdata"
  import_tasks: roles/cron/tasks/add_cronjob.yml
  
# ***** FINALIZE *****
- name: register systemd service watcher
  vars:
    name: "netdata"
  import_tasks: roles/systemd_watcher/tasks/add_watcher.yml

- name: register update notifier
  vars:
    name: "netdata"
    type: "github"
    url: "https://github.com/netdata/netdata/releases"
    config: { 
      project: "netdata/netdata", 
      pattern: "^v([0-9\\.]+)$",
      version: "v{{netdata_version}}" 
    }
  import_tasks: roles/update_notifier/tasks/add_notifier.yml

- name: trigger netdata handler
  vars:
    notify: "restart netdata"
    service: "netdata.service"
  import_tasks: roles/_shared/tasks/service_check.yml
