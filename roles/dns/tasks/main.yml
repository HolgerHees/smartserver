- name: prepare needed folder
  file:
    path: '{{item}}'
    state: directory
    owner: root
    group: root
    mode: 0750
  with_items:
    - "{{ global_etc }}named"

- name: copy config
  template:
    src: "templates/etc/{{item}}"
    dest: "{{ global_etc }}named/{{item}}"
    owner: root
    group: root
    mode: 0640
  with_items:
    - "dnsmasq.conf"
    - "dnsmasq-hosts"
    - "resolv.dnsmasq.conf"

- name: check started docker
  systemd:
    name: docker
    state: started
    
- name: check docker image exists
  shell: "docker images custom_named:{{alpine_version}}"
  register: image_exists
  changed_when: "'custom_named' not in image_exists.stdout"
 
- name: prepare build folder
  file:
    path: "{{global_build}}named/"
    state: directory
    owner: root
    group: root
    mode: 0750
  when: "'custom_named' not in image_exists.stdout"

- name: copy dockerfiles
  copy:
    src: "roles/dns/templates/container/Dockerfile"
    dest: "{{global_build}}named/Dockerfile"
    owner: root
    group: root
  when: "'custom_named' not in image_exists.stdout"
  
# async docker build is used to show progress and prevent travisci killing our job because of inactivity
- name: compose docker image => image does not exists
  shell: "docker build -t custom_named:{{alpine_version}} {{global_build}}named/ --build-arg VERSION={{alpine_version}}"
  async: 600
  poll: 0
  register: docker_build
  when: "'custom_named' not in image_exists.stdout"

- name: wait for docker image => image does not exists
  async_status: jid={{ docker_build.ansible_job_id }}
  register: job_result
  until: job_result.finished
  retries: 10
  delay: 60
  when: "'custom_named' not in image_exists.stdout"
  
- name: create docker container
  docker_container:
    name: named
    image: "custom_named:{{alpine_version}}"
    state: present
#    recreate: true
    env:
      TZ: "{{timezone}}"
    log_driver: journald
    log_options:
      tag: named
    volumes:
      - '{{ global_etc }}named/dnsmasq-hosts:/etc/dnsmasq-hosts:z'
      - '{{ global_etc }}named/dnsmasq.conf:/etc/dnsmasq.conf:z'
      - '{{ global_etc }}named/resolv.dnsmasq.conf:/etc/resolv.dnsmasq.conf:z'
    ports:
      - "53:53/udp"
  notify: "restart named"

# ***** ENABLE USAGE OF LOCAL DNS *****
- name: disable NetworkManager dns handling => is_fedora
  lineinfile:
    path: /etc/NetworkManager/NetworkManager.conf
    insertafter: '^\[main\]'
    regexp: '^{{item.field}}\s*='
    line: '{{item.field}}={{item.value}}'
  register: networkmanager_status
  with_items:
    - { field: "dns", value: "none" }
  when: is_fedora|bool

- name: netconfig update => is_fedora and NetworkManager changed
  systemd:
    name: NetworkManager
    state: restarted
  when: "is_fedora|bool and networkmanager_status.changed"

- name: disable netconfig dns handling => is_suse
  lineinfile:
    path: /etc/sysconfig/network/config
    regexp: '^{{item.field}}\s*='
    line: '{{item.field}}="{{item.value}}"'
  register: netconfig_status
  with_items:
    - { field: "NETCONFIG_DNS_POLICY", value: "" }
  when: is_suse|bool

- name: netconfig update => is_suse and netconfig changed
  shell: "netconfig update -f"
  when: "is_suse|bool and netconfig_status.changed"
  
- name: remove symlink => is_suse and netconfig changed
  file:
    path: /etc/resolv.conf
    state: absent
  when: "is_suse|bool and netconfig_status.changed"

- name: create file => is_suse and netconfig changed
  file:
    path: /etc/resolv.conf
    state: touch
    owner: root
    group: root
    mode: 0755
  when: "is_suse|bool and netconfig_status.changed"

- name: set dns config
  lineinfile:
    path: /etc/resolv.conf
    regexp: '^{{item.field}} \s*'
    line: '{{item.field}} {{item.value}}'
  with_items:
    #- { field: "search", value: "{{server_domain}}"}
    - { field: "nameserver", value: "127.0.0.1"}
  notify:
    - "restart named"

# ***** FINALIZE *****
- name: create systemd service
  vars:
    container_name: "named"
  import_tasks: roles/container/tasks/add_docker_service.yml

- name: trigger service check handler
  vars:
    notify: "restart named"
    service: "named.service"
  import_tasks: roles/base/tasks/service_check.yml
