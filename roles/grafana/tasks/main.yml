- name: add zypper repository
  zypper_repository:
    name: Server:monitoring (grafana)
    repo: 'http://download.opensuse.org/repositories/server:/monitoring/openSUSE_Leap_{{ansible_distribution_version}}/'
    auto_import_keys: yes
    autorefresh: no
    priority: "100"
    state: present

- name: install required packages
  zypper:
    name: "grafana"
    state: present
  notify: "restart grafana"
  
# (was missing in rpm package)
- name: copy sysconfig file
  template:
    src: "roles/grafana/templates{{item.path}}"
    dest: "{{item.path}}"
    owner: root
    group: root
    mode: "{{item.mode}}"
  with_items:
    - { mode: "u=rw,g=r,o=r", path: "/etc/sysconfig/grafana-server" }
  notify: "restart grafana"
  
- name: prepare needed folder
  file:
    path: '{{item}}'
    state: directory
    owner: grafana
    group: grafana
    #mode: 0770
    recurse: true
  with_items:
    - "{{ global_lib }}grafana/"
    - "{{ global_lib }}grafana/dashboards/"
    - "{{ global_lib }}grafana/provisioning"
    - "{{ global_lib }}grafana/provisioning/dashboards/"
    - "{{ global_lib }}grafana/provisioning/datasources/"
    - "{{ global_lib }}grafana/provisioning/notifiers/"

- name: copy grafana dashboards
  copy:
    src: "{{item}}"
    dest: "{{ global_lib }}grafana/dashboards/{{item|basename}}"
    decrypt: yes
    owner: grafana
    group: grafana
    mode: 0640
  notify: "restart grafana"
  with_fileglob:
    - "roles/grafana/templates/dashboards/*"

- name: copy grafana provisioning
  template:
    src: "roles/grafana/templates/{{item}}"
    dest: "{{ global_lib }}grafana/{{item}}"
    decrypt: yes
    owner: grafana
    group: grafana
    mode: 0640
  notify: "restart grafana"
  with_items:
    - "provisioning/dashboards/provider.yaml"
    - "provisioning/datasources/openhab.yaml"
    - "provisioning/datasources/opentsdb.yaml"
  when: "vault_active|bool"
  
  
  
  
  
  
#- name: create docker container
#  shell: |
#    docker create 
#    --name grafana 
#    --log-driver none 
#    --user root 
#    --volume "{{global_lib}}grafana:/var/lib/grafana" 
#    -p 3000:3000 
#    grafana/grafana:5.4.3

#- name: check started docker
#  systemd:
#    name: docker
#    state: started
    
- name: prepare needed folder
  file:
    path: '{{item}}'
    state: directory
    owner: root
    group: root
    mode: 0777
    recurse: true
  with_items:
    - "{{ global_lib }}grafanaNew/"
    - "{{ global_lib }}grafanaNew/dashboards/"
    - "{{ global_lib }}grafanaNew/provisioning"
    - "{{ global_lib }}grafanaNew/provisioning/dashboards/"
    - "{{ global_lib }}grafanaNew/provisioning/datasources/"
    - "{{ global_lib }}grafanaNew/provisioning/notifiers/"

- name: create docker container
  docker_container:
    name: grafana
    image: grafana/grafana:6.4.4
    state: present
    network_mode: "host"
    user: "root:root"
    recreate: true
    env:
      GF_SERVER_DOMAIN: "{{server_domain}}"
      GF_SERVER_HTTP_ADDR: "127.0.0.1"
      GF_SERVER_ROOT_URL: "%(protocol)s://%(domain)s:/grafana"
      GF_LOG_MODE: "syslog"
      GF_LOG_SYSLOG_TAG: "grafana"
      GF_SECURITY_ALLOW_EMBEDDING: "true"
    log_driver: journald
    volumes:
      - '{{global_lib}}grafanaNew:/tmp/grafana'
    ports:
     - "9000:3000"  
    #notify: "restart grafana"
    
#- name: create systemd service
#  vars:
#    container_name: "grafana"
#  copy:
#    content: "{{ lookup('template', 'templates/docker_service') }}"
#    dest: "/etc/systemd/system/grafana_new.service"
#    owner: root
#    group: root
#    mode: 0644
  #notify: "restart grafana"
  
#- name: copy fluentd config
#  template:
#    src: "roles/grafana/templates/etc/fluent/_.ansible.d/grafana.conf"
#    dest: "/etc/fluent/_.ansible.d/grafana.conf"
#    owner: root
#    group: root
#    mode: 0640
#  notify: "restart fluentd"
#  tags: ['fluentd']    
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

- name: set domain config
  lineinfile:
    path: /etc/grafana/grafana.ini
    insertafter: '^\[server\]'
    regexp: '^{{item.field}}'
    line: '{{item.field}} = {{item.value}}'
  with_items:
    - { field: 'domain', value: '{{server_domain}}' }
    - { field: 'http_addr', value: '127.0.0.1' }
  notify: "restart grafana"

- name: set config
  lineinfile:
    path: /etc/grafana/grafana.ini
    insertafter: '^\[{{item.block}}\]'
    regexp: '^{{item.field}}'
    line: '{{item.field}} = {{item.value}}'
  with_items:
    - { block: 'server', field: 'root_url', value: '%(protocol)s://%(domain)s:/grafana' }
    - { block: 'paths', field: 'data', value: '{{global_lib}}grafana' }
    - { block: 'paths', field: 'plugins', value: '{{global_lib}}grafana/plugins' }
    - { block: 'paths', field: 'provisioning', value: '{{global_lib}}grafana/provisioning' }
    - { block: 'log', field: 'mode', value: 'syslog' }
    - { block: 'log.syslog', field: 'tag', value: 'grafana' }
    - { block: 'security', field: 'allow_embedding', value: 'true' }
  notify: "restart grafana"
    
- name: copy apache config
  template:
    src: "roles/grafana/templates/etc/apache2/_.ansible.d/grafana.conf"
    dest: "/etc/apache2/_.ansible.d/grafana.conf"
    owner: root
    group: root
    mode: 0640
  notify: "restart apache"
  tags: ['apache_conf']
  when: "vault_active|bool"
