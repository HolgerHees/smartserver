- name: set version
  set_fact:
    grafana_version: '11.4.0'
#    grafana_mqtt_plugin_version: '1.1.0-beta.2'
  tags: [ 'update_notifier_config' ]    

- name: prepare needed directories
  vars:
    directories:
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{ global_lib }}grafana/plugins/" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{ global_etc }}grafana/provisioning/dashboards/" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{ global_etc }}grafana/provisioning/notifiers/" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{ global_etc }}grafana/provisioning/plugins/" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{ global_etc }}grafana/provisioning/alerting/" }
  include_tasks: roles/_shared/create_directories.yml

- name: check individual grafana dashboards
  shell: "ls {{config_path}}templates/grafana/dashboards/"
  register: dashboard_config_result
  changed_when: no
  failed_when: no
  tags: ['grafana_config']

- name: synchronize individual grafana dashboards
  synchronize:
    src: "{{config_path}}templates/grafana/dashboards/"
    dest: "{{ global_lib }}grafana/dashboards/"
    archive: no
    checksum: yes
    group: yes
    owner: yes
    perms: yes
    recursive: yes
    rsync_opts:
      - "--chown=root:root"
      - "--chmod=D750,F640"
  when: "dashboard_config_result.rc == 0"
  notify: "restart grafana"
  tags: ['grafana_config']

- name: copy grafana provisioning
  template:
    src: "templates/provisioning/dashboards/provider.yaml"
    dest: "{{ global_etc }}grafana/provisioning/dashboards/provider.yaml"
    owner: "root"
    group: "root"
    mode: 0640
  notify: "restart grafana"

#- name: install plugins
#  unarchive:
#    src: "{{item.src}}"
#    dest: "{{ global_lib }}grafana/plugins/"
#    creates: "{{ global_lib }}grafana/plugins/{{item.creates}}/"
#    remote_src: yes
#    owner: "root"
#    group: "root"
#  with_items:
#    - { src: "https://grafana.com/api/plugins/grafana-mqtt-datasource/versions/{{grafana_mqtt_plugin_version}}/download?os=linux&arch=amd64", creates: "grafana-mqtt-datasource" }
#  notify: "restart grafana"
    
- name: build container image
  vars:
    container_name: "grafana"
    image_name: "custom_grafana:{{grafana_version}}"
    image_files:
      - roles/grafana/templates/container/Dockerfile
  include_tasks: roles/container/shared/build_podman_image.yml
    
- name: create container service
  vars:
    container_name: "grafana"
    container_image: "custom_grafana:{{grafana_version}}"
    container_user: "root:root"
    container_env:
      GF_SERVER_DOMAIN: "https://%(domain)s/"
#      GF_SERVER_HTTP_ADDR: "127.0.0.1"
      GF_SERVER_ROOT_URL: "https://grafana.{{server_domain}}/"
#      GF_LOG_MODE: "syslog"
#      GF_LOG_SYSLOG_TAG: "grafana"
      GF_SECURITY_ALLOW_EMBEDDING: "true"
#      GF_INSTALL_PLUGINS: "grafana-mqtt-datasource"
    container_network: "isolated"
    container_ip: "{{podman_grafana_ip}}"
    container_exposed_ports:
      - "3000/tcp"
    container_volumes:
      - '{{global_etc}}grafana/provisioning:/etc/grafana/provisioning:ro'
      - '{{global_lib}}grafana:/var/lib/grafana:rw'
    container_after: [ "mariadb", "influxdb", "loki", "prometheus", "alertmanager" ]
    container_readyness: { "type": "port_check", "ip": "{{podman_grafana_ip}}", "port": "3000" }
  include_tasks: roles/container/shared/create_podman_service.yml
  tags: ['podman_container','systemd_watcher_config','systemd_service_config']

- name: allow container service
  vars:
    service_name: "grafana"
    container_to_container_rules:
      - { saddr: "{{podman_grafana_ip}}", daddr: "{{podman_mariadb_ip}}", protocol: "tcp", dport: "3306", comment: "grafana => mariadb" }
      - { saddr: "{{podman_grafana_ip}}", daddr: "{{podman_influxdb_ip}}", protocol: "tcp", dport: "8086", comment: "grafana => influxdb" }
      - { saddr: "{{podman_grafana_ip}}", daddr: "{{podman_loki_ip}}", protocol: "tcp", dport: "3100", comment: "grafana => loki" }
      - { saddr: "{{podman_grafana_ip}}", daddr: "{{podman_prometheus_ip}}", protocol: "tcp", dport: "9090", comment: "grafana => prometheus" }
      - { saddr: "{{podman_grafana_ip}}", daddr: "{{podman_alertmanager_ip}}", protocol: "tcp", dport: "9093", comment: "grafana => alertmanager" }
  include_tasks: roles/firewall/shared/allow_service.yml
  tags: ['firewall_config']

- name: add service name
  vars:
    host_name: "grafana"
    host_ip_address: "{{podman_grafana_ip}}"
  include_tasks: roles/_shared/add_to_hosts.yml

# ***** DEPENDENCY CONFIGS *****
- name: register webui
  vars:
    name: "grafana"
    js_file: "templates/webui/grafana.js"
    i18n_files: [ { language: "de", file: "templates/webui/grafana.de.json" } ]
    icons: [ 'templates/webui/icons/grafana_logo.svg', 'templates/webui/icons/grafana_logs.svg' ]
  include_tasks: roles/apache_webui/shared/add_webui.yml
  tags: ['apache_webui_config']

- name: copy apache vhost
  vars:
    sub_domain: "grafana"
    usergroup: "user"
    additional_env: yes
    include: "templates/etc/apache2/_.ansible.vhost.d/grafana.inc"
  include_tasks: roles/apache/shared/add_vhost.yml
  tags: ['apache_config']

- name: copy fluentd config
  vars:
    config_file: "templates/etc/fluent/_.ansible.d/grafana.conf"
  include_tasks: roles/fluentd/shared/add_config.yml
  tags: ['fluentd_config']
  when: "monitoring_enabled"

- name: register update notifier
  vars:
    name: "grafana"
    type: "docker"
    url: "https://github.com/grafana/grafana/blob/main/CHANGELOG.md"
    config: {
      repository: "grafana/grafana",
      pattern: "^([0-9\\.]+)$"
    }
  include_tasks: roles/update_service/shared/add_software.yml
  tags: ['update_notifier_config']
  when: "update_service_software_check_enabled"
