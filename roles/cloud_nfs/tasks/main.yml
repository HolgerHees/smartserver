- name: prepare needed directories
  vars:
    directories:
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_etc}}cloud_nfs/" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_etc}}cloud_nfs//util/" }
  include_tasks: roles/_shared/create_directories.yml

- name: prepare cloud folder
  file:
    path: "{{item}}"
    state: directory
    owner: "root"
    group: "root"
    mode: 0750
#  async: 5
#    poll: 0
#    register: cloud_nfs_folder_check
  with_items:
    - "{{cloud_path}}"
    - "{{cloud_path}}/local"
    - "{{cloud_path}}/remote"
    
- name: prepare nfs exported folder
  file:
    path: "{{cloud_path}}/local/{{item}}"
    state: directory
    owner: "root"
    group: "root"
    mode: 0750
  loop_control:
    label: "{{item}}"
  with_items: "{{cloud_vpn.peers}}"

- name: prepare nfs mount points
  file:
    path: "{{cloud_path}}/remote/{{item}}"
    state: directory
    owner: "root"
    group: "root"
    mode: 0750
  loop_control:
    label: "{{item}}"
  with_items: "{{cloud_vpn.peers}}"

- name: create fstab mount entries
  mount:
    path: "{{cloud_path}}remote/{{item}}"
    src: "{{vpn_cloud_services.remote[item].nfs}}:/"
    fstype: nfs
    opts: "nfsvers=4.2,soft,actimeo=0,rw,timeo=30,retrans=3,noauto,nofail,x-systemd.automount,x-systemd.mount-timeout=5,x-systemd.idle-timeout=300"
    state: present
  register: "fstab_result"
  loop_control:
    label: "{{item}}"
  with_items: "{{cloud_vpn.peers}}"

- name: "activate automount"
  shell: "systemctl daemon-reload"
  when: "fstab_result.changed"

- name: "start automount"
  shell: "systemctl --all start *remote*.automount"
  when: "fstab_result.changed"

- name: copy startup script
  template:
    src: "templates/util/startup.sh"
    dest: "{{global_etc}}cloud_nfs/util/startup.sh"
    owner: root
    group: root
    mode: 0750
  notify: "restart cloud_nfs"
  
- name: copy server config
  template:
    src: "templates/{{item}}"
    dest: "{{ global_etc }}cloud_nfs/{{item}}"
    mode: 0640
  notify: "restart cloud_nfs"
  with_items:
    - "peers"
    - "exports"

- name: build podman image
  vars:
    container_name: "cloud_nfs"
    image_name: "custom_cloud_nfs"
    image_version: "{{alpine_version}}"
    image_files:
      - roles/cloud_nfs/templates/container/Dockerfile
  include_tasks: roles/container/shared/build_podman_image.yml

- name: create podman container
  containers.podman.podman_container:
    name: "cloud_nfs"
    image: "custom_cloud_nfs:{{alpine_version}}"
    state: present
    security_opt:
      - label=disable
    env:
      TZ: "{{timezone}}"
    log_driver: journald
    log_options:
      tag: "cloud_nfs"
    #capabilities:
    #  - NET_ADMIN
    #  - SYS_MODULE
    #  - SYS_ADMIN
    #  - SETPCAP
    privileged: yes
    network: "cloud_vpn"
    ip: "{{vpn_cloud_services.local.nfs}}"
    volumes:
      - '{{global_etc}}cloud_nfs:/etc/cloud_nfs'
      - '{{global_etc}}cloud_nfs/exports:/etc/exports'
      - '{{cloud_path}}local:/cloud/local:rshared'
  notify: "restart cloud_nfs"
  
# ***** SERVICE CONFIGS *****
- name: handle systemd service
  vars:
    container_name: "cloud_nfs"
    container_ip: "{{vpn_cloud_services.local.nfs}}"
    container_routes:
      - { "subnet": "{{vpn_cloud_subnet}}.0.0/16", "gateway": "{{vpn_cloud_services.local.gateway}}"}
    container_readyness: { "type": "port_check", "ip": "{{vpn_cloud_services.local.nfs}}", "port": "2049" }
  include_tasks: roles/container/shared/handle_podman_service.yml
  tags: ['systemd_watcher_config','systemd_service_config']

# ***** FINALIZE *****
- name: register loki rules
  vars:
    name: "cloud_nfs"
    rules_file: "templates/loki/rules.yml"
  include_tasks: roles/loki/shared/add_config.yml
  tags: ['loki_config']
  when: "monitoring_enabled"
