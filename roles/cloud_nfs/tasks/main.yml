- name: prepare needed directories
  vars:
    directories:
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_etc}}cloud_nfs/" }
  include_tasks: roles/_shared/create_directories.yml

- name: prepare cloud folder
  file:
    path: "{{item}}"
    state: directory
    owner: "root"
    group: "root"
    mode: 0750
#  async: 5
#    poll: 0
#    register: cloud_nfs_folder_check
  with_items:
    - "{{cloud_path}}"
    - "{{cloud_path}}local"
    - "{{cloud_path}}remote"
    
- name: prepare nfs exported folder
  file:
    path: "{{cloud_path}}/local/{{item}}"
    state: directory
    owner: "root"
    group: "root"
    mode: 0750
  loop_control:
    label: "{{item}}"
  with_items: "{{cloud_vpn.peers}}"

- name: check nfs mount points
  shell: "mount | grep {{cloud_path}}remote/{{item}}"
  register: "nfs_mount_result"
  changed_when: "nfs_mount_result.rc == 1"
  failed_when: no
  with_items: "{{cloud_vpn.peers}}"

- name: prepare nfs mount points
  file:
    path: "{{cloud_path}}remote/{{item}}"
    state: directory
    owner: "root"
    group: "root"
    mode: 0750
  loop_control:
    label: "{{item}}"
    index_var: "index"
  when: "nfs_mount_result['results'][index].changed"
  with_items: "{{cloud_vpn.peers}}"

- name: create fstab mount entries
  mount:
    path: "{{cloud_path}}remote/{{item}}"
    src: "{{vpn_cloud_services.remote[item].nfs}}:/"
    fstype: nfs
    opts: "nfsvers=4.2,soft,actimeo=0,rw,timeo=30,retrans=3,noauto,nofail,x-systemd.automount,x-systemd.mount-timeout=5,x-systemd.idle-timeout=300"
    state: present
  register: "fstab_result"
  loop_control:
    label: "{{item}}"
  with_items: "{{cloud_vpn.peers}}"

- name: "activate automount"
  shell: "systemctl daemon-reload"
  when: "fstab_result.changed"

- name: "start automount"
  shell: "systemctl --all start *remote*.automount"
  when: "fstab_result.changed"

- name: copy exports config
  template:
    src: "templates/exports"
    dest: "{{ global_etc }}cloud_nfs/exports"
    mode: 0640
  notify: "restart cloud_nfs"

#https://wiki.archlinux.org/index.php/NFS/Troubleshooting

#rpcdebug -m nfsd all

#https://www.heise.de/ct/artikel/NFSv4-unter-Linux-221582.html?seite=all
# check cat /proc/net/rpc/auth.unix.ip/content

#echo "open nlockmgr ports"
#mount -t nfsd nfsd /proc/fs/nfsd
#echo 'fs.nfs.nlm_tcpport=32768' >> /etc/sysctl.conf
#echo 'fs.nfs.nlm_udpport=32768' >> /etc/sysctl.conf
#sysctl -p > /dev/null

# Normally only required if v3 will be used
# But currently enabled to overcome an NFS bug around opening an IPv6 socket
#echo "starting rpcbind"
#/sbin/rpcbind -w
#echo "starting idmapd"
#/usr/sbin/rpc.idmapd
#echo "starting statd"
#/sbin/rpc.statd
##-p 32765 -o 32766

# Kerberos
#/usr/sbin/rpc.svcgssd -v
#/usr/sbin/rpc.gssd -v
- name: build container image
  vars:
    container_name: "cloud_nfs"
    image_name: "custom_cloud_nfs:{{alpine_version}}"
    image_files:
      - roles/cloud_nfs/templates/container/Dockerfile
    entrypoint_startup:
      - "/usr/sbin/rpc.nfsd --debug --no-nfs-version 3 2>&1"
      - "FS_RESULT=$(/usr/sbin/exportfs -arv)"
      - "if [ -z \"$FS_RESULT\" ]"
      - "then"
      - "    echo \"Entrypoint - Export validation failed\""
      - "    return"
      - "fi"
      - "echo $FS_RESULT"
      - "/usr/sbin/rpc.mountd --no-nfs-version 2 --no-nfs-version 3 -F 2>&1 &"
    entrypoint_shutdown:
      - "/usr/sbin/exportfs -uav"
      - "/usr/sbin/rpc.nfsd 0"
  include_tasks: roles/container/shared/build_podman_image.yml

- name: create container service
  vars:
    container_name: "cloud_nfs"
    container_image: "custom_cloud_nfs:{{alpine_version}}"
    container_privileged: "true"
    container_network: "cloud_vpn"
    container_ip: "{{vpn_cloud_services.local.nfs}}"
    container_exposed_ports:
      - "2049/tcp"
    container_volumes:
      - '{{global_etc}}cloud_nfs:/etc/cloud_nfs'
      - '{{global_etc}}cloud_nfs/exports:/etc/exports'
      - '{{cloud_path}}local:/cloud/local:rshared'
    container_routes:
      - { "subnet": "{{vpn_cloud_subnet}}.0.0/16", "gateway": "{{vpn_cloud_services.local.gateway}}"}
    container_readyness: { "type": "port_check", "ip": "{{vpn_cloud_services.local.nfs}}", "port": "2049" }
  include_tasks: roles/container/shared/create_podman_service.yml
  tags: ['podman_container','systemd_watcher_config','systemd_service_config']

# ***** FINALIZE *****
- name: register loki rules
  vars:
    name: "cloud_nfs"
    rules_file: "templates/loki/rules.yml"
  include_tasks: roles/loki/shared/add_config.yml
  tags: ['loki_config']
  when: "monitoring_enabled"
