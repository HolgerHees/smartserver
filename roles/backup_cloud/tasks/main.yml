- name: set version
  set_fact:
    rclone_version: "1.65.2"
  tags: [ 'update_notifier_config' ]
  
# FOLDER
- name: prepare needed cloud folder
  file:
    path: '{{item}}'
    state: directory
    mode: 0750
  with_items:
    - "{{global_lib}}cloud_backup"
    - "{{global_log}}cloud_backup"  
  
- name: set backup links
  file:
    src: "{{item.src}}"
    dest: "{{global_lib}}cloud_backup/{{item.name}}"
    state: link
    follow: no
    owner: root
    group: root
  with_items:
    - {name: 'archive', src: '{{backup_path}}archive'}
    - {name: 'mysql', src: '{{backup_path}}mysql'}
    - {name: 'influxdb', src: '{{backup_path}}influxdb'}
    - {name: 'openhab', src: '{{backup_path}}openhab'}
    - {name: 'potd', src: '{{htdocs_path}}img/potd'}
    - {name: '{{project_name}}', src: '{{deployment_config_path}}'}

- name: set nextcloud backup links
  file:
    src: "{{nextcloud_data_path}}/{{item}}"
    dest: "{{global_lib}}cloud_backup/nextcloud_{{item}}"
    state: link
    follow: no
    owner: root
    group: root
  when: "'user' in userdata[item].groups"
  with_items: "{{userdata}}"
    
# RCLONE
- name: install archive
  unarchive:
    src: "https://downloads.rclone.org/v{{rclone_version}}/rclone-v{{rclone_version}}-linux-amd64.zip"
    dest: "/opt/"
    creates: "/opt/rclone-v{{rclone_version}}-linux-amd64"
    remote_src: yes
    owner: "root"
    group: "root"
    mode: 0750

- name: set symbolic link
  file:
    src: "/opt/rclone-v{{rclone_version}}-linux-amd64"
    dest: "/opt/rclone"
    state: link
    follow: no
    owner: "root"
    group: "root"
    
- name: check for vault keys
  stat:
    path: "/opt/rclone/rclone.config"
  register: rclone_config_file
  
- name: copy config
  copy:
    src: "templates/rclone.config"
    dest: "/opt/rclone/rclone.config"
    mode: 0600
  when: "not rclone_config_file.stat.exists"
    
- name: set password
  shell: "/opt/rclone/rclone --obscure --config=/opt/rclone/rclone.config config update backup password \"{{vault_cloudsync_password}}\""
  when: "not rclone_config_file.stat.exists"

- name: copy cmd
  template:
    src: "templates/backup.sh"
    dest: "/opt/rclone/backup.sh"
    mode: 0700

# FINALIZE  
- name: register loki rules
  vars:
    name: "cloud_backup_{{cloud_backup_name}}"
    rules_file: "templates/loki/rules.yml"
  include_tasks: roles/loki/shared/add_config.yml
  when: "monitoring_enabled"

- name: create cron job => is_production
  vars:
    name: "RClone {{cloud_backup_name}}"
    cmd: "/opt/rclone/backup.sh {{cloud_backup_name}} {{cloud_backup_sync_target_path}}backup > /dev/null && echo \"Cloud backup '{{cloud_backup_name}}' was successful\" | systemd-cat -t cloud_backup -p 6"
    file: "ansible_cloud_backup"
    hour: "2"
    minute: "0"
  include_tasks: roles/cron/shared/add_cronjob.yml
  when: "is_production"
  
- name: set logrotate job
  vars:
    logrotate_path: "{{global_log}}cloud_backup/*.log"
  copy:
    content: "{{ lookup('template', 'templates/logrotate') }}"
    dest: "/etc/logrotate.d/ansible_cloud_backup"
    owner: root
    group: root
    mode: 0640

- name: register update notifier
  vars:
    name: "rclone"
    type: "github"
    url: "https://rclone.org/changelog/"
    config: { 
      project: "rclone/rclone", 
      pattern: "^v([0-9\\.]+)$",
      version: "v{{rclone_version}}" 
    }
  include_tasks: roles/update_service/shared/add_software.yml
  when: "update_service_software_check_enabled"
