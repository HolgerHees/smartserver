- name: prepare needed directories
  vars:
    directories:
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{ global_etc }}dnsmasq" }
  include_tasks: roles/_shared/create_directories.yml

- name: copy config
  template:
    src: "templates/etc/{{item}}"
    dest: "{{ global_etc }}dnsmasq/{{item}}"
    owner: root
    group: root
    mode: 0640
  with_items:
    - "dnsmasq.conf"
    - "resolv.conf"
    - "hosts"
  notify: "restart dnsmasq"

- name: generate dhcp.conf
  block:
    - name: write static dhcp file
      template:
        src: templates/etc/dhcp.conf
        dest: "{{ global_etc }}dnsmasq/dhcp.conf"
        owner: root
        group: root
        mode: 0640
      register: dhcp_changed

    - name: revoke existing leases if dhcpd file changed
      file:
        path: "{{ global_etc }}dnsmasq/dhcp.leases"
        state: absent
      when: dhcp_changed.changed

    - name: revoke existing leases if dhcpd file changed
      file:
        path: "{{ global_etc }}dnsmasq/dhcp.leases"
        state: touch
      when: dhcp_changed.changed
  when: "dhcp_enabled and dhcp_type == 'dnsmasq'"

- name: build container image
  vars:
    container_name: "dnsmasq"
    image_name: "custom_dnsmasq:{{alpine_version}}"
    image_files:
      - roles/dnsmasq/templates/container/Dockerfile
    container_shutdown_hook: "roles/dnsmasq/tasks/disable.yml"
  include_tasks: roles/container/shared/build_podman_image.yml
  
# must be called before container is activated. Otherwise the container can't start because of the systemd_resolver on ubuntu which uses the same port
- name: enable dnsmasq
  include_tasks: roles/dnsmasq/tasks/enable.yml

- name: prepare published_ports
  set_fact:
    dnsmasq_published_ports:  |
      [
        "53:53",
        {% if default_server_ipv6 is defined %}
          "[::]:53:53",
        {% endif %}
      ]
  tags: ['firewall_config']

- name: create container service
  vars:
    container_name: "dnsmasq"
    container_image: "custom_dnsmasq:{{alpine_version}}"
    container_network: "isolated"
    container_ip: "{{podman_dns_ip}}"
    container_published_ports: "{{dnsmasq_published_ports}}"
    container_volumes:
      - '{{ global_etc }}dnsmasq/dnsmasq.conf:/etc/dnsmasq.conf'
      - '{{ global_etc }}dnsmasq/:/etc/dnsmasq/'
    container_readyness: { "type": "port_check", "ip": "{{podman_dns_ip}}", "port": "53" }
  include_tasks: roles/container/shared/create_podman_service.yml
  tags: ['podman_container','systemd_watcher_config','systemd_service_config']

- name: allow container service
  vars:
    service_name: "dnsmasq"
    container_to_outside_rules: |
        [
          { "saddr": "{{podman_dns_ip}}", "daddr": [ '{{ dns_forward_ip_addresses | join("','") }}' ], "dport": "53", "comment": "dnsmasq => forwarded dns" }
          {% if dhcp_enabled and dhcp_type == 'pihole' %}
            , { "saddr": "{{podman_dns_ip}}", "daddr": "{{ pihole_ip }}", "dport": "53", "comment": "dnsmasq => pihole reverse dns" }
          {% endif %}
        ]
    nat_rules: { ip: "{{podman_dns_ip}}", ports: "{{dnsmasq_published_ports}}" }
    instant_activation: True
  include_tasks: roles/firewall/shared/allow_service.yml
  tags: ['firewall_config']

- name: instant activate dnsmasq
  systemd:
    name: dnsmasq
    state: started
    daemon_reload: yes
  when: "podman_service_container_changed"
