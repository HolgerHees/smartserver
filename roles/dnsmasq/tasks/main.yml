- name: check named service
  stat:
    path: "{{ global_etc }}named/"
  register: named_service

- name: cleanup named
  block:
    - name: cleanup named configs
      file:
        path: "{{item}}"
        state: absent
      with_items:
        - '{{ global_etc }}named'
        - '/etc/systemd/system/named.service'
        - '{{global_etc}}systemd_watcher/services/named.conf'
        - '/etc/ferm/ferm.d/30-dns.ferm'
    - name: stop named
      systemd:
        name: named
        state: stopped
        enabled: false
    - name: cleanup named docker
      shell: "docker rm named"
    - name: temporary enable public dns
      copy:
        content: "nameserver 8.8.8.8"
        dest: "/etc/resolv.conf"
  when: "named_service.stat.exists"

- name: prepare needed folder
  file:
    path: '{{item}}'
    state: directory
    owner: root
    group: root
    mode: 0750
  with_items:
    - "{{ global_etc }}dnsmasq"

- name: copy config
  template:
    src: "templates/etc/{{item}}"
    dest: "{{ global_etc }}dnsmasq/{{item}}"
    owner: root
    group: root
    mode: 0640
  with_items:
    - "dnsmasq.conf"
    - "resolv.conf"
    - "hosts"
  notify: "restart dnsmasq"

- name: generate dhcp.conf
  block:
    - name: write static dhcp file
      template:
        src: templates/etc/dhcp.conf
        dest: "{{ global_etc }}dnsmasq/dhcp.conf"
        owner: root
        group: root
        mode: 0640
      register: dhcp_changed

    - name: revoke existing leases if dhcpd file changed
      file:
        path: "{{ global_etc }}dnsmasq/dhcp.leases"
        state: absent
      when: dhcp_changed.changed

    - name: revoke existing leases if dhcpd file changed
      file:
        path: "{{ global_etc }}dnsmasq/dhcp.leases"
        state: touch
      when: dhcp_changed.changed
  when: dhcp_type == 'dnsmasq'

- name: build docker image
  vars:
    name: "dnsmasq"
    image_name: "custom_dnsmasq"
    image_version: "{{alpine_version}}"
    files:
      - roles/dnsmasq/templates/container/Dockerfile
  include_tasks: roles/container/shared/build_docker_image.yml
  
- name: create docker container
  docker_container:
    name: dnsmasq
    image: "custom_dnsmasq:{{alpine_version}}"
    state: present
#    recreate: true
    env:
      TZ: "{{timezone}}"
    log_driver: journald
    log_options:
      tag: dnsmasq
    container_default_behavior: "compatibility"
    network_mode: "default"
    networks:
      - name: "isolated"
        ipv4_address: "{{docker_dns_ip}}"
    networks_cli_compatible: yes
    volumes:
      - '{{ global_etc }}dnsmasq/dnsmasq.conf:/etc/dnsmasq.conf:z'
      - '{{ global_etc }}dnsmasq/:/etc/dnsmasq/:z'
    published_ports: |
      [
        "53:53/udp",
        "53:53/tcp",
        {% if default_server_ipv6 is defined %}
          "[::]:53:53/udp",
          "[::]:53:53/tcp",
        {% endif %}
      ]
  register: dns_result
  notify: "restart dnsmasq"

# ***** FINALIZE *****
- name: prepare iptables rules
  set_fact:
    dns_rules: "{{ (dns_rules | default([])) + [ 'saddr ' + docker_dns_ip + ' daddr ' + item ] }}"
  with_items: "{{ dns_forward_ip_addresses }}"
  tags: [ 'firewall_config' ]

- name: allow dns service
  vars:
    name: "dnsmasq"
    rules: "{{dns_rules}}"
    instant_activation: True
  include_tasks: roles/firewall/shared/allow_service.yml
  tags: [ 'firewall_config' ]

- name: create systemd service
  vars:
    container_name: "dnsmasq"
  include_tasks: roles/container/shared/add_docker_service.yml
  
# must be called before container is activated. Otherwise the container can't start because of the systemd_resolver on ubuntu which uses the same port
- name: enable dnsmasq
  include_tasks: roles/dnsmasq/tasks/enable.yml

- name: force dnsmasq restart
  systemd:
    state: restarted
    daemon_reload: yes
    name: dnsmasq
  when: dns_result.changed

- name: trigger dnsmasq handler
  vars:
    notify: "restart dnsmasq"
    service: "dnsmasq.service"
  include_tasks: roles/_shared/service_check.yml

