- name: prepare needed folder
  file:
    path: '{{item}}'
    state: directory
    owner: root
    group: root
    mode: 0750
  with_items:
    - "{{ global_etc }}named"

- name: copy config
  template:
    src: "templates/etc/{{item.file}}"
    dest: "{{ global_etc }}named/{{item.file}}"
    owner: root
    group: root
    mode: 0640
  when: "item.condition is undefined or item.condition == 1"
  with_items:
    - { file: "dnsmasq.conf" }
    - { file: "hosts" }
    - { file: "resolv.conf" }
    - { file: "hosts.custom", condition: "{{1 if dns_type == 'dnsmasq' else 0}}" }
    - { file: "dhcp.conf", condition: "{{1 if dhcp_type == 'dnsmasq' else 0}}" }
  notify: "restart named"

- name: build docker image
  vars:
    name: "named"
    image_name: "custom_named"
    image_version: "{{alpine_version}}"
    files:
      - roles/dnsmasq/templates/container/Dockerfile
  import_tasks: roles/container/shared/build_docker_image.yml
  
- name: create docker container
  docker_container:
    name: named
    image: "custom_named:{{alpine_version}}"
    state: present
#    recreate: true
    env:
      TZ: "{{timezone}}"
    log_driver: journald
    log_options:
      tag: named
    container_default_behavior: "compatibility"
    network_mode: "default"
    networks:
      - name: "isolated"
        ipv4_address: "{{docker_dns_ip}}"
    networks_cli_compatible: yes
    volumes:
      - '{{ global_etc }}named/dnsmasq.conf:/etc/dnsmasq.conf:z'
      - '{{ global_etc }}named/:/etc/dnsmasq/:z'
    published_ports: |
      [
        "53:53/udp",
        "53:53/tcp",
        {% if default_server_ipv6 is defined %}
          "[::]:53:53/udp",
          "[::]:53:53/tcp",
        {% endif %}
      ]
  register: dns_result
  notify: "restart named"

# ***** FINALIZE *****
- name: prepare iptables rules
  set_fact:
    dns_rules: "{{ (dns_rules | default([])) + [ 'saddr ' + docker_dns_ip + ' daddr ' + item ] }}"
  with_items: "{{ dns_forward_ip_addresses }}"
  tags: [ 'firewall_config' ]

- name: allow dns service
  vars:
    name: "dns"
    rules: "{{dns_rules}}"
    instant_activation: True
  import_tasks: roles/firewall/shared/allow_service.yml
  tags: [ 'firewall_config' ]

- name: create systemd service
  vars:
    container_name: "named"
  import_tasks: roles/container/shared/add_docker_service.yml
  
# must be called before container is activated. Otherwise the container can't start because of the systemd_resolver on ubuntu which uses the same port
- name: enable dns
  import_tasks: roles/dnsmasq/tasks/enable.yml

- name: force dns restart
  systemd:
    state: restarted
    daemon_reload: yes
    name: named
  when: dns_result.changed

- name: trigger named handler
  vars:
    notify: "restart named"
    service: "named.service"
  import_tasks: roles/_shared/service_check.yml

