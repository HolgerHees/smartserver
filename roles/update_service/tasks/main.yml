- name: install required packages => is_fedora
  yum:
    name: [
      yum-utils # used by needs-restart
    ]
    state: present
  when: "is_fedora|bool and update_service_system_check_enabled"
  
- name: prepare needed folder
  file:
    path: "{{item.path}}"
    state: directory
    owner: root
    group: root
    mode: "{{item.mode}}"
  with_items:
    - { mode: "u=rwx,g=rx,o=", path: "/opt/update_service" }
    - { mode: "u=rwx,g=rx,o=", path: "/opt/update_service/config" }
    - { mode: "u=rwx,g=rx,o=rx", path: "{{global_lib}}update_service" }
    - { mode: "u=rwx,g=rx,o=rx", path: "{{global_lib}}update_service/outdated_roles" }

- name: prepare needed system_check folder
  file:
    path: "{{item.path}}"
    state: directory
    owner: root
    group: root
    mode: "{{item.mode}}"
  with_items:
    - { mode: "u=rwx,g=rx,o=rx", path: "{{global_log}}update_service/" }
  when: "update_service_system_check_enabled|bool"

- name: copy config
  template:
    src: "templates/opt/update_service/config/config.py"
    dest: "/opt/update_service/config/config.py"
    owner: root
    group: root
    mode: 0750

- name: copy libs
  copy:
    src: "templates/opt/update_service/{{item}}"
    dest: "/opt/update_service/"
    owner: root
    group: root
    mode: 0750
  with_items:
    - helper
    - server
    - plugins

- name: copy software_check tool
  copy:
    src: "templates/opt/update_service/{{item}}"
    dest: "/opt/update_service/"
    owner: root
    group: root
    mode: 0750
  with_items:
    - software_version_check
  when: "update_service_software_check_enabled|bool"

- name: copy system_check tool
  copy:
    src: "templates/opt/update_service/{{item}}"
    dest: "/opt/update_service/"
    owner: root
    group: root
    mode: 0750
  with_items:
    - update_service
    - system_update_check
  when: "update_service_system_check_enabled|bool"

- name: copy software webui
  copy:
    src: "templates/htdocs/update_software"
    dest: "{{htdocs_path}}"
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0750
  tags: ['apache_webui_page']
  when: "update_service_software_check_enabled|bool"

- name: copy software webui config
  template:
    src: "templates/update_software_config.php"
    dest: "{{htdocs_path}}update_software/config.php"
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0750
  tags: ['apache_webui_page']
  when: "update_service_software_check_enabled|bool"

- name: copy system webui
  copy:
    src: "templates/htdocs/update_system"
    dest: "{{htdocs_path}}"
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0750
  tags: ['apache_webui_page']
  when: "update_service_system_check_enabled|bool"

- name: copy system webui config
  template:
    src: "templates/update_system_config.php"
    dest: "{{htdocs_path}}update_system/config.php"
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0750
  tags: ['apache_webui_page']
  when: "update_service_system_check_enabled|bool"

- name: register webui
  vars:
    name: "update_service"
    js_file: "templates/webui/update_service.js"
    i18n_files: [ { language: "de", file: "templates/webui/update_service.de.json" } ]
    icons: [ 'templates/webui/icons/update_software_logo.svg', 'templates/webui/icons/update_system_logo.svg' ]
  import_tasks: roles/apache_webui/tasks/add_webui.yml
  
- name: deny everything except php service
  vars:
    name: "update_service.php"
    rule: "proto tcp dport 8505 saddr !{{docker_php_ip}}"
    is_drop: yes
  import_tasks: roles/firewall/tasks/allow_service.yml
  tags: [ 'firewall_config' ]
  
- name: allow update_service php service
  vars:
    name: "update_service.php"
    rule: "proto tcp dport 8505 saddr {{docker_php_ip}}"
  import_tasks: roles/firewall/tasks/allow_service.yml
  tags: [ 'firewall_config' ]

- name: create version check cron job
  vars:
    name: "Software Version check"
    cmd: "/opt/update_service/software_version_check > /dev/null"
    file: "ansible_update_service"
    minute: "0"
    hour: "3"
  import_tasks: roles/cron/tasks/add_cronjob.yml

- name: create system check cron job
  vars:
    name: "System update check"
    cmd: "/opt/update_service/system_update_check > /dev/null"
    file: "ansible_update_service"
    minute: "30"
    hour: "3"
  import_tasks: roles/cron/tasks/add_cronjob.yml
  
- name: create cleanup cron job
  vars:
    name: "System update cleanup"
    cmd: "ls -1t {{global_log}}update_service/*.log | tail -n +50 | xargs rm -f"
    file: "ansible_update_service"
    hour: "0"
    minute: "40"
  import_tasks: roles/cron/tasks/add_cronjob.yml

- name: copy fluentd config
  vars:
    config_file: "templates/etc/fluent/_.ansible.d/update_service.conf"
  import_tasks: roles/fluentd/tasks/add_config.yml

- name: "create systemd service"
  template:
    src: "templates/etc/systemd/system/update_service.service"
    dest: "/etc/systemd/system/update_service.service"
    owner: root
    group: root
    mode: 0644
  notify: "restart update_service"
 
- name: register systemd service watcher
  vars:
    name: "update_service"
  import_tasks: roles/systemd_watcher/tasks/add_watcher.yml

- name: trigger update_service handler
  vars:
    notify: "restart update_service"
    service: "update_service.service"
  import_tasks: roles/_shared/tasks/service_check.yml

