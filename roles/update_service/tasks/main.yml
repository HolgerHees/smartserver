- name: prepare needed directories
  vars:
    directories:
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "/opt/update_service" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "/opt/update_service/config" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "/opt/update_service/env" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_lib}}update_service" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_lib}}update_service/outdated_roles" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_log}}update_service/" }
  include_tasks: roles/_shared/create_directories.yml

- name: install required packages => (is_rhel or is_fedora) and update_service_system_check_enabled
  yum:
    name: [
      yum-utils # used by needs-restart
    ]
    state: present
  when: "(is_rhel or is_fedora) and update_service_system_check_enabled"
  
- name: install required packages => is_ubuntu
  apt:
    name: "python3-venv"
    state: present
  when: is_ubuntu

- name: install needed python packages
  pip:
    name:
      - flask
      - flask-socketio=={{flask_socketio_version}}
      - simple-websocket
      - pexpect
      - requests
    virtualenv: /opt/update_service/env
    virtualenv_command: "python3 -m venv"
  register: installer_state

- name: install python libs
  shell: "/opt/update_service/env/bin/python3 {{global_opt}}shared/python/install.py"
  when: installer_state.changed

- name: synchronize service
  synchronize:
    src: "templates/opt/{{item.path}}"
    dest: "/opt/update_service/"
    archive: no
    checksum: yes
    group: yes
    owner: yes
    perms: yes
    recursive: yes
    rsync_opts:
      - "--chown=root:root"
      - "--chmod={{item.chmod}}"
  with_items:
    - { "chmod": "D750,F640", "path": "update_service/helper" }
    - { "chmod": "D750,F640", "path": "update_service/plugins" }
    - { "chmod": "D750,F640", "path": "update_service/server" }
    - { "chmod": "D750,F750", "path": "update_service/software_version_check" }
    - { "chmod": "D750,F750", "path": "update_service/system_update_check" }
    - { "chmod": "D750,F750", "path": "update_service/update_service" }

- name: copy service config
  template:
    src: "templates/config.py"
    dest: "/opt/update_service/config/config.py"
    owner: root
    group: root
    mode: 0750

- name: synchronize webui
  synchronize:
    src: "templates/htdocs/update_service"
    dest: "{{htdocs_path}}"
    archive: no
    checksum: yes
    group: yes
    owner: yes
    perms: yes
    recursive: yes
    rsync_opts:
      - "--chown={{system_users['www'].name}}:{{system_groups['www'].name}}"
      - "--chmod=D750,F640"
  tags: ['apache_webui_page']

- name: register webui
  vars:
    name: "update_service"
    js_file: "templates/webui/update_service.js"
    i18n_files: [ { language: "de", file: "templates/webui/update_service.de.json" } ]
    icons: [ 'templates/webui/icons/update_software_logo.svg', 'templates/webui/icons/update_system_logo.svg' ]
  include_tasks: roles/apache_webui/shared/add_webui.yml
  tags: ['apache_webui_config']

- name: register prometheus rules & metrics
  vars:
    name: "update_service"
    rules_file: "templates/prometheus/rules.yml"
    scrape_file: "templates/prometheus/scrape.yml"
  include_tasks: roles/prometheus/shared/add_config.yml
  tags: ['prometheus_config']
  when: "monitoring_enabled"

- name: create version check cron job
  vars:
    name: "Software Version check"
    cmd: "/opt/update_service/env/bin/python3 /opt/update_service/software_version_check > /dev/null"
    group: "update_service"
    log: "software_version_check"
    minute: "0"
    hour: "3"
  include_tasks: roles/cron/shared/add_cronjob.yml
  tags: ['cron_job']
  when: "update_service_software_check_enabled"

- name: create system check cron job
  vars:
    name: "System update check"
    cmd: "/opt/update_service/env/bin/python3 /opt/update_service/system_update_check > /dev/null"
    group: "update_service"
    log: "system_update_check"
    minute: "30"
    hour: "3"
  include_tasks: roles/cron/shared/add_cronjob.yml
  tags: ['cron_job']
  when: "update_service_system_check_enabled"
  
- name: create cleanup cron job
  vars:
    name: "System update cleanup"
    cmd: "ls -1t {{global_log}}update_service/*.log | tail -n +50 | xargs rm -f"
    group: "update_service"
    log: "log_cleanup"
    hour: "0"
    minute: "40"
  include_tasks: roles/cron/shared/add_cronjob.yml
  tags: ['cron_job']

- name: copy service apache config
  vars:
    service_name: "update_service"
    service_host: "127.0.0.1:8505"
    service_additional_config: |
        <Location /update_service/metrics/>
          ProxyPass http://127.0.0.1:8505/metrics/
          ProxyPassReverse http://127.0.0.1:8505/metrics/
        </Location>
  include_tasks: roles/shared_libs/shared/add_apache_service_config.yml
  tags: ['apache_config']

- name: copy service fluentd config
  vars:
    service_name: "update_service"
    service_is_container: no
  include_tasks: roles/shared_libs/shared/add_fluentd_service_config.yml
  tags: ['fluentd_config']
  when: "monitoring_enabled"

- name: "create systemd service"
  template:
    src: "templates/etc/systemd/system/update_service.service"
    dest: "/etc/systemd/system/update_service.service"
    owner: root
    group: root
    mode: 0644
 
- name: register systemd service watcher
  vars:
    watcher_name: "update_service"
  include_tasks: roles/systemd_watcher/shared/add_watcher.yml
  tags: ['systemd_watcher_config']
  when: "monitoring_enabled"

- name: trigger update_service handler
  vars:
    notify: "restart update_service"
    service: "update_service"
  include_tasks: roles/_shared/service_check.yml

