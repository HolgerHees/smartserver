#!/usr/bin/python3

import subprocess
import os
import json

import glob

from datetime import datetime
import sys 

import importlib

from config import config

from plugins.deploymentUpdate import DeploymentUpdate

limit_step = None
if len(sys.argv) >= 2:
    limit_step = sys.argv[1]
    
update_time = "{}".format(datetime.now().astimezone().isoformat())

state_template = {"last_system_state": update_time, "system_processes_outdated": [], "system_reboot_needed": False, "last_system_update": update_time, "system_updates": [], "last_smartserver_update": update_time, "smartserver_code": "", "smartserver_changes": [], "smartserver_pull": None }
last_states = {}
if os.path.isfile(config.system_update_state_file):
    with open(config.system_update_state_file, 'r') as f:
        last_states = json.load(f)
last_states = {**state_template, **last_states}

state = last_states
state = {i:j for i,j in state.items() if i in state_template}

update_message_r = []

# **** SYSTEM CHECK **********************************************
if limit_step is None or limit_step == "system_state" or limit_step == "system_update" or limit_step == "system_dependencies" or limit_step == "system":
    print("System")
    plugin = importlib.import_module("plugins.os.{}".format(config.os_type))
    repo = plugin.Repository()

if limit_step is None or limit_step == "system_state" or limit_step == "system":
    state["last_system_state"] = update_time

    state["system_reboot_needed"] = repo.getRebootState()
    if not state["system_reboot_needed"]:
      print( u"  - \033[0;32mno reboot required\033[0m")
    else:
      print( u"  - \033[1;31mneeds reboot\033[0m")

    state["system_processes_outdated"] = repo.getOutdatedProcesses()
    if len(state["system_processes_outdated"]) == 0:
      print( u"  - \033[0;32mno outdated processes\033[0m")
    else:
      print( u"  - \033[1;31mhas outdated processes\033[0m")

if limit_step is None or limit_step == "system_update" or limit_step == "system":
    state["last_system_update"] = update_time

    state["system_updates"] = repo.getUpdates()
    if len(state["system_updates"]) == 0:
      print( u"  - \033[0;32mis updated\033[0m")
    else:
      print( u"  - \033[1;33mhas updates\033[0m")

if len(state["system_updates"]) > 0 and len(last_states["system_updates"]) != len(state["system_updates"]):
    update_message_r.append(u"system has {} updates".format(len(state["system_updates"])))
# ****************************************************************

# **** SMARTSERVER ***********************************************
if limit_step is None or limit_step == "deployment_update":
    print("Smartserver")

    state["last_smartserver_update"] = update_time

    deploymentUpdate = DeploymentUpdate(config)
    
    (smartserver_code, smartserver_pull, smartserver_changes) = deploymentUpdate.process(update_time)
    
    state["smartserver_code"] = smartserver_code
    
    if smartserver_code == "missing":
        print( u"  - \033[1;31mgit check not possible (please run a full deployment first)\033[0m")
    elif smartserver_code == "failed":
        print( u"  - \033[1;31mskipped git pull (broken remote ci tests)\033[0m")
    elif smartserver_code == "pending":
        print( u"  - \033[1;33mskipped git pull (some remote ci pending)\033[0m")
    elif smartserver_code == "uncommitted":
        print( u"  - \033[1;31mskipped git pull (has uncommitted changes)\033[0m")
    elif smartserver_code == "pulled_ci":
        print( u"  - \033[0;32mgit pulled (all remote ci succeeded)\033[0m")
    elif smartserver_code == "pulled":
        print( u"  - \033[0;32mgit pulled\033[0m")
                        
    if smartserver_pull is not None:
        state["smartserver_pull"] = smartserver_pull

    if smartserver_changes is not None:
        state["smartserver_changes"] = smartserver_changes
        if len(state["smartserver_changes"]) == 0:
          print( u"  - \033[0;32mis deployed\033[0m")
        else:
          print( u"  - \033[1;33mhas not deployed changes\033[0m")

        if len(last_states["smartserver_changes"]) != len(state["smartserver_changes"]):
            update_message_r.append(u"smartserver has {} updates".format(len(state["smartserver_changes"])))
# ****************************************************************

if limit_step is None and config.update_check_email and len(update_message_r) > 0:
    message_r = []
    message_r.append(u"There are new updates")
    for message in update_message_r:
        message_r.append("  - {}".format(message))
    message_r.append(u"\n\nCheck https://{}/?ref=admin|system|update_system for details".format(config.server_host))
   
    print(u"Send notification mail")

    subprocess.run([ u"echo -e \"{}\" | mail -s \"{}\" {}".format("\n".join(message_r),"New system updates available",config.update_check_email) ], shell=True, check=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=None )
  
with open(config.system_update_state_file, 'w') as f:
    json.dump(state, f)
