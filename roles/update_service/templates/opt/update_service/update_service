#!/usr/bin/python3

import logging
import glob
import json
import os
import importlib
from datetime import datetime

from server.cmd.builder import CmdBuilder
from server.cmd.executer import CmdExecuter
from server.cmd.workflow import CmdWorkflow
from server.watcher.dependency import DependencyWatcher
from server.watcher.process import ProcessWatcher
from server.watcher.system_update import SystemUpdateWatcher
from server.watcher.deployment_state import DeploymentStateWatcher
from server.watcher.deployment_tags import DeploymentTagsWatcher
from server.watcher.software_version import SoftwareVersionWatcher

from smartserver.server import Server, serverWeb, serverSocket
from smartserver import logfile
from smartserver.filewatcher import FileWatcher
from smartserver.metric import Metric

from config import config


watched_data_files = [
  config.outdated_roles_state_dir,
  config.system_update_state_file,
  config.deployment_state_file,
  config.deployment_tags_file,
  config.software_version_state_file
]

class Handler(Server):
    def __init__(self):
        super().__init__("update_service", config.service_ip, config.service_port )
           
        plugin = importlib.import_module("plugins.os.{}".format(config.os_type))
        operating_system = plugin.OperatingSystem()
                
        self.high_accuracy = False

        self.process_watcher = ProcessWatcher(self, operating_system)
        self.system_update_watcher = SystemUpdateWatcher(self, self.process_watcher, operating_system)
        self.dependency_watcher = DependencyWatcher(self, self.system_update_watcher)
        self.deployment_state_watcher = DeploymentStateWatcher(self)
        self.deployment_tags_watcher = DeploymentTagsWatcher(self)
        self.software_versions_watcher = SoftwareVersionWatcher(self)

        self.cmd_builder = CmdBuilder( self.dependency_watcher, self.process_watcher, self.system_update_watcher, self.deployment_state_watcher, operating_system)
        self.cmd_executer = CmdExecuter( self, self.process_watcher )
        self.cmd_workflow = CmdWorkflow( self, self.cmd_executer, self.cmd_builder )
        
        self.service_base_path = os.path.dirname(__file__)
        self.service_need_restart = False
        
        self.startup_timestamp = round(datetime.now().timestamp(),3)

        watched_data_files.append(__file__)
        files = glob.glob("{}**/**/*.py".format(self.service_base_path), recursive = True)
        for filename in files:
            watched_data_files.append(filename)
        
        self.initWatchedFiles( watched_data_files, self.fileChangeTriggered )
        
    def start(self):
        self.process_watcher.start()
        self.cmd_executer.start()

        self.cmd_workflow.handleRunningStates()

        super().start()

    def terminate(self):
        self.process_watcher.terminate()
        self.cmd_executer.terminate()
        super().terminate()

    def fileChangeTriggered(self, event):
        #if event["type"] not in [ FileWatcher.EVENT_TYPE_WRITTEN, FileWatcher.EVENT_TYPE_MOVED_TO, FileWatcher.EVENT_TYPE_MOVED_FROM, FileWatcher.EVENT_TYPE_DELETED ]:
        #    return

        if event["path"].startswith(config.outdated_roles_state_dir):
            self.dependency_watcher.notifyChange(event)
        elif event["path"] == config.system_update_state_file:
            self.system_update_watcher.notifyChange(event)
        elif event["path"] == config.deployment_state_file:
            self.deployment_state_watcher.notifyChange(event)
        elif event["path"] == config.deployment_tags_file:
            self.deployment_tags_watcher.notifyChange(event)
        elif event["path"] == config.software_version_state_file:
            self.software_versions_watcher.notifyChange(event)
        elif event["path"].startswith(self.service_base_path):
            self.service_need_restart = True
            self.notifyHandlerRestartState()
            
    def runWorkflow(self, workflow, state_type, checkGlobalRunning ):
        is_success = self.cmd_workflow.runWorkflow( workflow, checkGlobalRunning )
        if is_success :
            return self.buildStatusResult(0, u"Job started")
        else:
            return self.buildStatusResult(1, u"Job not started" )

    def _fillWidgetRunning(self, result = {}):
         result["is_running"] = self.cmd_workflow.getWorkflowState() in [ CmdWorkflow.STATE_RUNNING, CmdWorkflow.STATE_WAITING ] or self.cmd_executer.getExternalCmdType(False) != None
         return result

    def _fillWidgetAttention(self, result = {}):
        workflow_state = self.cmd_workflow.getWorkflowState()
        result["needs_attention"] = ( workflow_state is not None and ( CmdWorkflow.STATE_CHECK_WRONG_SYSTEM_UPDATE_STATE in workflow_state or CmdWorkflow.STATE_CHECK_WRONG_SMARTSERVER_UPDATE_STATE in workflow_state ) ) or ( self.service_need_restart or self.process_watcher.isUpdateServiceOutdated() )
        return result

    def _fillWidgetActions(self, result = {}):
        result["needs_action"] = len(self.process_watcher.getOutdatedProcesses()) > 0 or len(self.dependency_watcher.getOutdatedRoles()) > 0 or self.system_update_watcher.isRebootNeeded()
        return result

    def _fillUpdatesRebootNeeded(self, result = {}):
        result["is_reboot_needed"] = {
            "all": self.system_update_watcher.isRebootNeeded(),
            "core": self.process_watcher.isRebootNeededByCoreUpdate(),
            "outdated": self.process_watcher.isRebootNeededByOutdatedProcesses(),
            "installed": self.system_update_watcher.isRebootNeededByInstalledPackages()
        }
        return result

    def _fillUpdatesNeedsRestart(self, result = {}):
        result["update_server_needs_restart"] = self.service_need_restart or self.process_watcher.isUpdateServiceOutdated()
        return result

    def notifyWatcherTagState(self):
        if self.isSocketRoomActive("updates"):
            self.emitSocketData('updates:data', { "deployment_tags": self.deployment_tags_watcher.getTags() }, "updates")

    def notifyWatcherDeploymentState(self):
        if self.isSocketRoomActive("updates"):
            self.emitSocketData('updates:data', { "has_encrypted_vault": self.deployment_state_watcher.hasEncryptedVault() }, "updates")

    def notifyWatcherProcessState(self):
        if self.isSocketRoomActive("widget"):
            result = self._fillWidgetActions()
            result = self._fillWidgetAttention(result)
            self.emitSocketData('widget:data', result, "widget")

        if self.isSocketRoomActive("updates"):
            result = self._fillUpdatesRebootNeeded()
            result = self._fillUpdatesNeedsRestart(result)
            result["last_refreshed"] = { "processes": self.process_watcher.getLastRefreshAsTimestamp() }
            result["outdated_processes"] = self.process_watcher.getOutdatedProcesses()
            self.emitSocketData('updates:data', result, "updates")

    def notifyWatcherDependencyState(self):
        if self.isSocketRoomActive("widget"):
            self.emitSocketData('widget:data', self._fillWidgetActions(), "widget")

        if self.isSocketRoomActive("updates"):
            self.emitSocketData('updates:data', { "outdated_roles": self.dependency_watcher.getOutdatedRoles() }, "updates")

    def notifyWatcherSystemUpdates(self):
        if self.isSocketRoomActive("widget"):
            result = self._fillWidgetActions()
            result["system_updates"] = len(self.system_update_watcher.getSystemUpdates())
            result["smartserver_changes"] = len(self.system_update_watcher.getSmartserverChanges())
            self.emitSocketData('widget:data', result, "widget")

        if self.isSocketRoomActive("updates"):
            result = self._fillUpdatesRebootNeeded()
            result["system_updates"] = self.system_update_watcher.getSystemUpdates()
            result["system_updates_hash"] = self.system_update_watcher.getSystemUpdatesHash()
            result["smartserver_changes"] = self.system_update_watcher.getSmartserverChanges()
            result["smartserver_changes_hash"] = self.system_update_watcher.getSmartserverChangesHash()
            result["smartserver_pull"] = { "code": self.system_update_watcher.getSmartserverCode(), "time": self.system_update_watcher.getSmartserverPullAsTimestamp() }
            result["last_refreshed"] = {
                "system_updates": self.system_update_watcher.getSystemUpdatesLastModifiedAsTimestamp(),
                "smartserver_changes": self.system_update_watcher.getSmartserverChangesLastModifiedAsTimestamp()
            }
            self.emitSocketData('updates:data', result, "updates")

    def notifyWatcherSoftwareVersions(self, field, data):
        if field == "software":
            if self.isSocketRoomActive("software"):
                self.emitSocketData('software:data', { "software_versions": data }, "software")
        elif field == "update_count":
            if self.isSocketRoomActive("widget"):
                self.emitSocketData('widget:data', { "component_updates": data }, "widget")

    def notifyHandlerRestartState(self):
        if self.isSocketRoomActive("widget"):
            self.emitSocketData('widget:data', self._fillWidgetAttention(), "widget")

        if self.isSocketRoomActive("updates"):
            self.emitSocketData('updates:data', self._fillUpdatesNeedsRestart(), "updates")

    def notifyWorkflowState(self):
        if self.isSocketRoomActive("widget"):
            result = self._fillWidgetAttention()
            result = self._fillWidgetRunning(result);
            self.emitSocketData('widget:data', result, "widget")

        if self.isSocketRoomActive("updates"):
            self.emitSocketData('updates:data', { "workflow_status": self.cmd_workflow.getWorkflowState() }, "updates")

    def notifyChangedExternalCmdState(self):
        if self.isSocketRoomActive("widget"):
            self.emitSocketData('widget:data', self._fillWidgetRunning(), "widget")

    def notifyChangedCmdExecuterJobsRefreshed(self, data):
        if self.isSocketRoomActive("updates"):
            result = {}
            result["jobs"] = self.cmd_executer.getJobs()
            self.emitSocketData('updates:data', result, "updates")

    def notifyChangedCmdExecuterJobState(self, data):
        if self.isSocketRoomActive("software"):
            self.emitSocketData('software:data', { "job_status": data }, "software")

        if self.isSocketRoomActive("updates"):
            result = {}
            result["job_status"] = data
            result["job_status"]["logfile"] = self.cmd_executer.getCurrentJobLogfile()
            result["job_status"]["killable"] = self.cmd_executer.getCurrentJobCmdType() != "system_reboot"
            self.emitSocketData('updates:data', result, "updates")

    def notifyChangedCmdExecuterState(self, state, topic):
        if self.isSocketRoomActive("update_details_" + topic):
            self.emitSocketData("update_details_" + topic + ":data", { "job": {"state": state } }, "update_details_" + topic)

    def notifyChangedCmdExecuterLog(self, line, topic):
        if self.isSocketRoomActive("update_details_" + topic):
            self.emitSocketData("update_details_" + topic + ":data", { "logline": logfile.LogFormatter.formatLine(line) }, "update_details_" + topic)

    def onSocketRoomJoin(self, sid, room, data = None):
        super().onSocketRoomJoin(sid, room, data)

        if room == "widget":
            result = {}
            result["component_updates"] = self.software_versions_watcher.getVersionCount()
            result["system_updates"] = len(self.system_update_watcher.getSystemUpdates())
            result["smartserver_changes"] = len(self.system_update_watcher.getSmartserverChanges())
            result = self._fillWidgetAttention(result)
            result = self._fillWidgetRunning(result);
            result = self._fillWidgetActions(result)
            self.emitSocketData('widget:data', result, room)

        elif room == "software":
            self.emitSocketData('software:data', { "job_status": self.cmd_executer.getJobStatus(), "software_versions": self.software_versions_watcher.getSoftwareVersions() }, room)

        elif room == "updates":
            result = {}
            result["jobs"] = self.cmd_executer.getJobs()
            result["job_status"] = self.cmd_executer.getJobStatus()
            result["job_status"]["logfile"] = self.cmd_executer.getCurrentJobLogfile()
            result["job_status"]["killable"] = self.cmd_executer.getCurrentJobCmdType() != "system_reboot"

            result["workflow_status"] = self.cmd_workflow.getWorkflowState()

            result = self._fillUpdatesNeedsRestart(result)

            result["has_encrypted_vault"] = self.deployment_state_watcher.hasEncryptedVault()
            result["deployment_tags"] = self.deployment_tags_watcher.getTags()

            result["outdated_roles"] = self.dependency_watcher.getOutdatedRoles()

            result = self._fillUpdatesRebootNeeded(result)
            result["outdated_processes"] = self.process_watcher.getOutdatedProcesses()

            result["system_updates"] = self.system_update_watcher.getSystemUpdates()
            result["system_updates_hash"] = self.system_update_watcher.getSystemUpdatesHash()
            result["smartserver_changes"] = self.system_update_watcher.getSmartserverChanges()
            result["smartserver_changes_hash"] = self.system_update_watcher.getSmartserverChangesHash()
            result["smartserver_pull"] = { "code": self.system_update_watcher.getSmartserverCode(), "time": self.system_update_watcher.getSmartserverPullAsTimestamp() }

            result["last_refreshed"] = {
                "processes": self.process_watcher.getLastRefreshAsTimestamp(),
                "system_updates": self.system_update_watcher.getSystemUpdatesLastModifiedAsTimestamp(),
                "smartserver_changes": self.system_update_watcher.getSmartserverChangesLastModifiedAsTimestamp()
            }

            self.emitSocketData('updates:data', result, room)

        elif room == "update_details":
            files = CmdExecuter.getLogfiles(config.job_log_folder, data["datetime"], data["cmd"], data["username"])
            if len(files) == 0:
                self.emitSocketData('update_details:data', {"error": "No file found" }, room)
                return

            if len(files) > 1:
                self.emitSocketData('update_details:data', {"error": "Too many files found" }, room)
                return

            result = {}
            if self.cmd_executer.isRunning(False):
                update_topic = CmdExecuter.getTopicName(data["datetime"], data["cmd"], data["username"])
                result["topic"] = "update_details_" + update_topic

            result["job"] = CmdExecuter.getLogFileDetails(files[0])

            logformatter = logfile.LogFormatter(files[0]);
            result["log"] = []
            for logline in logformatter:
                result["log"].append(logline)
            self.emitSocketData('update_details:data', result, room)

    def onSocketConnect(self, sid):
        super().onSocketConnect(sid)

        self._triggerHighAccuracy()

    def _triggerHighAccuracy(self):
        enabled = self.areSocketClientsActive() or self.cmd_workflow.getWorkflowState() in [ CmdWorkflow.STATE_RUNNING, CmdWorkflow.STATE_WAITING ]
        if self.high_accuracy != enabled:
            self.high_accuracy = enabled
            self.cmd_executer.triggerHighAccuracy()

    def isHightAccuracy(self):
        return self.high_accuracy

    def getStateMetrics(self):
        metrics = []
        metrics += self.process_watcher.getStateMetrics()
        metrics += self.cmd_executer.getStateMetrics()
        return Metric.buildMetricsResult(metrics)


@serverSocket.on('refreshSoftwareVersionCheck')
def refreshSoftwareVersionCheck():
    cmd = handler.cmd_builder.buildSoftwareVersionCheckCmdBlock(handler.getRequestHeader('X-Forwarded-User'))
    status = handler.runWorkflow([ cmd ], "software", True);
    handler.emitSocketData("software:status", status, handler.getSocketClient())

@serverSocket.on('refreshSystemUpdateCheck')
def refreshSystemUpdateCheck(params):
    cmd = handler.cmd_builder.buildSystemUpdateCheckBlock(handler.getRequestHeader('X-Forwarded-User'),params["type"] if "type" in params else None)
    status = handler.runWorkflow([ cmd ], "update", True );
    handler.emitSocketData("updates:status", status, handler.getSocketClient())

@serverSocket.on('restartService')
def restartService(params):
    if "service" not in params:
        status = handler.buildStatusResult(1, "Missing parameter 'service'");
    else:
        cmd = handler.cmd_builder.buildRestartServiceCmdBlock(handler.getRequestHeader('X-Forwarded-User'),params["service"])
        status = handler.runWorkflow([ cmd ], "update", True );
    handler.emitSocketData("updates:status", status, handler.getSocketClient())

@serverSocket.on('restartDaemon')
def restartDaemon(params):
    cmd = handler.cmd_builder.buildRestartDaemonCmdBlock(handler.getRequestHeader('X-Forwarded-User'))
    status = handler.runWorkflow([ cmd ], "update", False );
    handler.emitSocketData("updates:status", status, handler.getSocketClient())

@serverSocket.on('installSystemUpdates')
def installSystemUpdates(params):
    if "system_updates_hash" not in params:
        status = handler.buildStatusResult(1, "Missing parameter 'system_updates_hash'");
    else:
        cmds = [
            handler.cmd_builder.buildSystemUpdateCheckBlock( handler.getRequestHeader('X-Forwarded-User'), "system_update" ),
            handler.cmd_builder.buildFunctionBlock( handler.getRequestHeader('X-Forwarded-User'), "cmd_builder.validateUpdateHashes", { "system_updates_hash": params["system_updates_hash"], "smartserver_changes_hash": None } ),
            handler.cmd_builder.buildInstallSystemUpdateCmdBlock(handler.getRequestHeader('X-Forwarded-User'))
        ]
        status = handler.runWorkflow(cmds, "update", True );
    handler.emitSocketData("updates:status", status, handler.getSocketClient())

@serverSocket.on('deploySmartserverUpdates')
def deploySmartserverUpdates(params):
    value = params["tags"] if "tags" in params else None
    tags = value.split(",") if value else []
    confirm = ( params["confirm"] if "confirm" in params else False ) == True
    if len(tags) > 0 or confirm:
        password = params["password"] if "password" in params else None
        if "all" in tags:
            tags = []
        elif confirm:
            tags.append("confirm_deployment")
        cmd = handler.cmd_builder.buildDeploymentSmartserverUpdateCmdBlock(handler.getRequestHeader('X-Forwarded-User'), password, tags )
        if cmd:
            status = handler.runWorkflow([ cmd ], "update", True );
        else:
            status = handler.buildStatusResult(1, "Deployment state file missing, empty or not readable");
    else:
        status = handler.buildStatusResult(1, "Missing tag");

    handler.emitSocketData("updates:status", status, handler.getSocketClient())

@serverSocket.on('systemReboot')
def systemReboot(params):
    cmd = handler.cmd_builder.buildSystemRebootCmdBlock(handler.getRequestHeader('X-Forwarded-User'))
    status = handler.runWorkflow([ cmd ], "update", True );
    handler.emitSocketData("updates:status", status, handler.getSocketClient())

@serverSocket.on('updateWorkflow')
def updateWorkflow(params):
    if "system_updates_hash" not in params:
        status = handler.buildStatusResult(1, "Missing parameter 'system_updates_hash'");
    elif "smartserver_changes_hash" not in params:
        status = handler.buildStatusResult(1, "Missing parameter 'smartserver_changes_hash'");
    else:
        workflow = [
            handler.cmd_builder.buildSystemUpdateCheckBlock( handler.getRequestHeader('X-Forwarded-User'), None ),
            handler.cmd_builder.buildFunctionBlock( handler.getRequestHeader('X-Forwarded-User'), "cmd_builder.validateUpdateHashes", { "system_updates_hash": params["system_updates_hash"], "smartserver_changes_hash": params["smartserver_changes_hash"] } ),
            handler.cmd_builder.buildFunctionBlock( handler.getRequestHeader('X-Forwarded-User'), "cmd_builder.buildInstallSystemUpdateCmdBlockIfNecessary", params ),
            handler.cmd_builder.buildFunctionBlock( handler.getRequestHeader('X-Forwarded-User'), "cmd_builder.buildSystemRebootCmdBlockIfNecessary", params ),
            handler.cmd_builder.buildFunctionBlock( handler.getRequestHeader('X-Forwarded-User'), "cmd_builder.buildRestartDaemonCmdBlockIfNecessary", params ),
            handler.cmd_builder.buildFunctionBlock( handler.getRequestHeader('X-Forwarded-User'), "cmd_builder.buildRestartServiceCmdBlockIfNecessary", params ),
            handler.cmd_builder.buildFunctionBlock( handler.getRequestHeader('X-Forwarded-User'), "cmd_builder.buildDeploymentSmartserverUpdateCmdBlockIfNecessary", params )
        ]
        status = handler.runWorkflow(workflow, "update", True );
    handler.emitSocketData("updates:status", status, handler.getSocketClient())

@serverSocket.on('killProcess')
def killProcess(params):
    handler.cmd_workflow.killWorkflow()
    status = handler.buildStatusResult(0, u"Job killed")
    handler.emitSocketData("updates:status", status, handler.getSocketClient())

@serverSocket.on('initSoftware')
def initSoftware():
    handler.emitInitialSoftwareData()

handler = Handler()
handler.start()
