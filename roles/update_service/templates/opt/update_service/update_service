#!/usr/bin/python3

import logging
import glob
import json
import os
import importlib
from datetime import datetime

from server.cmd.builder import CmdBuilder
from server.cmd.executer import CmdExecuter
from server.cmd.workflow import CmdWorkflow
from server.watcher.dependency import DependencyWatcher
from server.watcher.process import ProcessWatcher
from server.watcher.system_update import SystemUpdateWatcher
from server.watcher.deployment_state import DeploymentStateWatcher
from server.watcher.deployment_tags import DeploymentTagsWatcher
from server.watcher.software_version import SoftwareVersionWatcher

from smartserver.server import Server, serverWeb, serverSocket

from config import config


watched_data_files = [
  config.outdated_roles_state_dir,
  config.system_update_state_file,
  config.deployment_state_file,
  config.deployment_tags_file,
  config.software_version_state_file
]

class Handler(Server):
    def __init__(self):
        super().__init__("update_service", config.service_ip, config.service_port )
           
        plugin = importlib.import_module("plugins.os.{}".format(config.os_type))
        operating_system = plugin.OperatingSystem()
                
        self.process_watcher = ProcessWatcher(operating_system)
        self.system_update_watcher = SystemUpdateWatcher(self.process_watcher, operating_system)
        self.dependency_watcher = DependencyWatcher( self.system_update_watcher)
        self.deployment_state_watcher = DeploymentStateWatcher()
        self.deployment_tags_watcher = DeploymentTagsWatcher()
        self.software_versions_watcher = SoftwareVersionWatcher(self)

        self.cmd_builder = CmdBuilder( self.dependency_watcher, self.process_watcher, self.system_update_watcher, self.deployment_state_watcher, operating_system)
        self.cmd_executer = CmdExecuter( self, self.process_watcher )
        self.cmd_workflow = CmdWorkflow( self, self.cmd_executer, self.cmd_builder )
        
        self.service_base_path = os.path.dirname(__file__)
        self.service_need_restart = False
        
        self.startup_timestamp = round(datetime.now().timestamp(),3)

        watched_data_files.append(__file__)
        files = glob.glob("{}**/**/*.py".format(self.service_base_path), recursive = True)
        for filename in files:
            watched_data_files.append(filename)
        
        self.initWatchedFiles( watched_data_files, self.fileChangeTriggered )
        
    def start(self):
        self.cmd_workflow.handleRunningStates()

        super().start()

    def terminate(self):
        self.process_watcher.terminate()
        self.cmd_executer.terminate()
        super().terminate()

    def fileChangeTriggered(self, event):
        if event["path"] == config.outdated_roles_state_dir.rstrip("/"):
            self.dependency_watcher.notifyChange(event)
        elif event["path"] == config.system_update_state_file:
            self.system_update_watcher.notifyChange(event)
        elif event["path"] == config.deployment_state_file:
            self.deployment_state_watcher.notifyChange(event)
        elif event["path"] == config.deployment_tags_file:
            self.deployment_tags_watcher.notifyChange(event)
        elif event["path"] == config.software_version_state_file:
            self.software_versions_watcher.notifyChange(event)
        elif event["path"].startswith(self.service_base_path):
            self.service_need_restart = True
            
    def checkLastDataModified(self,key,last_data_modified):
        form_key = "last_data_modified[{}]".format(key)
        value = self.getRequestValue(form_key)
        return not value or float(value) < last_data_modified[key]
            
    def buildSuccessResult(self, running_type, cmd_type, state_type ):
        #self.logger.info(__file__)
        
        current_job_started = self.cmd_executer.getCurrentJobStarted()
            
        result = { 
            "status": 0, 
            "job_is_running": running_type is not None, 
            "job_running_type": running_type, 
            "job_cmd_type": cmd_type, 
            "job_started": current_job_started.isoformat() if current_job_started is not None else None,
            "workflow_state": self.cmd_workflow.getWorkflowState()
        }
        
        last_data_modified = {}
        last_data_modified["startup"] = self.startup_timestamp

        changed_data = {}
        
        value = self.getRequestValue("last_data_modified[startup]")
        force = not value or float(value) < last_data_modified["startup"]

        if state_type == "widget":
            result["system_updates"] = len(self.system_update_watcher.getSystemUpdates())
            result["smartserver_changes"] = len(self.system_update_watcher.getSmartserverChanges())
            result["component_updates"] = self.software_versions_watcher.getVersionCount()
            result["needs_attention"] = ( result["workflow_state"] is not None and CmdBuilder.CHECK_WRONG_UPDATE_STATE_SUFFIX in result["workflow_state"] ) or ( self.service_need_restart or self.process_watcher.isUpdateServiceOutdated() )
            result["needs_action"] = len(self.process_watcher.getOudatedProcesses()) > 0 or len(self.dependency_watcher.getOutdatedRoles()) > 0 or self.system_update_watcher.isRebootNeeded()
        else:
            last_data_modified["outdated_processes"] = self.process_watcher.getOutdatedProcessesLastModifiedAsTimestamp()
            last_data_modified["system_reboot"] = self.process_watcher.getSystemRebootLastModifiedAsTimestamp()
            last_data_modified["processes_refreshed"] = self.process_watcher.getLastRefreshAsTimestamp()

            last_data_modified["outdated_roles"] = self.dependency_watcher.getLastModifiedAsTimestamp()
            last_data_modified["deployment_state"] = self.deployment_state_watcher.getLastModifiedAsTimestamp()
            last_data_modified["deployment_tags"] = self.deployment_tags_watcher.getLastModifiedAsTimestamp()
            last_data_modified["system_updates"] = self.system_update_watcher.getSystemUpdatesLastModifiedAsTimestamp()
            last_data_modified["smartserver_changes"] = self.system_update_watcher.getSmartserverChangesLastModifiedAsTimestamp()
            last_data_modified["jobs"] = self.cmd_executer.getLastJobsModifiedAsTimestamp()
            
            if force or self.checkLastDataModified("outdated_processes",last_data_modified):
                changed_data["outdated_processes"] = self.process_watcher.getOudatedProcesses()
            if force or self.checkLastDataModified("outdated_roles",last_data_modified):
                changed_data["outdated_roles"] = self.dependency_watcher.getOutdatedRoles()
            if force or self.checkLastDataModified("deployment_state",last_data_modified):
                changed_data["has_encrypted_vault"] = self.deployment_state_watcher.hasEncryptedVault()
            if force or self.checkLastDataModified("deployment_tags",last_data_modified):
                changed_data["deployment_tags"] = self.deployment_tags_watcher.getTags()

            if force or self.checkLastDataModified("system_updates",last_data_modified) or self.checkLastDataModified("system_reboot",last_data_modified) or self.checkLastDataModified("outdated_processes",last_data_modified):
                changed_data["is_reboot_needed"] = {
                    "all": self.system_update_watcher.isRebootNeeded(),
                    "core": self.process_watcher.isRebootNeededByCoreUpdate(),
                    "outdated": self.process_watcher.isRebootNeededByOutdatedProcesses(),
                    "installed": self.system_update_watcher.isRebootNeededByInstalledPackages()
                }
                
            if force or self.checkLastDataModified("system_updates",last_data_modified):
                changed_data["system_updates"] = self.system_update_watcher.getSystemUpdates()
                changed_data["system_updates_hash"] = self.system_update_watcher.getSystemUpdatesHash()
            if force or self.checkLastDataModified("smartserver_changes",last_data_modified):
                changed_data["smartserver_changes"] = self.system_update_watcher.getSmartserverChanges()
                changed_data["smartserver_changes_hash"] = self.system_update_watcher.getSmartserverChangesHash()
                changed_data["smartserver_code"] = self.system_update_watcher.getSmartserverCode()
                changed_data["smartserver_pull"] = self.system_update_watcher.getSmartserverPullAsTimestamp()
            if force or self.checkLastDataModified("jobs",last_data_modified):
                changed_data["jobs"] = self.cmd_executer.getJobs()
                
            result["job_logfile"] = self.cmd_executer.getCurrentJobLogfile()
            result["job_killable"] = self.cmd_executer.getCurrentJobCmdType() != "system_reboot"
            result["update_server_needs_restart"] = self.service_need_restart or self.process_watcher.isUpdateServiceOutdated()
                
        result["last_data_modified"] = last_data_modified
        result["changed_data"] = changed_data
        return json.dumps(result)

    def buildResult(self, status, message):
        return json.dumps({ 
            "status": status, 
            "message": message
        })
     
    def getState(self, state_type):
        if self.cmd_executer.isDaemonJobRunning():
            return self.buildSuccessResult("daemon",self.cmd_executer.getCurrentJobCmdType(), state_type)

        external_cmd_type = self.cmd_executer.getExternalCmdType(False)
        if external_cmd_type:
            return self.buildSuccessResult("manual",external_cmd_type, state_type)
        else:
            return self.buildSuccessResult(None, None, state_type)
              
    def runWorkflow(self, workflow, state_type, checkGlobalRunning ):
        is_success = self.cmd_workflow.runWorkflow( workflow, checkGlobalRunning )
        if is_success :
            return self.getState(state_type)
        else:
            return self.buildResult(1, u"Job not started" )

    def runWorkflow2(self, workflow, state_type, checkGlobalRunning ):
        is_success = self.cmd_workflow.runWorkflow( workflow, checkGlobalRunning )
        if is_success :
            return self.buildResult(0, u"Job started")
        else:
            return self.buildResult(1, u"Job not started" )

    def emitUpdateSoftwareData(self, data):
         logging.info("Emit update software data")
         self.emitSocketData('updateSoftware', data)

    def emitInitialSoftwareData(self):
         data = self.software_versions_watcher.getSoftwareVersions()
         logging.info("Emit initial software data")
         self.emitSocketData('initSoftware', data)
         if self.cmd_executer.isDaemonJobRunning():
             self.emitSocketData('job_status', self.cmd_executer.getJobStatus())

    def emitJobStatus(self, data):
         logging.info("Emit job status '{}'".format(data["job"]))
         self.emitSocketData('job_status', data)

@serverWeb.route('/refreshSoftwareVersionCheck/', methods = ['POST'])
def refreshSoftwareVersionCheck():
    cmd = handler.cmd_builder.buildSoftwareVersionCheckCmdBlock(handler.getRequestHeader('X-Forwarded-User'))
    return handler.runWorkflow2([ cmd ], "software", True);

@serverWeb.route('/state/', methods = ['POST'])
def state():     
    return handler.getState(handler.getRequestValue('type'))
  
@serverWeb.route('/refreshSystemUpdateCheck/', methods = ['POST'])
def refreshSystemUpdateCheck():
    cmd = handler.cmd_builder.buildSystemUpdateCheckBlock(handler.getRequestHeader('X-Forwarded-User'),handler.getRequestValue('type'))
    return handler.runWorkflow([ cmd ], "update", True );

@serverWeb.route('/restartService/', methods = ['POST'])
def restartService():
    cmd = handler.cmd_builder.buildRestartServiceCmdBlock(handler.getRequestHeader('X-Forwarded-User'),handler.getRequestValue('service'))
    return handler.runWorkflow([ cmd ], "update", True );
      
@serverWeb.route('/restartDaemon/', methods = ['POST'])
def restartDaemon():
    cmd = handler.cmd_builder.buildRestartDaemonCmdBlock(handler.getRequestHeader('X-Forwarded-User'))
    return handler.runWorkflow([ cmd ], "update", False );

@serverWeb.route('/installSystemUpdates/', methods = ['POST'])
def installSystemUpdates():
    cmds = [
        handler.cmd_builder.buildSystemUpdateCheckBlock( handler.getRequestHeader('X-Forwarded-User'), "system_update" ),
        handler.cmd_builder.buildFunctionBlock( handler.getRequestHeader('X-Forwarded-User'), "cmd_builder.validateUpdateHashes", { "system_updates_hash": handler.getRequestValue('system_updates_hash'), "smartserver_changes_hash": None } ),
        handler.cmd_builder.buildInstallSystemUpdateCmdBlock(handler.getRequestHeader('X-Forwarded-User'))
    ]
    return handler.runWorkflow(cmds, "update", True );

@serverWeb.route('/deploySmartserverUpdates/', methods = ['POST'])
def deploySmartserverUpdates():
    value = handler.getRequestValue('tags')
    tags = value.split(",") if value else []
    confirm = handler.getRequestValue('confirm') == "1"
    if len(tags) > 0 or confirm:
        password = value = handler.getRequestValue('password')
        if "all" in tags:
            tags = []
        elif confirm:
            tags.append("confirm_deployment")
        cmd = handler.cmd_builder.buildDeploymentSmartserverUpdateCmdBlock(handler.getRequestHeader('X-Forwarded-User'), password, tags )
        if cmd:
            return handler.runWorkflow([ cmd ], "update", True );
        else:
            return make_response("Deployment state file missing, empty or not readable", 501);
    else:
            return make_response("Missing tag", 501);

@serverWeb.route('/systemReboot/', methods = ['POST'])
def systemReboot():
    cmd = handler.cmd_builder.buildSystemRebootCmdBlock(handler.getRequestHeader('X-Forwarded-User'))
    return handler.runWorkflow([ cmd ], "update", True );

@serverWeb.route('/updateWorkflow/', methods = ['POST'])
def updateWorkflow():
    workflow = [
        handler.cmd_builder.buildSystemUpdateCheckBlock( handler.getRequestHeader('X-Forwarded-User'), None ),
        handler.cmd_builder.buildFunctionBlock( handler.getRequestHeader('X-Forwarded-User'), "cmd_builder.validateUpdateHashes", { "system_updates_hash": handler.getRequestValues("system_updates_hash"), "smartserver_changes_hash": handler.getRequestValues("smartserver_changes_hash") } ),
        handler.cmd_builder.buildFunctionBlock( handler.getRequestHeader('X-Forwarded-User'), "cmd_builder.buildInstallSystemUpdateCmdBlockIfNecessary", handler.getRequestValues() ),
        handler.cmd_builder.buildFunctionBlock( handler.getRequestHeader('X-Forwarded-User'), "cmd_builder.buildSystemRebootCmdBlockIfNecessary", handler.getRequestValues() ),
        handler.cmd_builder.buildFunctionBlock( handler.getRequestHeader('X-Forwarded-User'), "cmd_builder.buildRestartDaemonCmdBlockIfNecessary", handler.getRequestValues() ),
        handler.cmd_builder.buildFunctionBlock( handler.getRequestHeader('X-Forwarded-User'), "cmd_builder.buildRestartServiceCmdBlockIfNecessary", handler.getRequestValues() ),
        handler.cmd_builder.buildFunctionBlock( handler.getRequestHeader('X-Forwarded-User'), "cmd_builder.buildDeploymentSmartserverUpdateCmdBlockIfNecessary", handler.getRequestValues() )
    ]
    return handler.runWorkflow(workflow, "update", True );

@serverWeb.route('/killProcess/', methods = ['POST'])
def killProcess():
    handler.cmd_workflow.killWorkflow()
    return handler.getState("update")

@serverSocket.on('initSoftware')
def initSoftware():
    handler.emitInitialSoftwareData()

handler = Handler()
handler.start()
