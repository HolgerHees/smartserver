#!/usr/bin/python3

import json
import glob
import os.path
import sys

import importlib

import traceback

from datetime import datetime

import subprocess

from config import config

limit_config = None
if len(sys.argv) >= 2:
    limit_config = sys.argv[1]

last_states = {}
if os.path.isfile(config.software_version_state_file):
    with open(config.software_version_state_file, 'r') as f:
        data = json.load(f)
        for state in data['states']:
            last_states[state['name']] = state

update_time = "{}Z".format(datetime.now().utcnow().isoformat('T'))
            
current_states = { 'last_update': update_time, 'states': [] }

print("Processing projects")

update_message_r = []

files = glob.glob("{}*.conf".format(config.components_config_dir))
for config_file in files:
    with open(config_file) as json_data:
        job_config = json.load(json_data)
        
        if limit_config != None and limit_config != job_config['name']:
            continue

        print("  - '{}'".format(job_config['name']), end='')

        try:
            plugin = importlib.import_module("plugins.repo.{}".format(job_config['type']))
        except ModuleNotFoundError:
            print("Plugin '{}' not found".format(job_config['type']),file=sys.stderr)
            print("")
            continue
        
        repo = plugin.Repository(job_config['config'], config.global_config)
        
        last_state = last_states.get(job_config['name'], None)

        try:
            last_updates = last_state['updates'] if last_state != None else None

            current_version = last_state['current'] if last_state != None else None
            if current_version == None or current_version == 0 or current_version['version'] != repo.getCurrentVersionString():
                current_version = repo.getCurrentVersion()

            current_state = { 'name': job_config['name'], 'type': job_config['type'], 'url': job_config['url'], 'current': current_version, 'updates': [] }
            
            new_versions = repo.getUpdates(last_updates)
            for branch in new_versions:
                current_state['updates'].append(new_versions[branch])
                
            if job_config['type'] == config.os_type:
                system_updates = repo.getUpdateDetails()
                
            new_updates = []
            if last_updates != None:
                
                for current_update in current_state['updates']:
                    found = False
                    for last_update in last_updates:
                        if last_update['version'] == current_update['version']:
                            found = True
                    
                    if not found:
                        new_updates.append(current_update['version'])

            if len(new_updates) > 0:
                print( " \033[0;31mhas new updates {}\033[0m".format(new_updates))
                update_message_r.append("{}: versions {} are available".format(current_state['name'], new_updates))
            elif len(current_state['updates']) > 0:
                print( " \033[1;33mhas updates\033[0m")
            else:
                print( " \033[0;32mis updatet\033[0m")
        except Exception as e:
            print( " \033[0;31mhas failed\033[0m")
            
            print("Traceback (most recent call last):",file=sys.stderr)
            traceback.print_tb(e.__traceback__)
            print("Exception:  {}".format(e),file=sys.stderr)
            print("----",file=sys.stderr)

            if  last_state == None:
                current_state = { 'name': job_config['name'], 'type': job_config['type'], 'url': job_config['url'], 'current': 0, 'updates': [] }
            else:
                current_state = last_state
            
        current_states['states'].append(current_state)
            
if limit_config == None:
    if config.software_check_email and len(update_message_r) > 0:
        message_r = []
        message_r.append("There are new updates")
        for message in update_message_r:
            message_r.append("  - {}".format(message))
        message_r.append("\n\nCheck https://{}/?ref=admin|system|update_software for details".format(config.server_host))
        
        print("Send notification mail")

        subprocess.run([ u"echo -e \"{}\" | mail -s \"{}\" {}".format("\n".join(message_r),"New component updates available",config.software_check_email) ], shell=True, check=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=None )

    with open(config.software_version_state_file, 'w') as f:
        json.dump(current_states, f)
