#!/usr/bin/python3

import json
import glob
import os.path
import sys

import importlib

import traceback

from datetime import datetime

import subprocess

from config import config

from smartserver.argsparser import ArgsParser
from smartserver import command

def checkParameter(name, args_values, last_states, current_states):
    if args_values["confirm"]:
        last_state = last_states.get(name, None)
        if last_state is None:
            print("  - '{}' skipped".format(name))
            return False
        elif len(last_state["updates"]) == 0:
            current_states['states'].append(last_state)
            print("  - '{}' skipped".format(name))
            return False
        #print(last_state)
    return True

args_cfg = { "limit": None, "notification": not (sys.stdin and sys.stdin.isatty()), "confirm": False }
args_values = ArgsParser.parse(args_cfg,sys.argv)

last_states = {}
if os.path.isfile(config.software_version_state_file):
    with open(config.software_version_state_file, 'r') as f:
        data = json.load(f)
        for state in data['states']:
            last_states[state['name']] = state

update_time = "{}".format(datetime.now().astimezone().isoformat())
            
current_states = { 'last_update': update_time, 'states': [] }

os_plugin = importlib.import_module("plugins.os.{}".format(config.os_type))
operating_system = os_plugin.OperatingSystem()

print("Processing projects")

update_message_r = []

files = glob.glob("{}*.conf".format(config.components_config_dir))
for config_file in files:
    with open(config_file) as json_data:
        job_config = json.load(json_data)
        
        try:
            plugin = importlib.import_module("plugins.repo.{}".format(job_config['type']))
        except ModuleNotFoundError:
            print("Plugin '{}' not found".format(job_config['type']),file=sys.stderr)
            print("")
            continue
        
        repo = plugin.Repository(job_config, config.global_config, operating_system)
        applications = repo.getApplications(args_values["limit"])
        if applications is None:
            continue

        if len(applications) == 0:
            print("  - '{}'".format(job_config['name']), end='')
            print( " \033[0;32mis updatet\033[0m")
        else:
            for app in applications:
                if not checkParameter(app.getName(), args_values, last_states, current_states):
                    continue

                app.checkForUpdates()

                print("  - '{}'".format(app.getName()), end='')

                last_state = last_states.get(app.getName(), None)

                try:
                    last_updates = last_state['updates'] if last_state != None else None

                    current_version = last_state['current'] if last_state != None else None
                    if current_version == None or current_version == 0 or current_version['version'] != app.getCurrentVersionString():
                        current_version = app.getCurrentVersion()

                    current_state = { 'name': app.getName(), 'type': app.getType(), 'url': app.getUrl(), 'current': current_version, 'updates': [] }

                    new_versions = app.getUpdates(last_updates)
                    for branch in new_versions:
                        current_state['updates'].append(new_versions[branch])

                    new_updates = []
                    for current_update in current_state['updates']:
                        found = False
                        if last_updates != None:
                            for last_update in last_updates:
                                if last_update['version'] == current_update['version']:
                                    found = True
                        if not found:
                            new_updates.append(current_update['version'])

                    if len(new_updates) > 0:
                        print( " \033[0;31mhas new updates {}\033[0m".format(new_updates))
                        update_message_r.append("{}: versions {} are available".format(current_state['name'], new_updates))
                    elif len(current_state['updates']) > 0:
                        print( " \033[1;33mhas updates\033[0m")
                    else:
                        print( " \033[0;32mis updatet\033[0m")
                except Exception as e:
                    print( " \033[0;31mhas failed\033[0m")

                    print("Traceback (most recent call last):",file=sys.stderr)
                    traceback.print_tb(e.__traceback__)
                    print("Exception:  {}".format(e),file=sys.stderr)
                    print("----",file=sys.stderr)

                    if  last_state == None:
                        current_state = { 'name': app.getName(), 'type': app.getType(), 'url': app.getUrl(), 'current': 0, 'updates': [] }
                    else:
                        current_state = last_state

                current_states['states'].append(current_state)
            
if args_values["limit"] == None:
    if args_values["notification"] and config.software_check_email and len(update_message_r) > 0:
        message_r = []
        message_r.append("There are new updates")
        for message in update_message_r:
            message_r.append("  - {}".format(message))
        message_r.append("\n\nCheck https://{}/?ref=admin|system|update_software for details".format(config.server_host))
        
        print("Send notification mail")

        command.sendEmail(config.software_check_email, "New component updates available", "\n".join(message_r) )

    with open(config.software_version_state_file, 'w') as f:
        json.dump(current_states, f)
