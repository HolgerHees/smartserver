# **** VPN CERTIFICATES - check ****
- name: check easyrsa certificate
  stat:
    path: /etc/easy-rsa/pki/ca.crt
  register: certificate_file
  changed_when: not certificate_file.stat.exists

- name: check for vault easy-rsa files => is_production and certificate_file does not exists
  stat:
    path: "{{config_path}}vault/easy-rsa/"
  register: easy_rsa_files_from_vault
  changed_when: easy_rsa_files_from_vault.stat.exists
  when: is_production and not certificate_file.stat.exists

- name: decide to create or restore easy_rsa certificates
  set_fact: 
    easy_rsa_file_mode: "{% if easy_rsa_files_from_vault.stat is defined and easy_rsa_files_from_vault.stat.exists %}vault{% elif not certificate_file.stat.exists %}create{% endif %}"
  changed_when: not certificate_file.stat.exists
  
# **** VPN CERTIFICATES - process ****

# https://en.opensuse.org/SDB:OpenVPN_Installation_and_Setup
# cp /etc/easy-rsa
# cd /etc/easy-rsa
# easyrsa clean-all
# easyrsa build-ca
# easyrsa build-server-full server
# easyrsa build-client-full mobile
# easyrsa gen-dh
- name: init easyrsa certificates => easy_rsa_file_mode =='create'
  shell: "{{item}}"
  args:
    chdir: '/etc/easy-rsa'
  with_items:
    - "echo 'yes' | easyrsa clean-all"
    - "echo 'yes' | easyrsa init-pki"
  when: "easy_rsa_file_mode =='create'"

- name: Create a symbolic config link => is_fedora and easy_rsa_file_mode =='create'
  file:
    src: "/etc/easy-rsa/{{item}}"
    dest: "/etc/easy-rsa/pki/{{item}}"
    state: link
    follow: no
    owner: root
    group: root
  with_items:
    - openssl-easyrsa.cnf
    - x509-types
  when: "is_fedora|bool and easy_rsa_file_mode =='create'"
  
#- name: init easyrsa => easy_rsa_file_mode =='create'
#  command: "echo 'yes' | easyrsa init-pki"
#  args:
#    chdir: '/etc/easy-rsa'
#  notify: "restart openvpn@mobile"
#  when: "easy_rsa_file_mode =='create'"
  
- name: generate easyrsa ca => easy_rsa_file_mode =='create'
  expect:
    command: "easyrsa build-ca"
    chdir: '/etc/easy-rsa'
    responses:
      Enter New CA Key Passphrase: "{{vault_vpn_mobile_pass}}"
      Verifying - Enter New CA Key Passphrase: "{{vault_vpn_mobile_pass}}"
      Common Name: "{{server_name}}"
  notify: "restart openvpn@mobile"
  when: "easy_rsa_file_mode =='create'"
    
- name: generate easyrsa certificate => easy_rsa_file_mode =='create'
  expect:
    command: "{{item}}"
    chdir: '/etc/easy-rsa'
    responses:
      Enter PEM pass phrase: "{{vault_vpn_mobile_pass}}"
      Verifying - Enter PEM pass phrase: "{{vault_vpn_mobile_pass}}"
      Enter pass phrase for: "{{vault_vpn_mobile_pass}}"
  notify: "restart openvpn@mobile"
  with_items:
    - "easyrsa build-server-full server"
    - "easyrsa build-client-full mobile"
  when: "easy_rsa_file_mode =='create'"

- name: init easyrsa gen-dh => easy_rsa_file_mode =='create'
  shell: "easyrsa gen-dh"
  args:
    chdir: '/etc/easy-rsa'
  notify: "restart openvpn@mobile"
  when: "easy_rsa_file_mode =='create'"

- name: prepare needed folder
  file:
    path: "{{item}}"
    state: directory
    owner: root
    group: root
    mode: 0755
  with_items:
    - "/etc/easy-rsa/pki/issued"
    - "/etc/easy-rsa/pki/private"
    - "/etc/easy-rsa/pki/reqs"
  when: "easy_rsa_file_mode =='vault'"

- name: copy easy-rsa certificates => easy_rsa_file_mode =='vault'
  copy:
    src: "{{config_path}}vault/easy-rsa/{{item.path}}"
    dest: "/etc/easy-rsa/pki/{{item.path}}"
    decrypt: yes
    owner: root
    group: root
    mode: "{{item.mode}}"
  with_items:
    - { mode: "u=rw,g=r,o=", path: "issued/server.crt" }
    - { mode: "u=rw,g=r,o=", path: "issued/mobile.crt" }
    - { mode: "u=rw,g=,o=", path: "private/ca.key" }
    - { mode: "u=rw,g=,o=", path: "private/server.key" }
    - { mode: "u=rw,g=,o=", path: "private/mobile.key" }
    - { mode: "u=rw,g=,o=", path: "reqs/server.req" }
    - { mode: "u=rw,g=,o=", path: "reqs/mobile.req" }
    - { mode: "u=rw,g=r,o=", path: "ca.crt" }
    - { mode: "u=rw,g=r,o=", path: "dh.pem" }
#    - "certs_by_serial/76C34AF12707764CFBBE86AA4BB64751.pem"  // server.crt
#    - "certs_by_serial/B0C6214224191008AE8BF1D26F09D2B1.pem"  // mobile.crt
#    - "private/server.pass"
#    - "serial"
#    - "index.txt.attr"
#    - "index.txt"
  notify: "restart openvpn@mobile"
  when: "easy_rsa_file_mode =='vault'"
  
- name: copy server pass
  copy:
    content: "{{vault_vpn_mobile_pass}}"
    dest: "/etc/openvpn/mobile_certificate.pass"
    decrypt: yes
    owner: root
    group: root
    mode: 0600
  notify: "restart openvpn@mobile"

# **** CONFIGS ****
- name: get ca content
  shell: cat /etc/easy-rsa/pki/ca.crt
  register: file_ca_crt
  changed_when: no
  
- name: get crt content
  shell: cat /etc/easy-rsa/pki/issued/mobile.crt
  register: file_mobile_crt
  changed_when: no
  
- name: get key content
  shell: cat /etc/easy-rsa/pki/private/mobile.key
  register: file_mobile_key
  changed_when: no
  
- name: prepare ovpn certificate vars
  set_fact:
    ca_crt: "{{file_ca_crt.stdout}}"
    mobile_crt: "-----BEGIN CERTIFICATE-----{{file_mobile_crt.stdout.split('-----BEGIN CERTIFICATE-----')[1]}}"
    mobile_key: "{{file_mobile_key.stdout}}"
  changed_when: no
  
#- name: prepare ovpn certificate vars
#  set_fact:
#    ca_crt: "{{ lookup('file', '/etc/easy-rsa/pki/ca.crt')}}"
#    mobile_crt: "-----BEGIN CERTIFICATE-----{{ lookup('file','/etc/easy-rsa/pki/issued/mobile.crt').split('-----BEGIN CERTIFICATE-----')[1]}}"
#    mobile_key: "{{ lookup('file','/etc/easy-rsa/pki/private/mobile.key')}}"
#  changed_when: no

- name: copy config
  template:
    src: "templates/{{item}}"
    dest: "/etc/openvpn/{{item}}"
    owner: root
    group: root
    mode: 0640
  with_items:
    - "mobile.conf"
    - "mobile.ovpn"
  notify: "restart openvpn@mobile"
  
- name: set selinux mobile port configuration => is_fedora
  seport:
    ports: "{{vault_vpn_mobile_port}}"
    proto: tcp
    setype: openvpn_port_t
    state: present
  notify: "restart openvpn@mobile"
  when: is_fedora|bool

# ***** FINALIZE *****
- name: register systemd service watcher
  vars:
    name: "openvpn@mobile"
  import_tasks: roles/systemd_watcher/tasks/add_watcher.yml

- name: trigger service check handler
  vars:
    notify: "restart openvpn@mobile"
    service: "openvpn@mobile.service"
  import_tasks: roles/base/tasks/service_check.yml
