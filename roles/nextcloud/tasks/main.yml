- name: set version
  set_fact:
    nextcloud_version: '18.0.4'
  tags: [ 'update_notifier_configs' ]
  
# ***** PREPARE FOLDER *****
- name: prepare needed folder
  file:
    path: "{{item}}"
    state: directory
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0750
  with_items:
    - "{{nextcloud_data_path}}"
    - "{{global_log}}nextcloud"

- name: check owner and group
  file:
    path: "{{item}}"
    state: directory
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    recurse: yes
  with_items:
    - "{{nextcloud_data_path}}"
    - "{{global_log}}nextcloud"
    
- name: prepare .ocdata file
  copy:
    content: ""
    dest: "{{nextcloud_data_path}}.ocdata"
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0640 

# ***** INSTALL ARCHIVE *****
- name: check nextcloud
  stat:
    path: "{{htdocs_path}}nextcloud-{{nextcloud_version}}/"
  register: nextcloud_version_exists
  changed_when: not nextcloud_version_exists.stat.exists
  
- name: install archive => nextcloud does not exists
  unarchive:
    src: "https://download.nextcloud.com/server/releases/nextcloud-{{nextcloud_version}}.zip"
    dest: "{{global_tmp}}"
    remote_src: yes
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0755
  when: not nextcloud_version_exists.stat.exists

- name: rename folder => nextcloud does not exists
  command: "mv {{global_tmp}}nextcloud/ {{htdocs_path}}nextcloud-{{nextcloud_version}}"
  when: not nextcloud_version_exists.stat.exists

# ***** DATABASE *****
- name: check mysql service
  import_tasks: roles/mysql/tasks/wait_until_ready.yml

- name: check mysql databases
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e 'show databases;'\""
  register: mysql_data_exists
  changed_when: "'nextcloud' not in mysql_data_exists.stdout"

- name: create missing mysql databases => database does not exists
  shell: "docker exec mysql sh -c \"mysqladmin -u root -h 127.0.0.1 create nextcloud\""
  when: "'nextcloud' not in mysql_data_exists.stdout"
  
- name: create missing mysql user => database does not exists
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e \\\"CREATE USER IF NOT EXISTS '{{vault_nextcloud_mysql_username}}'@'%' IDENTIFIED BY '{{vault_nextcloud_mysql_password}}';\\\"\""
  when: "'nextcloud' not in mysql_data_exists.stdout"

- name: grant permissions to mysql user => database does not exists
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e \\\"GRANT ALL PRIVILEGES ON nextcloud.* TO '{{vault_nextcloud_mysql_username}}'@'%';\\\"\""
  when: "'nextcloud' not in mysql_data_exists.stdout"

- name: refresh mysql privileges => database does not exists
  shell: "docker exec mysql sh -c \"mysqladmin -u root -h 127.0.0.1 flush-privileges\""
  when: "'nextcloud' not in mysql_data_exists.stdout"

# ***** REDIS ****
- name: check redis service => database does not exists
  import_tasks: roles/redis/tasks/wait_until_ready.yml
  when: "'nextcloud' not in mysql_data_exists.stdout"

# ***** APACHE *****  
- name: check apache service
  import_tasks: roles/apache/tasks/wait_until_ready.yml
  when: "'nextcloud' not in mysql_data_exists.stdout or not nextcloud_version_exists.stat.exists"

  
  
  
# ***** INITIALIZE NEW *****
- name: clean unused config.php => database does not exists
  file:
    dest: "{{htdocs_path}}nextcloud-{{nextcloud_version}}/config/config.php"
    state: absent
  when: "'nextcloud' not in mysql_data_exists.stdout"

- name: backup old admin folder => database does not exists
  command: "mv {{nextcloud_data_path}}{{vault_nextcloud_admin_username}}/ {{nextcloud_data_path}}{{vault_nextcloud_admin_username}}-{{lookup('pipe', 'date +%Y%m%d-%H%M')}}/"
  failed_when: False
  changed_when: False
  when: "'nextcloud' not in mysql_data_exists.stdout"

- name: initialise nextcloud => database does not exists
  shell: "docker exec -i php sh -c \"cd {{htdocs_path}}nextcloud-{{nextcloud_version}} && php occ maintenance:install --data-dir '{{nextcloud_data_path}}' --database 'mysql' --database-host '127.0.0.1' --database-name 'nextcloud'  --database-user '{{vault_nextcloud_mysql_username}}' --database-pass '{{vault_nextcloud_mysql_password}}' --admin-user '{{vault_nextcloud_admin_username}}' --admin-pass '{{vault_nextcloud_admin_password}}'\""
  when: "'nextcloud' not in mysql_data_exists.stdout"

- name: disable password policy => database does not exists
  shell: "docker exec php sh -c \"php {{htdocs_path}}nextcloud-{{nextcloud_version}}/occ app:disable password_policy\""
  when: "'nextcloud' not in mysql_data_exists.stdout"

- name: backup old user folder => database does not exists
  command: "mv {{nextcloud_data_path}}{{item}}/ {{nextcloud_data_path}}{{item}}-{{lookup('pipe', 'date +%Y%m%d-%H%M')}}/"
  with_items: "{{vault_usernames}}"
  failed_when: False
  changed_when: False
  when: "'nextcloud' not in mysql_data_exists.stdout"

- name: add user => database does not exists
  shell: "docker exec php sh -c \"export OC_PASS={{vault_userdata[item].web_password}}; php {{htdocs_path}}nextcloud-{{nextcloud_version}}/occ user:add --password-from-env --group=\\\"users\\\" {{item}}\""
  register: result
  failed_when: "'was created successfully' not in result.stdout"
  with_items: "{{vault_usernames}}"
  when: "'nextcloud' not in mysql_data_exists.stdout"

- name: enable cron as background job handler => database does not exists
  shell: "docker exec php sh -c \"php -f {{htdocs_path}}nextcloud-{{nextcloud_version}}/occ background:cron\""
  when: "'nextcloud' not in mysql_data_exists.stdout"
  
- name: read new nextcloud config => database does not exists
  slurp:
    src: "{{htdocs_path}}nextcloud-{{nextcloud_version}}/config/config.php"
  register: new_nextcloud_config
  failed_when: False
  when: "'nextcloud' not in mysql_data_exists.stdout"

  
  
  
# ***** INITIALIZE OLD - PRE *****
- name: read previous nextcloud config => database exists
  slurp:
    src: "{{htdocs_path}}nextcloud/config/config.php"
  register: previous_nextcloud_config
  failed_when: False
  when: "'nextcloud' in mysql_data_exists.stdout"




# ***** CONTINUE SHARED *****

# installed_nextcloud_version is the version from installed nextcloud archive
- name: read installed nextcloud version
  slurp:
    src: "{{htdocs_path}}nextcloud-{{nextcloud_version}}/version.php"
  register: installed_nextcloud_config

- name: set installed nextcloud version
  set_fact:
    installed_nextcloud_version: "{{installed_nextcloud_config['content'] | b64decode| regex_search(\"\\$OC_Version\\s*=\\s*[^;]+\") | regex_replace(\",\",\".\") | regex_search(\"[0-9\\.]+\")}}"

# current_nextcloud_version is the version from nextcloud data, maybe from the previous installation
- name: set base nextcloud version => new
  set_fact:
    current_nextcloud_version: "{{new_nextcloud_config['content'] | b64decode | regex_search(\"'version'\\s*=>\\s*'([0-9\\.]+)'\") | regex_search(\"[0-9\\.]+\")}}"
  when: "new_nextcloud_config['content'] is defined"

- name: set base nextcloud version => previous
  set_fact:
    current_nextcloud_version: "{{previous_nextcloud_config['content'] | b64decode | regex_search(\"'version'\\s*=>\\s*'([0-9\\.]+)'\") | regex_search(\"[0-9\\.]+\")}}"
  when: "previous_nextcloud_config['content'] is defined"
  
- name: set base nextcloud version => fallback
  set_fact:
    current_nextcloud_version: "{{installed_nextcloud_version}}"
  when: "current_nextcloud_version is not defined"

- name: set symbolic link to htdocs
  file:
    src: "nextcloud-{{nextcloud_version}}"
    dest: "{{htdocs_path}}nextcloud"
    state: link
    follow: no
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"

- name: copy theme
  copy:
    src: "templates/themes/smartserver/"
    dest: "{{htdocs_path}}nextcloud/themes/smartserver/"
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0640

- name: copy config
  template:
    src: "templates/config.php"
    dest: "{{htdocs_path}}nextcloud/config/config.php"
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0640

    

# ***** INITIALIZE OLD - POST *****
- name: upgrade existing database => database exists and nextcloud version changed
  shell: "docker exec php sh -c \"php {{htdocs_path}}nextcloud/occ upgrade\""
  when: "current_nextcloud_version != installed_nextcloud_version"


  
  
# ***** FINALIZE *****
- name: create cron job
  vars:
    name: "Nextcloud Updates"
    cmd: "/usr/bin/flock -n {{global_tmp}}nextcloud.lock timeout 28m docker exec php sh -c \"php -f {{htdocs_path}}nextcloud/cron.php\""
    file: "ansible_nextcloud"
    minute: "*/15"
  import_tasks: roles/cron/tasks/add_cronjob.yml

- name: create cron job
  vars:
    name: "Nextcloud Fileindex"
    cmd: "docker exec php sh -c \"php -f {{htdocs_path}}nextcloud/occ files:scan --all > /dev/null\""
    file: "ansible_nextcloud"
    hour: "1"
    minute: "0"
  import_tasks: roles/cron/tasks/add_cronjob.yml

- name: create cron job
  vars:
    name: "Nextcloud MySQL Backup"
    cmd: "docker exec mysql sh -c \"/usr/bin/mysqldump nextcloud -h 127.0.0.1 | bzip2 -c > /var/lib/mysql_backup/nextcloud_$(date +\\%Y-\\%m-\\%d).sql.bz2\""
    file: "ansible_nextcloud"
    hour: "1"
    minute: "0"
  import_tasks: roles/cron/tasks/add_cronjob.yml

- name: add admin web user
  vars:
    username: "{{vault_nextcloud_admin_username}}"
    password: "{{vault_nextcloud_admin_password}}"
    group: "USER"
  import_tasks: roles/user/tasks/add_web_user.yml

- name: register webui
  vars:
    name: "nextcloud"
    js_file: "templates/webui/nextcloud.js"
    i18n_files: [ { language: "de", file: "templates/webui/nextcloud.de.json" } ]
    icons: [ 'templates/webui/icons/nextcloud_logo.svg', 'templates/webui/icons/nextcloud_files.svg' ]
  import_tasks: roles/apache_webui/tasks/add_webui.yml

- name: copy apache vhost
  vars:
    sub_domain: "nextcloud"
    include: "templates/etc/apache2/_.ansible.vhost.d/nextcloud.inc"
  import_tasks: roles/apache/tasks/add_vhost.yml

- name: copy fluentd config
  vars:
    config_file: "templates/etc/fluent/_.ansible.d/nextcloud.conf"
  import_tasks: roles/fluentd/tasks/add_config.yml

- name: register update notifier
  vars:
    name: "nextcloud"
    type: "github"
    url: "https://nextcloud.com/changelog/"
    config: { 
      project: "nextcloud/server", 
      pattern: "^v([0-9\\.]+)$",
      version: "v{{nextcloud_version}}" 
    }
  import_tasks: roles/update_notifier/tasks/add_notifier.yml
