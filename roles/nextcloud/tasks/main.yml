- name: set nextcloud version
  set_fact:
    nextcloud_version: '18.0.1'
    
- name: register update notifier
  vars:
    name: "nextcloud"
    type: "github"
    url: "https://nextcloud.com/changelog/"
    config: { 
      project: "nextcloud/server", 
      pattern: "^v([0-9\\.]+)$",
      version: "v18.0.1" 
    }
  import_tasks: roles/update_notifier/tasks/add_notifier.yml
     
- name: check current nextcloud
  stat:
    path: "{{htdocs_path}}nextcloud/"
  register: current_nextcloud_exists
  changed_when: not current_nextcloud_exists.stat.exists

- name: read current nextcloud version
  slurp:
    src: "{{htdocs_path}}nextcloud/config/config.php"
  register: current_nextcloud_config
  when: current_nextcloud_exists.stat.exists

- name: set current nextcloud version
  set_fact:
    # the current installed version is needed to run "./occ upgrade" properly
    # used in 'config.php'
    current_nextcloud_version: "{{current_nextcloud_config['content'] | b64decode | regex_search(\"'version'\\s*=>\\s*'([0-9\\.]+)'\") | regex_search(\"[0-9\\.]+\") if current_nextcloud_config['content'] is defined else nextcloud_version }}"
    
- name: prepare needed folder
  file:
    path: "{{item}}"
    state: directory
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0750
  with_items:
    - "{{nextcloud_data_path}}"
    - "{{global_log}}nextcloud"

- name: check owner and group
  file:
    path: "{{item}}"
    state: directory
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    recurse: yes
  with_items:
    - "{{nextcloud_data_path}}"
    - "{{global_log}}nextcloud"
    
- name: check nextcloud
  stat:
    path: "{{htdocs_path}}nextcloud-{{nextcloud_version}}/"
  register: nextcloud_version_exists
  changed_when: not nextcloud_version_exists.stat.exists
  
- name: install archive => nextcloud does not exists
  unarchive:
    src: "https://download.nextcloud.com/server/releases/nextcloud-{{nextcloud_version}}.zip"
    dest: "{{global_tmp}}"
    remote_src: yes
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0755
  when: not nextcloud_version_exists.stat.exists

- name: rename folder => nextcloud does not exists
  command: "mv {{global_tmp}}nextcloud/ {{htdocs_path}}nextcloud-{{nextcloud_version}}"
  when: not nextcloud_version_exists.stat.exists

#- name: clean old symlink => nextcloud does not exists
#  file:
#    dest: "{{htdocs_path}}nextcloud"
#    state: absent
#  when: not nextcloud_version_exists.stat.exists

- name: set symbolic link to htdocs
  file:
    src: "nextcloud-{{nextcloud_version}}"
    dest: "{{htdocs_path}}nextcloud"
    state: link
    follow: no
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"

#- name: bind data directory
#  vars:
#    source_path: "{{nextcloud_data_path}}"
#    target_path: "{{htdocs_path}}nextcloud-data"
#  import_tasks: roles/apache/tasks/bind_directory.yml
  
#- name: set symbolic link to data
#  file:
#    src: "{{nextcloud_data_path}}"
#    dest: "{{htdocs_path}}nextcloud/data"
#    state: link
#    follow: no
#    owner: "{{system_users['www'].name}}"
#    group: "{{system_groups['www'].name}}"  
#  notify: "restart apache2"

- name: copy config
  template:
    src: "templates/config.php"
    dest: "{{htdocs_path}}nextcloud/config/config.php"
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0640

- name: prepare .ocdata file
  copy:
    content: ""
    dest: "{{nextcloud_data_path}}.ocdata"
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0640 

# ***** DATABASE *****
- name: check mysql service
  import_tasks: roles/mysql/tasks/wait_until_ready.yml

- name: check mysql databases
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e 'show databases;'\""
  register: mysql_data_exists
  changed_when: "'nextcloud' not in mysql_data_exists.stdout"

- name: create missing mysql databases => database does not exists
  shell: "docker exec mysql sh -c \"mysqladmin -u root -h 127.0.0.1 create nextcloud\""
  when: "'nextcloud' not in mysql_data_exists.stdout"
  
- name: create missing mysql user => database does not exists
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e \\\"CREATE USER '{{vault_nextcloud_mysql_username}}'@'%' IDENTIFIED BY '{{vault_nextcloud_mysql_password}}';\\\"\""
  when: "'nextcloud' not in mysql_data_exists.stdout"

- name: grant permissions to mysql user => database does not exists
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e \\\"GRANT ALL PRIVILEGES ON nextcloud.* TO '{{vault_nextcloud_mysql_username}}'@'%';\\\"\""
  when: "'nextcloud' not in mysql_data_exists.stdout"

- name: refresh mysql privileges => database does not exists
  shell: "docker exec mysql sh -c \"mysqladmin -u root -h 127.0.0.1 flush-privileges\""
  when: "'nextcloud' not in mysql_data_exists.stdout"

- name: initialise mysql database => database does not exists
  shell: "cat roles/nextcloud/templates/nextcloud.sql | docker exec -i mysql sh -c \"mysql -u root -h 127.0.0.1 nextcloud\""
  when: "'nextcloud' not in mysql_data_exists.stdout"
  
# ***** REDIS ****
- name: check redis service => database does not exists
  import_tasks: roles/redis/tasks/wait_until_ready.yml
  when: "'nextcloud' not in mysql_data_exists.stdout"

# ***** APACHE *****  
- name: check apache service
  import_tasks: roles/apache/tasks/wait_until_ready.yml
  when: "'nextcloud' not in mysql_data_exists.stdout or not nextcloud_version_exists.stat.exists"

# ***** OCC *****
- name: upgrade existing database => database exists and nextcloud installation changed
  shell: "docker exec php sh -c \"php {{htdocs_path}}nextcloud/occ upgrade\""
  when: "'nextcloud' in mysql_data_exists.stdout and not nextcloud_version_exists.stat.exists"

- name: add user => database does not exists
  shell: "docker exec php sh -c \"export OC_PASS={{vault_userdata[item].web_password}}; php {{htdocs_path}}nextcloud/occ user:add --password-from-env --group=\\\"users\\\" {{item}}\""
  register: result
  failed_when: "'was created successfully' not in result.stdout"
  with_items: "{{vault_usernames}}"
  when: "'nextcloud' not in mysql_data_exists.stdout"

- name: add user "{{vault_admin_username}}" => database does not exists
  shell: "docker exec php sh -c \"export OC_PASS={{vault_admin_web_password}}; php {{htdocs_path}}nextcloud/occ user:add --password-from-env --group=\\\"admin\\\" {{vault_admin_username}}\""
  register: result
  failed_when: "'was created successfully' not in result.stdout"
  when: "'nextcloud' not in mysql_data_exists.stdout"

- name: enable cron as background job handler => database does not exists
  shell: "docker exec php sh -c \"php -f /dataDisk/htdocs/nextcloud/occ background:cron\""
  when: "'nextcloud' not in mysql_data_exists.stdout"

# **** OTHER ****
- name: register webui
  vars:
    name: "nextcloud"
    js_file: "templates/webui/nextcloud.js"
    i18n_files: [ { language: "de", file: "templates/webui/nextcloud.de.json" } ]
    icons: [ 'templates/webui/icons/nextcloud_logo.svg', 'templates/webui/icons/nextcloud_files.svg' ]
  import_tasks: roles/apache_webui/tasks/add_webui.yml

- name: copy fluentd config
  vars:
    config_file: "templates/etc/fluent/_.ansible.d/nextcloud.conf"
  import_tasks: roles/fluentd/tasks/add_config.yml

- name: copy apache vhost
  vars:
    sub_domain: "nextcloud"
    include: "templates/etc/apache2/_.ansible.vhost.d/nextcloud.inc"
  import_tasks: roles/apache/tasks/add_vhost.yml

- name: create cron job
  vars:
    name: "Nextcloud Updates"
    cmd: "/usr/bin/flock -n {{global_tmp}}nextcloud.lock timeout 28m docker exec php sh -c \"php -f {{htdocs_path}}nextcloud/cron.php\""
    file: "ansible_nextcloud"
    minute: "*/15"
  import_tasks: roles/cron/tasks/add_cronjob.yml

- name: create cron job
  vars:
    name: "Nextcloud Fileindex"
    cmd: "docker exec php sh -c \"php -f {{htdocs_path}}nextcloud/occ files:scan --all > /dev/null\""
    file: "ansible_nextcloud"
    hour: "1"
    minute: "0"
  import_tasks: roles/cron/tasks/add_cronjob.yml

- name: create cron job
  vars:
    name: "Nextcloud MySQL Backup"
    cmd: "docker exec mysql sh -c \"/usr/bin/mysqldump nextcloud -h 127.0.0.1 | bzip2 -c > /var/lib/mysql_backup/nextcloud_$(date +\\%Y-\\%m-\\%d).sql.bz2\""
    file: "ansible_nextcloud"
    hour: "1"
    minute: "0"
  import_tasks: roles/cron/tasks/add_cronjob.yml
