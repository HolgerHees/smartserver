#- name: add zypper repository
#  zypper_repository:
#    name: Printing (ghostscript)
#    repo: 'http://download.opensuse.org/repositories/Printing/openSUSE_Leap_{{ansible_distribution_version}}/'
#    auto_import_keys: yes
#    priority: "100"
#    state: present

#- name: uninstall blocking packages
#  zypper:
#    name: "ghostscript-x11"
#    state: absent

# ghostscript version 9.27 is available since suse 15.1 (is needed to fix a PDF indexation bug)

- name: install required packages
  zypper:
    name: [
#     "ghostscript>=9.27",
      "php7-gmp"            # needed by bookmark app
    ]
    state: present
    force: yes

- name: set nextcloud version
  set_fact:
    nextcloud_version: '17.0.0'
    nextcloud_upgrade_from: '17.0.0.9' # the current installed version to be able to run "./occ upgrade"
    
- name: check nextcloud
  stat:
    path: "{{htdocs_path}}nextcloud-{{nextcloud_version}}/"
  register: nextcloud_exists
  changed_when: not nextcloud_exists.stat.exists
  
- name: clean old symlink
  file:
    dest: "{{htdocs_path}}nextcloud"
    state: absent
  when: not nextcloud_exists.stat.exists

- name: install archive
  unarchive:
    src: "https://download.nextcloud.com/server/releases/nextcloud-{{nextcloud_version}}.zip"
    dest: "{{htdocs_path}}"
    remote_src: yes
    owner: wwwrun
    group: www
    #mode: 0750
  when: not nextcloud_exists.stat.exists

- name: rename folder
  command: "mv {{htdocs_path}}nextcloud/ {{htdocs_path}}nextcloud-{{nextcloud_version}}"
  when: not nextcloud_exists.stat.exists

- name: set symbolic link to htdocs
  file:
    src: "nextcloud-{{nextcloud_version}}"
    dest: "{{htdocs_path}}nextcloud"
    state: link
    owner: wwwrun
    group: www
  
- name: copy config
  template:
    src: "roles/nextcloud/templates/config.php"
    dest: "{{htdocs_path}}nextcloud/config/config.php"
    owner: wwwrun
    group: www
    mode: 0640
  when: "vault_active|bool"

- name: prepare data folder
  file:
    path: "{{nextcloud_data_path}}"
    state: directory
    owner: wwwrun
    group: www
    mode: 0750
    
- name: prepare .ocdata file
  copy:
    content: ""
    dest: "{{nextcloud_data_path}}.ocdata"
    owner: wwwrun
    group: www
    mode: 0640
  
# ***** DATABASE ****
- name: check mysql service
  import_tasks: roles/mysql/tasks/wait_until_ready.yml

- name: check mysql databases
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e 'show databases;'\""
  register: mysql_data_exists
  changed_when: "'nextcloud' not in mysql_data_exists.stdout"

- name: upgrade existing database
  shell: "php {{htdocs_path}}nextcloud/occ upgrade"
  become: yes
  become_user: "wwwrun"
  when: "'nextcloud' in mysql_data_exists.stdout and not nextcloud_exists.stat.exists"

- name: create missing mysql databases
  shell: "docker exec mysql sh -c \"mysqladmin -u root -h 127.0.0.1 create nextcloud\""
  when: "'nextcloud' not in mysql_data_exists.stdout and vault_active"
  
#- mysql_user:
#    name: "{{nextcloud_mysql_username}}"
#    host: "127.0.0.1"
#    password: "{{nextcloud_mysql_password}}"
#    priv: 'nextcloud.*:ALL,GRANT'
#    state: present

- name: create missing mysql user
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e \\\"CREATE USER '{{nextcloud_mysql_username}}'@'%' IDENTIFIED BY '{{nextcloud_mysql_password}}';\\\"\""
  when: "'nextcloud' not in mysql_data_exists.stdout and vault_active"

- name: grant permissions to mysql user
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e \\\"GRANT ALL PRIVILEGES ON nextcloud.* TO '{{nextcloud_mysql_username}}'@'%';\\\"\""
  when: "'nextcloud' not in mysql_data_exists.stdout and vault_active"

- name: refresh mysql privileges
  shell: "docker exec mysql sh -c \"mysqladmin -u root -h 127.0.0.1 flush-privileges\""
  when: "'nextcloud' not in mysql_data_exists.stdout and vault_active"

- name: initialise mysql database
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 nextcloud\" < roles/nextcloud/templates/nextcloud.sql"
  when: "'nextcloud' not in mysql_data_exists.stdout and vault_active"
  
- name: check redis is running
  systemd:
    name: redis@default
    state: started
  when: "'nextcloud' not in mysql_data_exists.stdout and vault_active"
  
- name: add user "holger"
  shell: "export OC_PASS={{holger_web_password}}; php {{htdocs_path}}nextcloud/occ user:add --password-from-env --group=\"users\" {{holger_username}}"
  become: yes
  become_user: "wwwrun"
  when: "'nextcloud' not in mysql_data_exists.stdout and vault_active"

- name: add user "sandra"
  shell: "export OC_PASS={{sandra_web_password}}; php {{htdocs_path}}nextcloud/occ user:add --password-from-env --group=\"users\" {{sandra_username}}"
  become: yes
  become_user: "wwwrun"
  when: "'nextcloud' not in mysql_data_exists.stdout and vault_active"

# **** OTHER ****
- name: copy apache config
  template:
    src: "roles/nextcloud/templates/etc/apache2/_.ansible.d/nextcloud.conf"
    dest: "/etc/apache2/_.ansible.d/nextcloud.conf"
    owner: root
    group: root
    mode: 0640
  notify: "restart apache"
  tags: ['apache_conf']

- name: create updates cron job
  vars:
    cron_name: "Nextcloud Updates"
    cron_cmd: "/usr/bin/flock -n {{global_tmp}}nextcloud.lock timeout 28m /usr/bin/php -f {{htdocs_path}}nextcloud/cron.php"
  cron:
    name: "{{cron_name}}"
    job: "{{ lookup('template', 'templates/cron_job') }}"
    cron_file: ansible_nextcloud
    user: wwwrun
    minute: "*/15"
    state: present
  tags: ['cron_job']

- name: create fileindex cron job
  vars:
    cron_name: "Nextcloud Fileindex"
    cron_cmd: "/usr/bin/php -f {{htdocs_path}}nextcloud/occ files:scan --all > /dev/null"
  cron:
    name: "{{cron_name}}"
    job: "{{ lookup('template', 'templates/cron_job') }}"
    cron_file: ansible_nextcloud
    user: wwwrun
    minute: "0"
    hour: "1"
    state: present
  tags: ['cron_job']

- name: create mysql backup cron job
  vars:
    cron_name: "Nextcloud MySQL Backup"
    cron_cmd: "docker exec mysql sh -c \"/usr/bin/mysqldump nextcloud -h 127.0.0.1 | bzip2 -c > /var/lib/mysql_backup/nextcloud_$(date +\\%Y-\\%m-\\%d).sql.bz2\""
  cron:
    name: "{{cron_name}}"
    job: "{{ lookup('template', 'templates/cron_job') }}"
    cron_file: ansible_nextcloud
    user: root
    minute: "0"
    hour: "1"
    state: present
  tags: ['cron_job']

