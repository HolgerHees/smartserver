# double check for new versions if "copy patch" is still needed
- name: set version
  set_fact:
    nextcloud_version: '31.0.3' # patches in "enable_apps" beim nächsten Update überprüfen
  tags: [ 'update_notifier_config', 'user' ]

# ***** PREPARE FOLDER *****
- name: prepare .ocdata file
  copy:
    content: ""
    dest: "{{nextcloud_data_path}}.ocdata"
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0640 

# ***** INSTALL ARCHIVE *****
- name: check nextcloud
  stat:
    path: "{{htdocs_path}}nextcloud-{{nextcloud_version}}/"
  register: nextcloud_version_exists
  changed_when: not nextcloud_version_exists.stat.exists
  
- name: install archive => nextcloud does not exists
  unarchive:
    #src: "https://github.com/nextcloud/server/releases/download/v{{nextcloud_version}}/nextcloud-{{nextcloud_version}}.tar.bz2"
    src: "https://download.nextcloud.com/server/releases/nextcloud-{{nextcloud_version}}.zip"
    dest: "{{global_tmp}}"
    remote_src: yes
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0750
  when: not nextcloud_version_exists.stat.exists

- name: rename folder => nextcloud does not exists
  command: "mv {{global_tmp}}nextcloud/ {{htdocs_path}}nextcloud-{{nextcloud_version}}"
  when: not nextcloud_version_exists.stat.exists

# ***** MYSQL DATABASE *****
- name: create database
  vars:
    database: "nextcloud"
    username: "{{nextcloud_mariadb_username}}"
    password: "{{nextcloud_mariadb_password}}"
    backup: yes
    backup_cleanup: "podman exec mariadb mariadb -u root -h 127.0.0.1 -e \\\"DELETE FROM nextcloud.oc_filecache WHERE path LIKE 'appdata%';\\\""
  include_tasks: roles/mariadb/shared/add_database.yml
  tags: ['cron_job','backup_restore']
  when: "mariadb_enabled"

# ***** INITIALIZE NEW *****
- name: clean unused config.php => database does not exists
  file:
    dest: "{{htdocs_path}}nextcloud-{{nextcloud_version}}/config/config.php"
    state: absent
  when: "database_added"

- name: initialise nextcloud => database does not exists
  shell: "podman exec -i php {{htdocs_path}}nextcloud-{{nextcloud_version}}/occ maintenance:install --data-dir '{{nextcloud_data_path}}' --database 'mysql' --database-host 'mariadb' --database-name 'nextcloud'  --database-user '{{nextcloud_mariadb_username}}' --database-pass '{{nextcloud_mariadb_password}}' --admin-user 'admin' --admin-pass '123+456*890'"
  when: "database_added"

- name: delete initial admin user => database does not exists
  shell: "podman exec php php {{htdocs_path}}nextcloud-{{nextcloud_version}}/occ user:delete admin"
  when: "database_added"

- name: disable password policy => database does not exists
  shell: "podman exec php php {{htdocs_path}}nextcloud-{{nextcloud_version}}/occ app:disable password_policy"
  when: "database_added"

- name: backup old user folder => database does not exists
  command: "mv {{nextcloud_data_path}}{{item}}/ {{nextcloud_data_path}}{{item}}-{{lookup('pipe', 'date +%Y%m%d-%H%M')}}/"
  with_items: "{{userdata}}"
  failed_when: no
  changed_when: no
  when: "database_added"

- name: enable cron as background job handler => database does not exists
  shell: "podman exec php php -f {{htdocs_path}}nextcloud-{{nextcloud_version}}/occ background:cron"
  when: "database_added"
  
- name: read new nextcloud config => database does not exists
  slurp:
    src: "{{htdocs_path}}nextcloud-{{nextcloud_version}}/config/config.php"
  register: new_nextcloud_config
  failed_when: no
  when: "database_added"

  
  
  
# ***** INITIALIZE OLD - PRE *****
- name: read previous nextcloud config => database exists
  slurp:
    src: "{{htdocs_path}}nextcloud/config/config.php"
  register: previous_nextcloud_config
  failed_when: no
  when: "not database_added"




# ***** CONTINUE SHARED *****

# installed_nextcloud_version is the version from installed nextcloud archive
- name: read installed nextcloud version
  slurp:
    src: "{{htdocs_path}}nextcloud-{{nextcloud_version}}/version.php"
  register: installed_nextcloud_config

- name: set installed nextcloud version
  set_fact:
    installed_nextcloud_version: "{{installed_nextcloud_config['content'] | b64decode| regex_search(\"\\$OC_Version\\s*=\\s*[^;]+\") | regex_replace(\",\",\".\") | regex_search(\"[0-9\\.]+\")}}"

# current_nextcloud_version is the version from nextcloud data, maybe from the previous installation
- name: set base nextcloud version => new
  set_fact:
    current_nextcloud_version: "{{new_nextcloud_config['content'] | b64decode | regex_search(\"'version'\\s*=>\\s*'([0-9\\.]+)'\") | regex_search(\"[0-9\\.]+\")}}"
  when: "new_nextcloud_config['content'] is defined"

- name: set base nextcloud version => previous
  set_fact:
    current_nextcloud_version: "{{previous_nextcloud_config['content'] | b64decode | regex_search(\"'version'\\s*=>\\s*'([0-9\\.]+)'\") | regex_search(\"[0-9\\.]+\")}}"
  when: "previous_nextcloud_config['content'] is defined"
  
- name: set base nextcloud version => fallback
  set_fact:
    current_nextcloud_version: "{{installed_nextcloud_version}}"
  when: "current_nextcloud_version is not defined"

- name: set is modifed flag
  set_fact:
    nextcloud_installed_version_changed: "{{ true if current_nextcloud_version != installed_nextcloud_version else false}}"

- name: set symbolic link to htdocs
  file:
    src: "nextcloud-{{nextcloud_version}}"
    dest: "{{htdocs_path}}nextcloud"
    state: link
    follow: no
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"

- name: synchronize theme
  synchronize:
    src: "templates/themes/smartserver"
    dest: "{{htdocs_path}}nextcloud/themes/"
    archive: no
    checksum: yes
    group: yes
    owner: yes
    perms: yes
    recursive: yes
    rsync_opts:
      - "--chown={{system_users['www'].name}}:{{system_groups['www'].name}}"
      - "--chmod=D750,F640"

- name: copy config
  template:
    src: "templates/config.php"
    dest: "{{htdocs_path}}nextcloud/config/config.php"
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0640  

# ***** INITIALIZE OLD - POST *****
- name: upgrade => nextcloud version changed
  shell: "podman exec php php {{htdocs_path}}nextcloud/occ {{item}}"
  with_items:
      - "upgrade"
      - "db:add-missing-indices"
      - "db:add-missing-primary-keys"
      - "db:add-missing-columns"
#      - "maintenance:repair --include-expensive"
  when: "nextcloud_installed_version_changed"

# SELECT CONCAT( 'ALTER TABLE ', TABLE_SCHEMA, '.', TABLE_NAME, ' ', 'ROW_FORMAT=DYNAMIC;' ) AS _alter FROM INFORMATION_SCHEMA.TABLES WHERE ENGINE='InnoDB' AND ROW_FORMAT <> 'DYNAMIC';

# ***** UPDATE USERS *****
- name: check for existing users
  shell: "podman exec php php {{htdocs_path}}nextcloud/occ user:list"
  register: nextcloud_user_result
  changed_when: False
  #when: "database_added"
  tags: [ 'user' ]
  
# OC_PASS is never used, because authentification is done by apache.
# 
# one side effect is that basic auth works only for dav clients
# basic auth for non dav requests does not work, because the saml code to handle REMOTE_USER needs cookies
# one possible way to fix is changing "/apps/user_saml/lib/UserBackend.php->getCurrentUserId"
- name: add new user
  shell: "podman exec --env=OC_PASS=123+456*890 php php {{htdocs_path}}nextcloud/occ user:add --password-from-env --group=\\\"users\\\" {{item}}"
  register: result
  failed_when: "'was created successfully' not in result.stdout"
  when: "'user' in userdata[item].groups and '- ' + item + ':' not in nextcloud_user_result.stdout"
  with_items: "{{userdata}}"
  tags: [ 'user' ]

# password update is normally not necessary, because it is not used. Instead the apache auth (htpasswd or oauth) is used
#- name: update existing user
#  shell: "podman exec php OC_PASS=123+456*890 php {{htdocs_path}}nextcloud/occ user:resetpassword --password-from-env {{item}}"
#  register: result
#  failed_when: "'Successfully reset password for' not in result.stdout"
#  changed_when: False
#  with_items: "{{userdata | intersect(nextcloud_user_result.stdout_lines)}}"
#  #when: "database_added"
#  tags: [ 'user' ]

- name: check for existing admin users
  shell: "podman exec php php {{htdocs_path}}nextcloud/occ group:list -l 1"
  register: nextcloud_group_result
  changed_when: False
  tags: [ 'user' ]

- name: add new admin user
  shell: "podman exec php php {{htdocs_path}}nextcloud/occ group:adduser admin {{item}}"
  register: result
  failed_when: "result.rc != 0"
  when: "'admin' in userdata[item].groups and '- ' + item not in nextcloud_group_result.stdout"
  with_items: "{{userdata}}"
  tags: [ 'user' ]

- name: prepare user folder # => needed for initial cloud backup links
  file:
    path: "{{nextcloud_data_path}}/{{item}}"
    state: directory
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
  when: "'user' in userdata[item].groups"
  with_items: "{{userdata}}"

# ***** FINALIZE *****
- name: create cron job 'cron.php'
  vars:
    name: "Nextcloud Updates"
    cmd: "podman exec --user={{system_users['www'].name}} php php -d memory_limit={{'4096' if nextcloud_image_recognize_enabled else '1024' }}M -f {{htdocs_path}}nextcloud/cron.php > /dev/null"
    group: "nextcloud"
    subgroup: "cron"
    minute: "*/5"
  include_tasks: roles/cron/shared/add_cronjob.yml
  tags: ['cron_job']

#- name: create cron job 'files:scan'
#  vars:
#    name: "Nextcloud Fileindex"
#    cmd: "podman exec --user={{system_users['www'].name}} php php -f {{htdocs_path}}nextcloud/occ files:scan --all > /dev/null"
#    group: "nextcloud"
#    subgroup: "file_scan"
#    hour: "1"
#    minute: "0"
#  include_tasks: roles/cron/shared/add_cronjob.yml
#  tags: ['cron_job']

#- name: create cron job 'generate-all'
#  vars:
#    name: "Nextcloud Preview"
#    cmd: "podman exec --user={{system_users['www'].name}} php sh -c \"php -f {{htdocs_path}}nextcloud/occ preview:generate-all > /dev/null\""
#    group: "nextcloud"
#    subgroup: "preview_generator"
#    hour: "2"
#    minute: "0"
#  include_tasks: roles/cron/shared/add_cronjob.yml
#  tags: ['cron_job']

- name: register webui
  vars:
    name: "nextcloud"
    js_file: "templates/webui/nextcloud.js"
    i18n_files: [ { language: "de", file: "templates/webui/nextcloud.de.json" } ]
    icons: [ 'templates/webui/icons/nextcloud_logo.svg', 'templates/webui/icons/nextcloud_files.svg', 'templates/webui/icons/nextcloud_notes.svg', 'templates/webui/icons/nextcloud_photos.svg', 'templates/webui/icons/nextcloud_news.svg', 'templates/webui/icons/nextcloud_passwords.svg', 'templates/webui/icons/nextcloud_deck.svg' ]
  include_tasks: roles/apache_webui/shared/add_webui.yml
  tags: ['apache_webui_config']

- name: copy apache vhost
  vars:
    sub_domain: "nextcloud"
    usergroup: "user"
    additional_env: yes
    include: "templates/etc/apache2/_.ansible.vhost.d/nextcloud.inc"
  include_tasks: roles/apache/shared/add_vhost.yml
  tags: ['apache_config']

- name: copy fluentd config
  vars:
    config_file: "templates/etc/fluent/_.ansible.d/nextcloud.conf"
  include_tasks: roles/fluentd/shared/add_config.yml
  tags: ['fluentd_config']
  when: "monitoring_enabled"

- name: register update notifier
  vars:
    name: "nextcloud"
    type: "github"
    url: "https://nextcloud.com/changelog/"
    config: { 
      project: "nextcloud/server", 
      pattern: "^v([0-9\\.]+)$",
      version: "v{{nextcloud_version}}" 
    }
  include_tasks: roles/update_service/shared/add_software.yml
  tags: ['update_notifier_config']
  when: "update_service_software_check_enabled"
