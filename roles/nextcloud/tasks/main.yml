- name: prepare needed folder
  file:
    path: "{{item}}"
    state: directory
    owner: "{{www_username}}"
    group: "{{www_group}}"
    mode: 0750
  with_items:
    - "{{nextcloud_data_path}}"
    - "{{global_log}}nextcloud"

- name: set nextcloud version
  set_fact:
    nextcloud_version: '17.0.0'
    nextcloud_upgrade_from: '17.0.0.9' # the current installed version to be able to run "./occ upgrade"
    
- name: check nextcloud
  stat:
    path: "{{htdocs_path}}nextcloud-{{nextcloud_version}}/"
  register: nextcloud_exists
  changed_when: not nextcloud_exists.stat.exists
  
- name: clean old symlink => nextcloud does not exists
  file:
    dest: "{{htdocs_path}}nextcloud"
    state: absent
  when: not nextcloud_exists.stat.exists

- name: install archive => nextcloud does not exists
  unarchive:
    src: "https://download.nextcloud.com/server/releases/nextcloud-{{nextcloud_version}}.zip"
    dest: "{{htdocs_path}}"
    remote_src: yes
    owner: "{{www_username}}"
    group: "{{www_group}}"
    mode: 0750
  when: not nextcloud_exists.stat.exists

- name: rename folder => nextcloud does not exists
  command: "mv {{htdocs_path}}nextcloud/ {{htdocs_path}}nextcloud-{{nextcloud_version}}"
  when: not nextcloud_exists.stat.exists

- name: set symbolic link to htdocs
  file:
    src: "nextcloud-{{nextcloud_version}}"
    dest: "{{htdocs_path}}nextcloud"
    state: link
    follow: no
    owner: "{{www_username}}"
    group: "{{www_group}}"
  notify: "restart apache2"

- name: bind data directory
  vars:
    source_path: "{{nextcloud_data_path}}"
    target_path: "{{htdocs_path}}nextcloud-data"
  import_tasks: roles/apache/tasks/bind_directory.yml
  
- name: bind data directory
  vars:
    source_path: "{{global_log}}nextcloud"
    target_path: "{{htdocs_path}}nextcloud-logs"
  import_tasks: roles/apache/tasks/bind_directory.yml

#- name: set symbolic link to data
#  file:
#    src: "{{nextcloud_data_path}}"
#    dest: "{{htdocs_path}}nextcloud/data"
#    state: link
#    follow: no
#    owner: "{{www_username}}"
#    group: "{{www_group}}"  
#  notify: "restart apache2"

- name: copy config
  template:
    src: "templates/config.php"
    dest: "{{htdocs_path}}nextcloud/config/config.php"
    owner: "{{www_username}}"
    group: "{{www_group}}"
    mode: 0640

- name: prepare .ocdata file
  copy:
    content: ""
    dest: "{{nextcloud_data_path}}.ocdata"
    owner: "{{www_username}}"
    group: "{{www_group}}"
    mode: 0640 
  
# ***** DATABASE *****
- name: check mysql service
  import_tasks: roles/mysql/tasks/wait_until_ready.yml

- name: check mysql databases
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e 'show databases;'\""
  register: mysql_data_exists
  changed_when: "'nextcloud' not in mysql_data_exists.stdout"

- name: create missing mysql databases => database does not exists
  shell: "docker exec mysql sh -c \"mysqladmin -u root -h 127.0.0.1 create nextcloud\""
  when: "'nextcloud' not in mysql_data_exists.stdout"
  
- name: create missing mysql user => database does not exists
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e \\\"CREATE USER '{{vault_nextcloud_mysql_username}}'@'%' IDENTIFIED BY '{{vault_nextcloud_mysql_password}}';\\\"\""
  when: "'nextcloud' not in mysql_data_exists.stdout"

- name: grant permissions to mysql user => database does not exists
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e \\\"GRANT ALL PRIVILEGES ON nextcloud.* TO '{{vault_nextcloud_mysql_username}}'@'%';\\\"\""
  when: "'nextcloud' not in mysql_data_exists.stdout"

- name: refresh mysql privileges => database does not exists
  shell: "docker exec mysql sh -c \"mysqladmin -u root -h 127.0.0.1 flush-privileges\""
  when: "'nextcloud' not in mysql_data_exists.stdout"

- name: initialise mysql database => database does not exists
  shell: "cat roles/nextcloud/templates/nextcloud.sql | docker exec -i mysql sh -c \"mysql -u root -h 127.0.0.1 nextcloud\" -t"
  when: "'nextcloud' not in mysql_data_exists.stdout"
  
# ***** REDIS ****
- name: check redis service => database does not exists
  import_tasks: roles/redis/tasks/wait_until_ready.yml
  when: "'nextcloud' not in mysql_data_exists.stdout"

# ***** APACHE *****  
- name: check apache service
  import_tasks: roles/apache/tasks/wait_until_ready.yml
  when: "'nextcloud' not in mysql_data_exists.stdout or not nextcloud_exists.stat.exists"

# ***** OCC *****
- name: upgrade existing database => database exists and nextcloud installation changed
  shell: "docker exec apache2 sh -c \"sudo -u {{www_username}} php {{htdocs_path}}nextcloud/occ upgrade\""
  when: "'nextcloud' in mysql_data_exists.stdout and not nextcloud_exists.stat.exists"

- name: add user => database does not exists
  shell: "docker exec apache2 sh -c \"export OC_PASS={{vault_userdata[item].web_password}}; sudo -E -u {{www_username}} php {{htdocs_path}}nextcloud/occ user:add --password-from-env --group=\\\"users\\\" {{item}}\""
  with_items: "{{vault_usernames}}"
  when: "'nextcloud' not in mysql_data_exists.stdout"

- name: add user "{{vault_admin_username}}" => database does not exists
  shell: "docker exec apache2 sh -c \"export OC_PASS={{vault_admin_web_password}}; sudo -E -u {{www_username}} php {{htdocs_path}}nextcloud/occ user:add --password-from-env --group=\\\"admin\\\" {{vault_admin_username}}\""
  when: "'nextcloud' not in mysql_data_exists.stdout"

- name: enable cron as background job handler => database does not exists
  shell: "docker exec apache2 sh -c \"sudo -u {{www_username}} php -f /dataDisk/htdocs/nextcloud/occ background:cron\""
  when: "'nextcloud' not in mysql_data_exists.stdout"

# **** OTHER ****
- name: copy apache config
  vars:
    config_file: "templates/etc/apache2/_.ansible.d/nextcloud.conf"
  import_tasks: roles/apache/tasks/add_config.yml
  
- name: create cron job
  vars:
    name: "Nextcloud Updates"
    cmd: "/usr/bin/flock -n {{global_tmp}}nextcloud.lock timeout 28m docker exec apache2 sh -c \"sudo -u {{www_username}} php -f {{htdocs_path}}nextcloud/cron.php\""
    file: "ansible_nextcloud"
    minute: "*/15"
  import_tasks: roles/cron/tasks/add_cronjob.yml

- name: create cron job
  vars:
    name: "Nextcloud Fileindex"
    cmd: "docker exec apache2 sh -c \"sudo -u {{www_username}} php -f {{htdocs_path}}nextcloud/occ files:scan --all > /dev/null\""
    file: "ansible_nextcloud"
    hour: "1"
    minute: "0"
  import_tasks: roles/cron/tasks/add_cronjob.yml

- name: create cron job
  vars:
    name: "Nextcloud MySQL Backup"
    cmd: "docker exec mysql sh -c \"/usr/bin/mysqldump nextcloud -h 127.0.0.1 | bzip2 -c > /var/lib/mysql_backup/nextcloud_$(date +\\%Y-\\%m-\\%d).sql.bz2\""
    file: "ansible_nextcloud"
    hour: "1"
    minute: "0"
  import_tasks: roles/cron/tasks/add_cronjob.yml
