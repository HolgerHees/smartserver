- name: set openhab version
  set_fact:
    openhab_version: "2.5.5"
  tags: [ 'update_notifier_configs' ]
  
- name: set jython script version
  set_fact:
    # stable version from 05.03.2020
    jython_script_version: "f09f63eba986833fead2c363bbd56e34106fed12"
  tags: [ 'update_notifier_configs' ]
    
- name: check openhab-runtime
  stat:
    path: "{{data_path}}openhab-runtime-{{openhab_version}}"
  register: openhab_exists
  changed_when: not openhab_exists.stat.exists
  
# **** PREPARATION ****
- name: prepare needed folder
  file:
    path: "{{item}}"
    state: directory
    owner: root
    group: root
    mode: 0750
  with_items:
    - "{{data_path}}openhab-runtime-{{openhab_version}}/"
    - "{{global_log}}openhab"
    - "{{global_lib}}openhab"

# **** INSTALL ****
- name: install archive => openhab not exists
  unarchive:
    src: "https://bintray.com/openhab/mvn/download_file?file_path=org%2Fopenhab%2Fdistro%2Fopenhab%2F{{openhab_version}}%2Fopenhab-{{openhab_version}}.zip"
    dest: "{{data_path}}openhab-runtime-{{openhab_version}}/"
    remote_src: yes
  when: not openhab_exists.stat.exists

#- name: clean old symlink => openhab not exists
#  file:
#    dest: "{{data_path}}openhab-runtime"
#    state: absent
#  when: not openhab_exists.stat.exists

- name: set runtime link
  file:
    src: "openhab-runtime-{{openhab_version}}"
    dest: "{{data_path}}openhab-runtime"
    state: link
    follow: no
    owner: root
    group: root

# **** BACKUP ****
- name: backup original conf and start.sh => openhab not exists
  command: "mv {{data_path}}openhab-runtime/{{item}} {{data_path}}openhab-runtime/{{item}}.bak"
  with_items:
    - "conf"
    - "addons"
    - "start.sh"
  when: not openhab_exists.stat.exists

# **** PREPARE FOLDER ****
- name: prepare needed runtime folder
  file:
    path: "{{item}}"
    state: directory
    owner: root
    group: root
    mode: 0750
  with_items:
    - "{{data_path}}openhab-runtime/conf"
    - "{{data_path}}openhab-runtime/conf/things"
    - "{{data_path}}openhab-runtime/conf/scripts"
    - "{{data_path}}openhab-runtime/conf/services"
    - "{{data_path}}openhab-runtime/conf/sounds"
    - "{{data_path}}openhab-runtime/python"
    - "{{data_path}}openhab-runtime/userdata/config"
    - "{{data_path}}openhab-runtime/userdata/config/org"
    - "{{data_path}}openhab-runtime/userdata/config/org/openhab"
  notify: "restart openhab"

# **** SET BASE LINKS ****
- name: link base folder
  file:
    src: "{{item.src}}"
    dest: "{{item.dest}}"
    state: link
    follow: no
    owner: root
    group: root
  with_items:
    - { src: "{{global_log}}openhab", dest: "{{data_path}}openhab-runtime/userdata/logs" }
    - { src: "{{global_lib}}openhab", dest: "{{data_path}}openhab-runtime/userdata/persistence" }
  notify: "restart openhab"
    
# ***** CONFIGS *****
- name: set log config
  lineinfile:
    path: "{{data_path}}openhab-runtime/userdata/etc/org.ops4j.pax.logging.cfg"
    regexp: '^{{item.field}}\s*='
    line: '{{item.field}} = {{item.value}}'
  with_items:
    - { field: 'log4j2.logger.jsr223Script.name', value: 'jsr223.jython' }
    - { field: 'log4j2.logger.jsr223Script.level', value: 'DEBUG' }
    - { field: 'log4j2.logger.jsr223Default.name', value: 'org.openhab.core.automation' }
    - { field: 'log4j2.logger.jsr223Default.level', value: 'DEBUG' }
    - { field: 'log4j2.logger.jsr223Trigger.name', value: 'org.openhab.core.automation.internal.RuleEngineImpl' }
    - { field: 'log4j2.logger.jsr223Trigger.level', value: 'ERROR' }
    # hide warning like this
    # > 2018-12-20 14:38:30.140 [WARN ] [calimero.link.192.168.0.51:3671     ] - negative confirmation of 1/7/11: 2e009de0fffa0f0b010000
    # temperature sensor is working fine
    #- { field: 'log4j2.logger.jsr223Binding.name', value: 'calimero.link.192.168.0.51:3671' }
    #- { field: 'log4j2.logger.jsr223Binding.level', value: 'OFF' } # just temporary until upgrade to KNX2
    #- { field: 'log4j2.logger.jsr223Binding.name', value: 'org.openhab.binding.knx.internal.bus.KNXBinding' }
    #- { field: 'log4j2.logger.jsr223Binding.level', value: 'OFF' } # just temporary until upgrade to KNX2
  notify: "restart openhab"

- name: set web config
  lineinfile:
    path: "{{data_path}}openhab-runtime/userdata/etc/org.ops4j.pax.web.cfg"
    regexp: '^{{item.field}}\s*='
    line: '{{item.field}} = {{item.value}}'
  with_items:
    - { field: 'org.ops4j.pax.web.listening.addresses', value: '127.0.0.1' }
  notify: "restart openhab"

- name: copy systemd service
  template:
    src: "templates/etc/systemd/system/openhab.service"
    dest: "/etc/systemd/system/openhab.service"
    owner: root
    group: root
    mode: 0644
  notify: "restart openhab"

# ****** GITHUB JYTHON PROJECT ******
- name: "clone jython git"
  git:
    repo: 'https://github.com/openhab-scripters/openhab-helper-libraries.git'
    dest: '{{global_build}}openhab-jython'
    version: '{{jython_script_version}}'

- name: copy jython classes
  copy:
    src: "{{global_build}}openhab-jython/Core/automation/lib/python/core"
    dest: "{{data_path}}openhab-runtime/python/"
    remote_src: yes
    owner: root
    group: root
    mode: 0640
  notify: "restart openhab"

- name: copy jython configuration
  copy:
    src: "{{global_build}}openhab-jython/Core/automation/lib/python/configuration.py.example"
    dest: "{{data_path}}openhab-runtime/python/configuration.py"
    remote_src: yes
    owner: root
    group: root
    mode: 0640
  notify: "restart openhab"

# ****** GITHUB CONFIG PROJECT ******
- name: clone config git
  git:
    accept_hostkey: yes
    repo: '{{vault_openhab_config_git}}'
    dest: '{{projects_path}}openhab2'
    version: "master"

- name: link configs
  file:
    src: "{{projects_path}}openhab2/{{item}}"
    dest: "{{data_path}}openhab-runtime/{{item}}"
    state: link
    follow: no
    owner: root
    group: root
  with_items:
    - start.sh
    - addons
    - conf/automation
    - conf/html
    - conf/icons
    - conf/items
    - conf/persistence
    - conf/rules
    - conf/sitemaps
    - conf/transform
    - python/custom
  notify: "restart openhab"

- name: copy habpanel config
  copy:
    src: "{{projects_path}}openhab2/habpanel.config"
    dest: "{{data_path}}openhab-runtime/userdata/config/org/openhab/habpanel.config"
    remote_src: yes
    owner: root
    group: root
    mode: 0640

- name: copy service configs
  template:
    src: "{{item}}"
    dest: "{{data_path}}openhab-runtime/conf/services/{{item|basename}}"
    remote_src: yes
    owner: root
    group: root
    mode: 0640
  with_fileglob: "{{projects_path}}openhab2/templates/services/*"
  notify: "restart openhab"

- name: copy things configs
  template:
    src: "{{item}}"
    dest: "{{data_path}}openhab-runtime/conf/things/{{item|basename}}"
    remote_src: yes
    owner: root
    group: root
    mode: 0640
  with_fileglob: "{{projects_path}}openhab2/templates/things/*"
  notify: "restart openhab"

- name: copy udev rules
  template:
    src: "{{item}}"
    dest: "/etc/udev/rules.d/{{item|basename}}"
    remote_src: yes
    owner: root
    group: root
    mode: 0644
  register: udev_rules
  with_fileglob: "{{projects_path}}openhab2/templates/udev/rules.d/*"
  notify: "restart openhab"

- name: reload udev rules
  shell: "udevadm control --reload-rules && udevadm trigger"
  when: udev_rules.changed
# *******************

# ***** SELINUX ****
- name: set selinux configuration => is_fedora
  sefcontext:
    target: "{{item.target}}"
    ftype: "{{item.ftype}}"
    setype: "{{item.setype}}"
    seuser: "system_u"
    state: present
  register: sefcontext_result
  with_items:
    - { ftype: "l", setype: "lib_t", target: "{{data_path}}openhab-runtime" }
    - { ftype: "a", setype: "lib_t", target: "{{data_path}}openhab-runtime-{{openhab_version}}(/.*)?" }
    - { ftype: "d", setype: "var_log_t", target: "{{global_log}}openhab(/.*)?" }
    - { ftype: "d", setype: "usr_t", target: "{{global_lib}}openhab(/.*)?" }
    - { ftype: "a", setype: "lib_t", target: "{{projects_path}}openhab2(/.*)?" }
    - { ftype: "f", setype: "shell_exec_t", target: "{{projects_path}}openhab2/start.sh" }
#    - { ftype: "l", setype: "shell_exec_t", target: "{{data_path}}openhab-runtime/start.sh" }
  when: is_fedora|bool
    
- name: reload selinux configuration => is_fedora and sefcontext changed
  shell: "restorecon {{item}}"
  with_items:
    - "{{data_path}}openhab-runtime"
    - "-irv {{data_path}}openhab-runtime-{{openhab_version}}"
    - "-irv {{projects_path}}openhab2"
    - "-irv {{global_log}}openhab"
    - "-irv {{global_lib}}openhab"
#    - "{{projects_path}}openhab2/start.sh"
  when: is_fedora|bool and sefcontext_result.changed

# ***** DATABASE ****
- name: check mysql service
  import_tasks: roles/mysql/tasks/wait_until_ready.yml
  
- name: check mysql databases
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e 'show databases;'\""
  register: mysql_data_exists
  changed_when: "'openhab' not in mysql_data_exists.stdout"

- name: create missing mysql databases => database does not exists
  shell: "docker exec mysql sh -c \"mysqladmin -u root -h 127.0.0.1 create openhab\""
  when: "'openhab' not in mysql_data_exists.stdout"

- name: create missing mysql user => database does not exists
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e \\\"CREATE USER IF NOT EXISTS '{{vault_openhab_mysql_username}}'@'%' IDENTIFIED BY '{{vault_openhab_mysql_password}}';\\\"\""
  when: "'openhab' not in mysql_data_exists.stdout"

- name: grant permissions to mysql user => database does not exists
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e \\\"GRANT ALL PRIVILEGES ON openhab.* TO '{{vault_openhab_mysql_username}}'@'%';\\\"\""
  when: "'openhab' not in mysql_data_exists.stdout"

- name: refresh mysql privileges => database does not exists
  shell: "docker exec mysql sh -c \"mysqladmin -u root -h 127.0.0.1 flush-privileges\""
  when: "'openhab' not in mysql_data_exists.stdout"
  
- name: check influxdb data
  stat:
    path: "{{ global_lib }}influxdb/data/openhab_db"
  register: influxdb_data_exists
  changed_when: not influxdb_data_exists.stat.exists
  
- name: check influxdb service => database does not exists
  import_tasks: roles/influxdb/tasks/wait_until_ready.yml
  when: "not influxdb_data_exists.stat.exists"

- name: create missing influx databases => database does not exists
  shell: "docker exec influxdb sh -c \"influx -execute 'CREATE DATABASE openhab_db'\""
  when: "not influxdb_data_exists.stat.exists"
  
- name: create missing influx openhab user => database does not exists
  shell: "docker exec influxdb sh -c \"influx -execute \\\"CREATE USER {{vault_openhab_influxdb_username}} WITH PASSWORD '{{vault_openhab_influxdb_password}}'\\\"\""
  when: "not influxdb_data_exists.stat.exists"
  
- name: grant permissions to influx openhab user => database does not exists
  shell: "docker exec influxdb sh -c \"influx -execute 'GRANT ALL ON openhab_db TO {{vault_openhab_influxdb_username}}'\""
  when: "not influxdb_data_exists.stat.exists"

- name: create missing influx grafana user => database does not exists
  shell: "docker exec influxdb sh -c \"influx -execute \\\"CREATE USER {{vault_grafana_influxdb_username}} WITH PASSWORD '{{vault_grafana_influxdb_password}}'\\\"\""
  when: "not influxdb_data_exists.stat.exists"

- name: grant permissions to influx openhab user => database does not exists
  shell: "docker exec influxdb sh -c \"influx -execute 'GRANT READ ON openhab_db TO {{vault_grafana_influxdb_username}}'\""
  when: "not influxdb_data_exists.stat.exists"

#- name: create retention policy
#  vars:
#    database: "openhab_db"
#  import_tasks: roles/influxdb/tasks/create_retention_policy.yml
#  when: "not influxdb_data_exists.stat.exists"

# ***** FINALIZE *****
- name: create cron job
  vars:
    name: "MySQL Openhab Backup"
    cmd: "docker exec mysql sh -c \"/usr/bin/mysqldump openhab -h 127.0.0.1 | bzip2 -c > /var/lib/mysql_backup/openhab_$(date +\\%Y-\\%m-\\%d).sql.bz2\""
    file: "ansible_openhab"
    hour: "1"
    minute: "0"
  import_tasks: roles/cron/tasks/add_cronjob.yml

- name: create cron job
  vars:
    name: "Influxdb Openhab Backup"
    cmd: "docker exec influxdb sh -c \"influxd backup -database openhab_db /var/lib/influxdb_backup/openhab_db_$(date +\\%Y-\\%m-\\%d)/ > /dev/null\""
    file: "ansible_openhab"
    hour: "1"
    minute: "0"
  import_tasks: roles/cron/tasks/add_cronjob.yml

- name: register webui
  vars:
    name: "openhab"
    js_file: "templates/webui/openhab.js"
    i18n_files: [ { language: "de", file: "templates/webui/openhab.de.json" } ]
    listener: { "sub_domain": "openhab", "prefix": "basicui", "js_file": "templates/webui/openhab.listener.js" }
    icons: [ 'templates/webui/icons/openhab_logo.svg' ]
  import_tasks: roles/apache_webui/tasks/add_webui.yml

- name: copy apache vhost
  vars:
    sub_domain: "openhab"
    include: "templates/etc/apache2/_.ansible.vhost.d/openhab.inc"
  import_tasks: roles/apache/tasks/add_vhost.yml

- name: copy special vhosts
  template:
    src: "templates/etc/apache2/_.ansible.vhost.d/{{item}}"
    dest: "{{global_etc}}apache2/_.ansible.vhost.d/{{item}}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - default-openhab.conf
    - default-openhab-ssl.conf
  notify: "restart apache2"
  tags: ['apache_conf']

- name: copy fluentd config
  vars:
    config_file: "templates/etc/fluent/_.ansible.d/openhab.conf"
  import_tasks: roles/fluentd/tasks/add_config.yml

- name: register service watcher
  vars:
    name: "openhab"
  import_tasks: roles/systemd_watcher/tasks/add_watcher.yml

- name: register openhab update notifier
  vars:
    name: "openhab"
    type: "github"
    url: "https://github.com/openhab/openhab-distro/releases"
    config: { 
      project: "openhab/openhab-distro", 
      pattern: "^([0-9\\.]+)$",
      version: "{{openhab_version}}" 
    }
  import_tasks: roles/update_notifier/tasks/add_notifier.yml

- name: register jython script update notifier
  vars:
    name: "jsr223"
    type: "github"
    url: "https://github.com/openhab-scripters/openhab-helper-libraries"
    config: { 
      project: "openhab-scripters/openhab-helper-libraries", 
      version: "{{jython_script_version}}" 
    }
  import_tasks: roles/update_notifier/tasks/add_notifier.yml

- name: trigger service check handler
  vars:
    notify: "restart openhab"
    service: "openhab.service"
  import_tasks: roles/base/tasks/service_check.yml
