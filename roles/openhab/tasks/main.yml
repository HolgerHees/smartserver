- name: ensure user and group exists
  vars:
    user: { name: "openhab", system: true, home: "{{global_etc}}openhab" }
    group: { name: "openhab", system: true }
  include_tasks: roles/user/shared/add_system_user.yml

- name: set openhab version
  set_fact:
    openhab_version: "4.1.1"
    openhab_uid: "{{system_users['openhab'].id}}"
    openhab_user: "{{system_users['openhab'].name}}"
    openhab_gid: "{{system_groups['openhab'].id}}"
    openhab_group: "{{system_groups['openhab'].name}}"
#    openhab_user: "root"
#    openhab_group: "root"
  tags: [ 'update_notifier_config' ]

# temporary during upgrade from 3.3.0 => 3.4.0
- stat:
    path: "{{global_etc}}openhab/conf/icons"
  register: icons_link

# temporary during upgrade from 3.3.0 => 3.4.0
- name: remove symlink
  file:
    path: "{{global_etc}}openhab/conf/icons"
    state: absent
  when: "icons_link.stat.islnk is defined and icons_link.stat.islnk"

- name: prepare needed config folder
  file:
    path:  "{{item.path}}"
    state: directory
    owner: "{{item.user}}"
    group: "{{item.group}}"
    mode: 0750
  with_items:
    - { user: "{{openhab_user}}", group: "{{openhab_group}}", path: "{{global_etc}}openhab" }
    - { user: "{{openhab_user}}", group: "{{openhab_group}}", path: "{{global_etc}}openhab/addons" }
    - { user: "{{openhab_user}}", group: "{{openhab_group}}", path: "{{global_etc}}openhab/conf" }
    - { user: "{{openhab_user}}", group: "{{openhab_group}}", path: "{{global_etc}}openhab/conf/html" }
    - { user: "{{openhab_user}}", group: "{{openhab_group}}", path: "{{global_etc}}openhab/conf/icons" }
    - { user: "{{openhab_user}}", group: "{{openhab_group}}", path: "{{global_etc}}openhab/python" }
    - { user: "{{openhab_user}}", group: "{{openhab_group}}", path: "{{global_lib}}openhab" }
    - { user: "{{openhab_user}}", group: "{{openhab_group}}", path: "{{global_lib}}openhab/jsondb" }
    - { user: "{{openhab_user}}", group: "{{openhab_group}}", path: "{{global_lib}}openhab/persistance" }
    - { user: "{{openhab_user}}", group: "{{openhab_group}}", path: "{{global_log}}openhab" }
    - { user: "root", group: "root", path: "{{backup_path}}openhab" }
#    - "{{global_lib}}openhab/jsondb" # => for homeconnect oauth => 
# userdata/config/SymmetricKeyCipher.config

# ****** GITHUB SHARED PROJECT ******
- name: clone shared git
  vars:
    git_clone_name: "shared"
    git_clone_path: "{{projects_path}}openhab_shared"
    git_clone_url: "https://github.com/HolgerHees/openhab_shared.git"
    git_owner:  "{{openhab_user}}"
    git_group:  "{{openhab_group}}"
    git_mode:  "u=rwX,g=rX,o="
  include_tasks: roles/_shared/git_clone.yml

- name: set symbolic link to shared python scripts
  file:
    src: "{{projects_path}}openhab_shared/{{item}}"
    dest: "{{global_etc}}/openhab/{{item}}"
    state: link
    follow: no
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"  
  with_items:
    - "python/shared"
    - "conf/html/shared"
    - "conf/icons/classic"
#    - "conf/icons"

# ****** GITHUB CONFIG PROJECT ******
- name: clone config git
  vars:
    git_clone_name: "config"
    git_clone_path: "{{projects_path}}openhab_config"
    git_clone_url: "{{vault_openhab_config_git}}"
    git_owner:  "{{openhab_user}}"
    git_group:  "{{openhab_group}}"
    git_mode:  "u=rwX,g=rX,o="
  include_tasks: roles/_shared/git_clone.yml

# => custom python
- name: link custom python
  file:
    src: "{{projects_path}}openhab_config/python/custom"
    dest: "{{global_etc}}openhab/python/custom"
    state: link
    follow: no
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
  notify: "restart openhab"

# conf folder
- name: check conf folder
  shell: "ls -1 {{projects_path}}openhab_config/conf/"
  register: config_result
  changed_when: no
  
- name: link conf folder
  file:
    src: "{{projects_path}}openhab_config/conf/{{item}}"
    dest: "{{global_etc}}openhab/conf/{{item}}"
    state: link
    follow: no
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
  with_items: "{{config_result.stdout_lines | difference(['html','icons'])}}"
  notify: "restart openhab"

- name: copy conf folder
  file:
    src: "{{projects_path}}openhab_config/conf/{{item}}"
    dest: "{{global_etc}}openhab/conf/{{item}}"
    state: link
    follow: no
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
  with_items: "{{config_result.stdout_lines | difference(['html','icons'])}}"
  notify: "restart openhab"

# custom conf sub folder (html & icons)
- name: check custom html & icons conf folder
  shell: "ls -1 {{projects_path}}openhab_config/conf/{{item}}/"
  register: config_sub_folder_result
  changed_when: no
  when: "item in config_result.stdout_lines"
  with_items:
    - html
    - icons
    
- name: collect custom html & icons conf folder
  set_fact:
    config_sub_folders: |
      [
      {% for result in config_sub_folder_result.results %}
      {% if result.stdout_lines is defined %}
      {% for line in result.stdout_lines %}
      "{{result.item}}/{{line}}",
      {% endfor %}
      {% endif %}
      {% endfor %}
      ]
    
- name: link custom html & icons conf folder
  file:
    src: "{{projects_path}}openhab_config/conf/{{item}}"
    dest: "{{global_etc}}openhab/conf/{{item}}"
    state: link
    follow: no
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
  with_items: "{{config_sub_folders}}"
  notify: "restart openhab"

# create missing folder
- name: prepare missing config folder
  file:
    path:  "{{global_etc}}openhab{{item}}"
    state: directory
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    mode: 0750
  with_items:
    - /conf/automation
#    - /conf/html
#    - /conf/icons
    - /conf/items
    - /conf/persistence
    - /conf/rules
    - /conf/scripts
    - /conf/services
    - /conf/sitemaps
    - /conf/transform
    - /conf/things
  notify: "restart openhab"
    
# habpanel if exists
- name: check habpanel config
  shell: "ls {{projects_path}}openhab_config/habpanel_panelconfig.json"
  register: habpanel_result
  changed_when: no
  failed_when: no
  tags: [ 'apache_webui_config' ]
   
- name: synchronize habpanel config => habpanel_result.rc == 0
  synchronize:
    src: "{{projects_path}}openhab_config/habpanel_panelconfig.json"
    dest: "{{global_lib}}openhab/jsondb/uicomponents_habpanel_panelconfig.json"
    archive: no
    checksum: yes
    group: yes
    owner: yes
    perms: yes
    recursive: yes
    rsync_opts:
      - "--chown={{openhab_user}}:{{openhab_group}}"
      - "--chmod=F644"
  when: "habpanel_result.rc == 0"

# addons folder
- name: check addons folder
  shell: "ls -1 {{projects_path}}openhab_config/addons/"
  register: addons_result
  changed_when: no

- name: copy addons folder
  copy:
    src: "{{projects_path}}openhab_config/addons/{{item}}"
    dest: "{{global_etc}}openhab/addons/{{item}}"
    remote_src: yes
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    mode: 0640
  with_items: "{{addons_result.stdout_lines}}"
  
# SERVICES
- name: check service folder
  shell: "ls -1 {{projects_path}}openhab_config/templates/services/"
  register: services_result
  changed_when: no

# have to fetch files before, because ansible template module works only with local files
- name: prepare service configs
  synchronize:
    src: "{{projects_path}}openhab_config/templates/services"
    dest: "/tmp/ansible/openhab/"
    mode: "pull"
    archive: no
    checksum: yes
    rsync_opts:
      - "--chown=root:root"
      - "--chmod=D755,F644"
#    group: yes
#    owner: yes
#    perms: yes
    recursive: yes
  changed_when: no
  when: "services_result.rc == 0"

- name: copy service configs
  template:
    src: "/tmp/ansible/openhab/services/{{item}}"
    dest: "{{ global_etc }}openhab/conf/services/{{item}}"
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    mode: 0640
  with_items: "{{services_result.stdout_lines}}"
  notify: "restart openhab"

# THINGS
- name: check things folder
  shell: "ls -1 {{projects_path}}openhab_config/templates/things/"
  register: things_result
  changed_when: no

# have to fetch files before, because ansible template module works only with local files
- name: prepare things configs
  synchronize:
    src: "{{projects_path}}openhab_config/templates/things"
    dest: "/tmp/ansible/openhab/"
    mode: "pull"
    archive: no
    checksum: yes
    rsync_opts:
      - "--chown=root:root"
      - "--chmod=D755,F644"
#    group: yes
#    owner: yes
#    perms: yes
    recursive: yes
  changed_when: no
  when: "things_result.rc == 0"

- name: copy things configs
  template:
    src: "/tmp/ansible/openhab/things/{{item}}"
    dest: "{{ global_etc }}openhab/conf/things/{{item}}"
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    mode: 0640
  with_items: "{{things_result.stdout_lines}}"
  notify: "restart openhab"
  
# UDEV
- name: check udev folder
  shell: "ls -1 {{projects_path}}openhab_config/templates/udev/rules.d/"
  register: udev_result
  changed_when: no

# have to fetch files before, because ansible template module works only with local files
- name: prepare udev configs
  synchronize:
    src: "{{projects_path}}openhab_config/templates/udev/rules.d"
    dest: "/tmp/ansible/openhab/"
    mode: "pull"
    archive: no
    checksum: yes
    rsync_opts:
      - "--chown=root:root"
      - "--chmod=D755,F644"
#    group: yes
#    owner: yes
#    perms: yes
    recursive: yes
  changed_when: no
  when: "udev_result.rc == 0"

- name: copy udev rules
  template:
    src: "/tmp/ansible/openhab/rules.d/{{item}}"
    dest: "/etc/udev/rules.d/{{item}}"
    owner: root
    group: root
    mode: 0644
  register: udev_rules
  with_items: "{{udev_result.stdout_lines}}"
  notify: "restart openhab"

- name: reload udev rules
  shell: "udevadm control --reload-rules && udevadm trigger"
  when: udev_rules.changed

# CLEANUP  
- name: clean configs
  file:
    path: "/tmp/ansible/openhab/"
    state: absent
  changed_when: no
  
- name: copy python configuration
  template:
    src: "templates/python/configuration.py"
    dest: "{{global_etc}}openhab/python/configuration.py"
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    mode: 0640
  notify: "restart openhab"
  
- name: collect devices
  shell: "grep -P  \"^[^#]+$\" {{projects_path}}openhab_config/templates/udev/rules.d/*.rules | grep -oP \"SYMLINK\\+=\\\"\\K([^\\\"])+\""
  register: device_result
  changed_when: no
  failed_when: no
  
#- name:
#  debug:
#    msg: "{{device_result}}"

- name: prepare device javaopts
  set_fact:
    openhab_device_java_opts: "-Dgnu.io.rxtx.SerialPorts=/dev/{{device_result.stdout_lines | join(':/dev/')}}"
  when: "device_result.rc == 0"
  
- name: check if devices exists
  shell: "ls -al /dev/{{item}}"
  register: symlink_result
  changed_when: no
  failed_when: no
  with_items: "{{device_result.stdout_lines}}"
  when: "device_result.rc == 0"
  
- name: prepare device mounts
  set_fact:
    openhab_device_mounts: "{{openhab_device_mounts | default([]) + ['/dev/' + item.1 + ':/dev/' + item.1 + ':rwm']}}"
  with_indexed_items: "{{device_result.stdout_lines}}"
  when: "device_result.rc == 0 and symlink_result.results[item.0].rc == 0"
  
- name: build docker image
  vars:
    name: "openhab"
    image_name: "custom_openhab"
    image_version: "{{openhab_version}}"
    files:
      - roles/openhab/templates/container/Dockerfile
      - roles/openhab/templates/container/init.sh
  include_tasks: roles/container/shared/build_docker_image.yml

- name: check conf volumens
  shell: "ls -1 {{global_etc}}openhab/conf"
  register: conf_folder_result
  changed_when: no

- name: prepare volumes
  set_fact:
    openhab_volumes: |
      [
        '{{projects_path}}openhab_config:{{projects_path}}openhab_config:z',
        '{{projects_path}}openhab_shared:{{projects_path}}openhab_shared:z',
        '{{global_etc}}openhab/addons:/openhab/addons:z',
        '{{global_etc}}openhab/python:/openhab/python:z',
        '{{global_lib}}openhab/jsondb:/openhab/userdata/jsondb:z',
        '{{global_lib}}openhab/persistance:/openhab/userdata/persistence:z',
        '{{global_log}}openhab:/openhab/userdata/logs:z',
        {% for name in conf_folder_result.stdout_lines %}
            '{{global_etc}}openhab/conf/{{name}}:/openhab/conf/{{name}}:z',
        {% endfor %}
      ]

#- name: test
#  debug:
#    msg: "{{openhab_volumes}}"

- name: create docker container
  docker_container:
    name: openhab
    image: "custom_openhab:{{openhab_version}}"
    state: present
#    capabilities:
#      - NET_ADMIN
#      - NET_RAW
#    recreate: true
    env:
      TZ: "{{timezone}}"
      USER_ID: "{{openhab_uid}}"
      GROUP_ID: "{{openhab_gid}}"
      #CRYPTO_POLICY: "unlimited"
      EXTRA_JAVA_OPTS: "-Duser.timezone={{timezone}} {{openhab_device_java_opts | default('')}} -Dpython.path=/openhab/python/"
      EXTRA_SHELL_OPTS: "+x" # disable debug logs in entrypoint bash script
      #EXTRA_SHELL_OPTS: "-x"
      #EXTRA_SHELL_OPTS: "-v"
      OPENHAB_HTTP_ADDRESS: "127.0.0.1"
    log_driver: journald
    log_options:
      tag: openhab
    devices: "{{openhab_device_mounts | default([])}}"
    container_default_behavior: "compatibility"
    network_mode: "host"
    volumes: "{{openhab_volumes}}"
#      - '{{projects_path}}openhab_config:{{projects_path}}openhab_config:z'
#      - '{{projects_path}}openhab_shared:{{projects_path}}openhab_shared:z'
#      - '{{global_etc}}openhab/addons:/openhab/addons:z'
#      - '{{global_etc}}openhab/conf:/openhab/conf:z'
#      - '{{global_etc}}openhab/python:/openhab/python:z'
#      - '{{global_lib}}openhab/jsondb:/openhab/userdata/jsondb:z'
#      - '{{global_lib}}openhab/persistance:/openhab/userdata/persistence:z'
#      - '{{global_log}}openhab:/openhab/userdata/logs:z'

#    networks:
#      - name: "openhab"
#        ipv4_address: "{{docker_openhab_ip}}"
#    networks_cli_compatible: yes
#    sysctls:
#      "net.ipv4.conf.all.arp_accept": "1"
#      "net.ipv4.conf.all.proxy_arp": "1"
    exposed_ports:
      - "8080"  
      - "8443"  
      - "5007"  
      - "8101" 
  register: openhab_container_result 
  notify: "restart openhab"

- name: check ssh key
  shell: "ls /root/.ssh/known_hosts"
  register: ssh_key_result
  changed_when: no
  failed_when: no
  when: openhab_container_result.changed
   
- name: clean ssh key
  command: "ssh-keygen -R [openhab]:8101 -f /root/.ssh/known_hosts"
  when: "openhab_container_result.changed and ssh_key_result.rc == 0"

- name: add container name
  vars:
    host_name: "openhab"
    host_ip_address: "127.0.0.1"
  include_tasks: roles/_shared/add_to_hosts.yml

# ***** MYSQL DATABASE ****
- name: create database
  vars:
    database: "openhab"
    username: "{{vault_openhab_mysql_username}}"
    password: "{{vault_openhab_mysql_password}}"
    backup: yes
  include_tasks: roles/mysql/shared/add_database.yml
  when: "mysql_enabled"
    
# ***** INFLUXDB DATABASE ****
- name: create values database
  vars:
    database: "openhab"
    retentions:
      - { retention: "0" }
    backup: yes
  include_tasks: roles/influxdb/shared/add_bucket.yml
  when: "influxdb_enabled"

# ***** FINALIZE *****
- name: register prometheus rules & metrics
  vars:
    name: "openhab"
    #rule_file: "templates/prometheus/rule.yml"
    scrape_file: "templates/prometheus/scrape.yml"
  include_tasks: roles/prometheus/shared/add_config.yml
  when: "monitoring_enabled"

- name: register loki rules
  vars:
    name: "openhab"
    rules_file: "templates/etc/loki/rules.yaml"
  include_tasks: roles/loki/shared/add_config.yml
  when: "monitoring_enabled"

- name: register grafana configs
  vars:
    name: "openhab"
    datasources: 
      - "templates/grafana/datasources/openhab_influxdb.yaml"
      - "templates/grafana/datasources/openhab_mysql.yaml"
    dashboards:
      - "templates/grafana/dashboards/OpenHAB metrics.json"
  include_tasks: roles/grafana/shared/add_datasource.yml
  when: "grafana_enabled"

- name: register default webui
  vars:
    name: "openhab"
    js_file: "templates/webui/openhab.js"
    i18n_files: [ { language: "de", file: "templates/webui/openhab.de.json" } ]
    listener: { "sub_domain": "openhab", "prefix": "basicui", "js_file": "templates/webui/openhab.listener.js" }
    icons: [ 'templates/webui/icons/openhab_logo.svg', 'templates/webui/icons/openhab_basicui.svg', 'templates/webui/icons/openhab_adminui.svg', 'templates/webui/icons/openhab_habot.svg', 'templates/webui/icons/openhab_habpanel.svg' ]
  include_tasks: roles/apache_webui/shared/add_webui.yml

- name: register habpanel webui
  vars:
    name: "openhab_habpanel"
    js_file: "templates/webui/openhab_habpanel.js"
    i18n_files: [ { language: "de", file: "templates/webui/openhab_habpanel.de.json" } ]
  include_tasks: roles/apache_webui/shared/add_webui.yml
  when: "habpanel_result.rc == 0"

#- name: add admin web user
#  vars:
#    username: "{{vault_openhab_tablet_username}}"
#    password: "{{vault_openhab_tablet_password}}"
#    fullname: "Openhab Tablet User"
#    usergroups: []
#  include_tasks: roles/user/shared/add_web_user.yml
#  tags: [ 'user' ]

- name: copy apache vhost
  vars:
    sub_domain: "openhab"
    usergroup: "user"
#    additional_users:
#      - "{{vault_openhab_tablet_username}}"
    include: "templates/etc/apache2/_.ansible.vhost.d/openhab.inc"
  include_tasks: roles/apache/shared/add_vhost.yml

#- name: copy special vhosts
#  template:
#    src: "templates/etc/apache2/_.ansible.vhost.d/default-127.0.0.0-80-openhab.conf"
#    dest: "{{global_etc}}apache2/_.ansible.vhost.d/default-127.0.0.0-80-openhab.conf"
#    owner: root
#    group: root
#    mode: 0644
#  notify: "restart apache2"
#  tags: ['apache_config']

- name: create cleanup cron job
  vars:
    name: "Openhab Cleanup"
    cmd: "find {{backup_path}}openhab/ -mindepth 1  -type d -mtime +3 -exec rm -rf {} +;"
    file: "ansible_openhab"
    hour: "0"
    minute: "45"
  include_tasks: roles/cron/shared/add_cronjob.yml

- name: create backup cron job
  vars:
    name: "Openhab Backup"
    cmd: "cp -r {{global_lib}}openhab/persistance/mapdb/ {{backup_path}}openhab/mapdb_$(date +\\%Y-\\%m-\\%d)"
    file: "ansible_openhab"
    hour: "0"
    minute: "30"
  include_tasks: roles/cron/shared/add_cronjob.yml
  
- name: copy backup restore script
  template:
    src: "templates/backup_restore/openhab.sh"
    dest: "/opt/backup_restore/openhab.sh"
    owner: root
    group: root
    mode: 0750
  tags: ['backup_restore']

- name: copy fluentd config
  vars:
    config_file: "templates/etc/fluent/_.ansible.d/openhab.conf"
  include_tasks: roles/fluentd/shared/add_config.yml
  when: "monitoring_enabled"

- name: create systemd service
  vars:
    container_name: "openhab"
    container_after: [ "mysql", "influxdb", "mosquitto" ]
  include_tasks: roles/container/shared/add_docker_service.yml
  
- name: register openhab update notifier
  vars:
    name: "openhab"
    type: "docker"
    url: "https://github.com/openhab/openhab-distro/releases"
    config: {
      repository: "openhab/openhab",
      pattern: "^([0-9\\.]+)-debian$"
    }
  include_tasks: roles/update_service/shared/add_software.yml
  when: "update_service_software_check_enabled"

- name: trigger openhab handler
  vars:
    notify: "restart openhab"
    service: "openhab.service"
  include_tasks: roles/_shared/service_check.yml
