- name: set openhab version
  set_fact:
    openhab_version: "4.3.1"
  tags: [ 'update_notifier_config' ]

- name: "create user and group => user or group does not exists"
  vars:
    user: { name: "openhab", system: true, home: "{{global_etc}}openhab" }
    group: { name: "openhab", system: true }
  include_tasks: roles/user/shared/add_system_user.yml
  when: "'openhab' not in system_users or 'openhab' not in system_groups"

- name: prepare needed directories
  vars:
    directories:
      - { mode: "u=rwx,g=rx,o=", owner: "{{system_users['openhab'].name}}", group: "{{system_groups['openhab'].name}}", path: "{{global_etc}}openhab" }
      - { mode: "u=rwx,g=rx,o=", owner: "{{system_users['openhab'].name}}", group: "{{system_groups['openhab'].name}}", path: "{{global_etc}}openhab/addons" }
      - { mode: "u=rwx,g=rx,o=", owner: "{{system_users['openhab'].name}}", group: "{{system_groups['openhab'].name}}", path: "{{global_etc}}openhab/conf" }
      - { mode: "u=rwx,g=rx,o=", owner: "{{system_users['openhab'].name}}", group: "{{system_groups['openhab'].name}}", path: "{{global_etc}}openhab/python" }
      - { mode: "u=rwx,g=rx,o=", owner: "{{system_users['openhab'].name}}", group: "{{system_groups['openhab'].name}}", path: "{{global_etc}}openhab/cont-init.d" }
      - { mode: "u=rwx,g=rx,o=", owner: "{{system_users['openhab'].name}}", group: "{{system_groups['openhab'].name}}", path: "{{global_lib}}openhab" }
      - { mode: "u=rwx,g=rx,o=", owner: "{{system_users['openhab'].name}}", group: "{{system_groups['openhab'].name}}", path: "{{global_lib}}openhab/jsondb" }
      - { mode: "u=rwx,g=rx,o=", owner: "{{system_users['openhab'].name}}", group: "{{system_groups['openhab'].name}}", path: "{{global_lib}}openhab/config" }
      - { mode: "u=rwx,g=rx,o=", owner: "{{system_users['openhab'].name}}", group: "{{system_groups['openhab'].name}}", path: "{{global_lib}}openhab/persistance" }
      - { mode: "u=rwx,g=rx,o=", owner: "{{system_users['openhab'].name}}", group: "{{system_groups['openhab'].name}}", path: "{{global_lib}}openhab/homeconnectdirect" }
      - { mode: "u=rwx,g=rx,o=", owner: "{{system_users['openhab'].name}}", group: "{{system_groups['openhab'].name}}", path: "{{global_log}}openhab" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{database_backup_path}}openhab" }
  include_tasks: roles/_shared/create_directories.yml

# ****** GITHUB SHARED PROJECT ******
- name: clone shared git
  vars:
    git_clone_name: "shared"
    git_clone_path: "{{projects_path}}openhab_shared"
    git_clone_url: "https://github.com/HolgerHees/openhab_shared.git"
    git_owner:  "{{system_users['openhab'].name}}"
    git_group:  "{{system_groups['openhab'].name}}"
    git_mode:  "u=rwX,g=rX,o="
  include_tasks: roles/_shared/git_clone.yml

# ****** GITHUB CONFIG PROJECT ******
- name: clone config git
  vars:
    git_clone_name: "config"
    git_clone_path: "{{projects_path}}openhab_config"
    git_clone_url: "{{openhab_config_git}}"
    git_owner:  "{{system_users['openhab'].name}}"
    git_group:  "{{system_groups['openhab'].name}}"
    git_mode:  "u=rwX,g=rX,o="
  include_tasks: roles/_shared/git_clone.yml

# conf folder
- name: check custom conf folder
  shell: "ls -1 {{projects_path}}openhab_config/conf/"
  register: custom_result
  changed_when: no
  
- name: link custom conf folder
  file:
    src: "{{projects_path}}openhab_config/conf/{{item}}"
    dest: "{{global_etc}}openhab/conf/{{item}}"
    state: link
    follow: no
    owner: "{{system_users['openhab'].name}}"
    group: "{{system_groups['openhab'].name}}"
  with_items: "{{custom_result.stdout_lines}}"
  notify: "restart openhab"

- name: check custom conf folder
  shell: "find -L . -type d"
  args:
    chdir: "{{global_etc}}openhab/conf/"
  register: custom_result
  changed_when: no

- name: check custom conf folder
  shell: "find . -type d"
  args:
    chdir: "{{projects_path}}openhab_shared/conf/"
  register: shared_result
  changed_when: no

- name: collect shared conf folder
  set_fact:
    shared_link_folders: |
      [
        {% set ns = namespace(active_line = 'xxx') %}
        {% for line in shared_result.stdout_lines %}
          {% if line not in custom_result.stdout_lines and not line.startswith(ns.active_line) %}
              { "src": "{{projects_path}}openhab_shared/conf/{{line[2:]}}"                  , "dest": "{{global_etc}}openhab/conf/{{line[2:]}}" },
              {% set ns.active_line = line %}
          {% endif %}
        {% endfor %}
      ]

- name: link shared conf folder
  file:
    src: "{{item.src}}"
    dest: "{{item.dest}}"
    state: link
    follow: no
    owner: "{{system_users['openhab'].name}}"
    group: "{{system_groups['openhab'].name}}"
  with_items: "{{shared_link_folders}}"
  notify: "restart openhab"

# python folder
- name: check custom python folder
  shell: "ls -1 {{projects_path}}openhab_config/python/"
  register: custom_result
  changed_when: no

- name: link custom python folder
  file:
    src: "{{projects_path}}openhab_config/python/{{item}}"
    dest: "{{global_etc}}openhab/python/{{item}}"
    state: link
    follow: no
    owner: "{{system_users['openhab'].name}}"
    group: "{{system_groups['openhab'].name}}"
  with_items: "{{custom_result.stdout_lines}}"
  notify: "restart openhab"

- name: check custom python folder
  shell: "find -L . -type d"
  args:
    chdir: "{{global_etc}}openhab/python/"
  register: custom_result
  changed_when: no

- name: check custom python folder
  shell: "find . -type d"
  args:
    chdir: "{{projects_path}}openhab_shared/python/"
  register: shared_result
  changed_when: no

- name: collect shared python folder
  set_fact:
    shared_link_folders: |
      [
        {% set ns = namespace(active_line = 'xxx') %}
        {% for line in shared_result.stdout_lines %}
          {% if line not in custom_result.stdout_lines and not line.startswith(ns.active_line) %}
              { "src": "{{projects_path}}openhab_shared/python/{{line[2:]}}"                  , "dest": "{{global_etc}}openhab/python/{{line[2:]}}" },
              {% set ns.active_line = line %}
          {% endif %}
        {% endfor %}
      ]

- name: link shared python folder
  file:
    src: "{{item.src}}"
    dest: "{{item.dest}}"
    state: link
    follow: no
    owner: "{{system_users['openhab'].name}}"
    group: "{{system_groups['openhab'].name}}"
  with_items: "{{shared_link_folders}}"
  notify: "restart openhab"

# missing folder
- name: check conf folder
  shell: "ls -1 {{global_etc}}openhab/conf/"
  register: config_folder_result
  changed_when: no

- name: create missing folder
  file:
    path: "{{global_etc}}openhab/conf/{{item}}"
    state: directory
    follow: no
    owner: "{{system_users['openhab'].name}}"
    group: "{{system_groups['openhab'].name}}"
    mode: "u=rwx,g=rx,o="
  when: "item not in config_folder_result.stdout_lines"
  with_items:
      - "automation"
      - "html"
      - "icons"
      - "items"
      - "persistance"
      - "rules"
      - "scripts"
      - "services"
      - "sitemaps"
      - "things"
      - "transform"
  notify: "restart openhab"

# habpanel if exists
- name: check habpanel config
  shell: "ls {{projects_path}}openhab_config/jsondb/uicomponents_habpanel_panelconfig.json"
  register: habpanel_result
  changed_when: no
  failed_when: no
  tags: [ 'apache_webui_config' ]
   
- name: synchronize habpanel config => habpanel_result.rc == 0
  synchronize:
    src: "{{projects_path}}openhab_config/jsondb/uicomponents_habpanel_panelconfig.json"
    dest: "{{global_lib}}openhab/jsondb/uicomponents_habpanel_panelconfig.json"
    mode: "pull"
    archive: no
    checksum: yes
    group: yes
    owner: yes
    perms: yes
    recursive: yes
    rsync_opts:
      - "--chown={{system_users['openhab'].name}}:{{system_groups['openhab'].name}}"
      - "--chmod=F640"
  when: "habpanel_result.rc == 0"

# addons folder
- name: copy addons folder
  synchronize:
    src: "{{projects_path}}openhab_config/addons/"
    dest: "{{global_etc}}openhab/addons/"
    mode: "pull"
    archive: no
    checksum: yes
    rsync_opts:
      - "--chown={{system_users['openhab'].name}}:{{system_groups['openhab'].name}}"
      - "--chmod=D750,F640"
    recursive: yes

# SERVICES
# have to fetch files before, because ansible template module works only with local files
- name: prepare service configs
  synchronize:
    src: "{{projects_path}}openhab_config/templates/"
    dest: "/tmp/ansible/openhab/"
    mode: "pull"
    archive: no
    checksum: yes
    rsync_opts:
      - "--chown=root:root"
      - "--chmod=D755,F644"
    recursive: yes
  changed_when: no

- name: copy service configs
  template:
    src: "{{item}}"
    dest: "{{ global_etc }}openhab/conf/services/{{item | basename}}"
    owner: "{{system_users['openhab'].name}}"
    group: "{{system_groups['openhab'].name}}"
    mode: 0640
  with_fileglob: "/tmp/ansible/openhab/services/*"
  notify: "restart openhab"

# THINGS
- name: copy things configs
  template:
    src: "{{item}}"
    dest: "{{ global_etc }}openhab/conf/things/{{item | basename}}"
    owner: "{{system_users['openhab'].name}}"
    group: "{{system_groups['openhab'].name}}"
    mode: 0640
  with_fileglob: "/tmp/ansible/openhab/things/*"
  notify: "restart openhab"
  
# UDEV
- name: copy udev rules
  vars:
    udev_rules_path: "/tmp/ansible/openhab/udev/rules.d/"
    udev_rules_trigger: "restart openhab"
  include_tasks: roles/_shared/synchronize_udev_rules.yml

# CLEANUP  
- name: clean configs
  file:
    path: "/tmp/ansible/openhab/"
    state: absent
  changed_when: no
  
- name: copy python configuration
  template:
    src: "templates/python/configuration.py"
    dest: "{{item}}"
    owner: "{{system_users['openhab'].name}}"
    group: "{{system_groups['openhab'].name}}"
    mode: 0640
  with_items:
      - "{{global_etc}}openhab/python/configuration.py"
      - "{{global_etc}}openhab/conf/automation/python/lib"
  notify: "restart openhab"
  
- name: copy init.sh
  copy:
    src: "templates/init.sh"
    dest: "{{global_etc}}openhab/cont-init.d/init.sh"
    owner: "{{system_users['openhab'].name}}"
    group: "{{system_groups['openhab'].name}}"

- name: collect devices
  shell: "grep -P  \"^[^#]+$\" {{projects_path}}openhab_config/templates/udev/rules.d/*.rules | grep -oP \"SYMLINK\\+=\\\"\\K([^\\\"])+\""
  register: device_result
  changed_when: no
  failed_when: no
  
- name: prepare device javaopts
  set_fact:
    openhab_device_java_opts: "-Dgnu.io.rxtx.SerialPorts=/dev/{{device_result.stdout_lines | join(':/dev/')}}"
  when: "device_result.rc == 0"
  
- name: check if devices exists
  shell: "ls -al /dev/{{item}}"
  register: symlink_result
  changed_when: no
  failed_when: no
  with_items: "{{device_result.stdout_lines}}"
  when: "device_result.rc == 0"
  
- name: prepare device mounts
  set_fact:
    openhab_device_mounts: "{{openhab_device_mounts | default([]) + ['/dev/' + item.1 + ':/dev/' + item.1 + ':rwm']}}"
  with_indexed_items: "{{device_result.stdout_lines}}"
  when: "device_result.rc == 0 and symlink_result.results[item.0].rc == 0"
  
# conf volumens must be mounted seperatly, because openhab has problems internaly to follow symlinks
- name: check conf volumens
  shell: "ls -1 {{global_etc}}openhab/conf"
  register: conf_folder_result
  changed_when: no

- name: create container service
  vars:
    container_name: "openhab"
    container_image: "openhab/openhab:{{openhab_version}}-debian"
    container_network: "host"
    container_exposed_ports:
      - "8080"
      - "8443"
      - "5007"
      - "8101"
    container_no_healthcheck: yes # disable healthcheck, because systemd is watching processes. Sometimes the initialization takes so long that the health check thinks it is frozen and kills the container.
    container_env:
      USER_ID: "{{system_users['openhab'].id}}"
      GROUP_ID: "{{system_groups['openhab'].id}}"
      EXTRA_JAVA_OPTS: "-Duser.timezone={{timezone}} {{openhab_device_java_opts | default('')}} -Dpython.path=/openhab/python/"
      EXTRA_SHELL_OPTS: "+x" # disable debug logs in entrypoint bash script
      OPENHAB_HTTP_ADDRESS: "127.0.0.1"
      CRYPTO_POLICY: "unlimited"
#      OPENHAB_LOGDIR: "/openhab/logs"
    # all volumes needs to writeable, because openhab runs chown on OPENHAB_HOME
#    container_devices: "{{openhab_device_mounts | default([])}}"
    container_privileged: yes
    container_volumes: |
      [
        '/dev:/dev:rw',

        '{{projects_path}}openhab_config:{{projects_path}}openhab_config:rw',
        '{{projects_path}}openhab_shared:{{projects_path}}openhab_shared:rw',

        '{{global_etc}}openhab/cont-init.d:/etc/cont-init.d:rw',
        '{{global_etc}}openhab/addons:/openhab/addons:rw',
        '{{global_etc}}openhab/python:/openhab/python:rw',

        '{{global_lib}}openhab/config:/openhab/userdata/config:rw',
        '{{global_lib}}openhab/jsondb:/openhab/userdata/jsondb:rw',
        '{{global_lib}}openhab/homeconnectdirect:/openhab/userdata/homeconnectdirect:rw',
        '{{global_lib}}openhab/persistance:/openhab/userdata/persistence:rw',

        '{{global_log}}openhab:/openhab/userdata/logs:rw',

        {% for name in conf_folder_result.stdout_lines %}
            '{{global_etc}}openhab/conf/{{name}}:/openhab/conf/{{name}}:rw',
        {% endfor %}
      ]
#        '{{global_etc}}openhab/conf:/openhab/conf:rw',
    container_timeout_stop_sec: 60
    container_after: [ "mariadb", "influxdb", "mosquitto" ]
    container_readyness: { "type": "port_check", "ip": "127.0.0.1", "port": "8080" }
  include_tasks: roles/container/shared/create_podman_service.yml
  tags: ['podman_container','systemd_watcher_config','systemd_service_config']

- name: add service name
  vars:
    host_name: "openhab"
    host_ip_address: "127.0.0.1"
  include_tasks: roles/_shared/add_to_hosts.yml

# ***** DEPENDENCY CONFIGS *****
- name: check ssh key
  shell: "ls /root/.ssh/known_hosts"
  register: ssh_key_result
  changed_when: no
  failed_when: no
  when: "podman_service_container_changed"
   
- name: clean ssh key
  command: "ssh-keygen -R [openhab]:8101 -f /root/.ssh/known_hosts"
  when: "podman_service_container_changed and ssh_key_result.rc == 0"

# ***** MYSQL DATABASE ****
- name: create database
  vars:
    database: "openhab"
    username: "{{openhab_mariadb_username}}"
    password: "{{openhab_mariadb_password}}"
    backup: yes
  include_tasks: roles/mariadb/shared/add_database.yml
  tags: ['cron_job','backup_restore']
  when: "mariadb_enabled"
    
# ***** INFLUXDB DATABASE ****
- name: create values database
  vars:
    database: "openhab"
    retentions:
      - { retention: "0" }
    backup: yes
  include_tasks: roles/influxdb/shared/add_bucket.yml
  tags: ["cron_job", "backup_restore"]
  when: "influxdb_enabled"

# ***** FINALIZE *****
- name: register prometheus rules & metrics
  vars:
    name: "openhab"
    #rule_file: "templates/prometheus/rule.yml"
    scrape_file: "templates/prometheus/scrape.yml"
  include_tasks: roles/prometheus/shared/add_config.yml
  tags: ['prometheus_config']
  when: "monitoring_enabled"

- name: register loki rules
  vars:
    name: "openhab"
    rules_file: "templates/etc/loki/rules.yaml"
  include_tasks: roles/loki/shared/add_config.yml
  tags: ['loki_config']
  when: "monitoring_enabled"

- name: register grafana configs
  vars:
    name: "openhab"
    datasources: 
      - "templates/grafana/datasources/openhab_influxdb.yaml"
      - "templates/grafana/datasources/openhab_mariadb.yaml"
    dashboards:
      - "templates/grafana/dashboards/OpenHAB metrics.json"
  include_tasks: roles/grafana/shared/add_datasource.yml
  tags: ['grafana_config']
  when: "grafana_enabled"

- name: register default webui
  vars:
    name: "openhab"
    js_file: "templates/webui/openhab.js"
    i18n_files: [ { language: "de", file: "templates/webui/openhab.de.json" } ]
    icons: [ 'templates/webui/icons/openhab_logo.svg', 'templates/webui/icons/openhab_basicui.svg', 'templates/webui/icons/openhab_adminui.svg', 'templates/webui/icons/openhab_habot.svg', 'templates/webui/icons/openhab_habpanel.svg' ]
  include_tasks: roles/apache_webui/shared/add_webui.yml
  tags: ['apache_webui_config']

- name: register habpanel webui
  vars:
    name: "openhab_habpanel"
    js_file: "templates/webui/openhab_habpanel.js"
    i18n_files: [ { language: "de", file: "templates/webui/openhab_habpanel.de.json" } ]
  include_tasks: roles/apache_webui/shared/add_webui.yml
  when: "habpanel_result.rc == 0"
  tags: ['apache_webui_config']

- name: copy apache vhost
  vars:
    sub_domain: "openhab"
    usergroup: "user"
#    additional_users:
#      - "{{openhab_tablet_username}}"
    include: "templates/etc/apache2/_.ansible.vhost.d/openhab.inc"
  include_tasks: roles/apache/shared/add_vhost.yml
  tags: ['apache_config']

- name: create cleanup cron job
  vars:
    name: "Openhab Cleanup"
    cmd: "find {{database_backup_path}}openhab/ -mindepth 1  -type d -mtime +3 -exec rm -rf {} +;"
    group: "openhab"
    subgroup: "dump_cleanup"
    hour: "0"
    minute: "45"
  include_tasks: roles/cron/shared/add_cronjob.yml
  tags: ['cron_job']

- name: create backup cron job
  vars:
    name: "Openhab Backup"
    cmd: "cp -r {{global_lib}}openhab/persistance/mapdb/ {{database_backup_path}}openhab/mapdb_$(date +\\%Y-\\%m-\\%d)"
    group: "openhab"
    subgroup: "dump_mapdb"
    hour: "0"
    minute: "30"
  include_tasks: roles/cron/shared/add_cronjob.yml
  tags: ['cron_job']
  
- name: copy backup restore script
  template:
    src: "templates/restore/openhab.sh"
    dest: "{{database_backup_path}}openhab.sh"
    owner: root
    group: root
    mode: 0750
  tags: ['backup_restore']

- name: copy fluentd config
  vars:
    config_file: "templates/etc/fluent/_.ansible.d/openhab.conf"
  include_tasks: roles/fluentd/shared/add_config.yml
  tags: ['fluentd_config']
  when: "monitoring_enabled"

- name: register openhab update notifier
  vars:
    name: "openhab"
    type: "docker"
    url: "https://github.com/openhab/openhab-distro/releases"
    config: {
      repository: "openhab/openhab",
      pattern: "^([0-9\\.]+)-debian$"
    }
  include_tasks: roles/update_service/shared/add_software.yml
  tags: ['update_notifier_config']
  when: "update_service_software_check_enabled"
