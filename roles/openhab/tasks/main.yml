- name: set openhab version
  set_fact:
    openhab_version: "2.5.5"
    jython_version: "2.7.2"
    openhab_user: "9001"
    openhab_group: "9001"
#    openhab_user: "root"
#    openhab_group: "root"
    # stable version from 05.03.2020
    jython_script_version: "f09f63eba986833fead2c363bbd56e34106fed12"
  tags: [ 'update_notifier_configs' ]

- name: get gid from "dialout"
  shell: "getent group dialout | cut -d: -f3"
  register: group_dialout_id
  changed_when: no

- name: prepare needed folder
  file:
    path:  "{{item}}"
    state: directory
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    mode: 0750
  with_items:
    - "{{global_etc}}openhab"
    - "{{global_etc}}openhab/conf"
    - "{{global_etc}}openhab/runtime/lib/python"
    - "{{global_etc}}openhab/python"
    - "{{global_log}}openhab"
    - "{{global_lib}}openhab"

- name: collect devices
  shell: "grep -P  \"^[^#]+$\" /dataRaid/projects/openhab2/templates/udev/rules.d/*.rules | grep -oP \"SYMLINK\\+=\\\"\\K([^\\\"])+\""
  register: device_result
  changed_when: no
  failed_when: no
  
#- name:
#  debug:
#    msg: "{{device_result}}"

- name: prepare device javaopts
  set_fact:
    device_java_opts: "-Dgnu.io.rxtx.SerialPorts=/dev/{{device_result.stdout_lines | join(':/dev/')}}"
  when: "device_result.rc == 0"
  
- name: prepare device mounts
  set_fact:
    device_mounts: "{{device_mounts | default([]) + ['/dev/' + item + ':/dev/' + item + ':rwm']}}"
  with_items: "{{device_result.stdout_lines}}"
  when: "device_result.rc == 0"
  
#- name:
#  debug:
#    msg: "{{device_java_opts | default('')}}"

#- name:
#  debug:
#    msg: "{{device_mounts | default([])}}"

#- name: connect openhab with databases
#  docker_network:
#    name: openhab_databases
#    connected:
#      - mosquitto
#      - influxdb
#      - mysql
#    appends: yes
#  tags: ['mosquitto','influxdb','mysql']

- name: build docker image
  vars:
    name: "openhab"
    image_name: "custom_openhab"
    image_version: "{{openhab_version}}"
    files:
      - roles/openhab/templates/container/Dockerfile
      - roles/openhab/templates/container/init.sh
  import_tasks: roles/container/tasks/build_docker_image.yml

- name: create docker container
  docker_container:
    name: openhab
    image: "custom_openhab:{{openhab_version}}"
    state: present
#    capabilities:
#      - NET_ADMIN
#      - NET_RAW
#    recreate: true
    env:
      TZ: "{{timezone}}"
      USER_ID: "{{openhab_user}}"
      GROUP_ID: "{{openhab_group}}"
      #CRYPTO_POLICY: "unlimited"
      EXTRA_JAVA_OPTS: "-Duser.timezone={{timezone}} {{device_java_opts | default('')}} -Xbootclasspath/a:/openhab/runtime/lib/python/jython-standalone-{{jython_version}}.jar -Dpython.home=/openhab/runtime/lib/python/ -Dpython.path=/openhab/python/"
    network_mode: host
#    networks:
#      - name: "openhab_databases"
#    networks_cli_compatible: yes
    log_driver: journald
    log_options:
      tag: openhab
    volumes:
      - '{{projects_path}}openhab2:{{projects_path}}openhab2:z'
      - '{{global_etc}}openhab/addons:/openhab/addons:z'
      - '{{global_etc}}openhab/conf:/openhab/conf:z'
      - '{{global_etc}}openhab/python:/openhab/python:z'
      - '{{global_etc}}openhab/runtime/lib/python:/openhab/runtime/lib/python:z'
      - '{{global_log}}openhab:/openhab/userdata/logs:z'
      - '{{global_lib}}openhab:/openhab/userdata/persistence:z'
    devices: "{{device_mounts | default([])}}"
#    ports:
#     - "59080:8080"  
#     - "59443:8443"  
#     - "59007:5007"  
#     - "59101:8101"  
  notify: "restart openhab"

# ****** GITHUB CONFIG PROJECT ******
#- name: clone config git
#  git:
#    accept_hostkey: yes
#    repo: '{{vault_openhab_config_git}}'
#    dest: '{{projects_path}}openhab2'
#    version: "master"

- name: link configs
  file:
    src: "{{projects_path}}openhab2/{{item}}"
    dest: "{{global_etc}}openhab/{{item}}"
    state: link
    follow: no
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
  with_items:
    #- start.sh
    - addons
    - python/custom
  notify: "restart openhab"

- name: check config folder
  shell: "ls -1 {{projects_path}}openhab2/conf/"
  register: config_result
  changed_when: no

- name: link conf folder
  file:
    src: "{{projects_path}}openhab2/conf/{{item}}"
    dest: "{{global_etc}}openhab/conf/{{item}}"
    state: link
    follow: no
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
  with_items: "{{config_result.stdout_lines}}"
  notify: "restart openhab"

- name: prepare missing config folder
  file:
    path:  "{{global_etc}}openhab/conf/{{item}}"
    state: directory
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    mode: 0750
  with_items:
    - automation
    - html
    - icons
    - items
    - persistence
    - rules
    - scripts
    - services
    - sitemaps
    - transform
    - things
  notify: "restart openhab"
    
- name: copy habpanel config
  copy:
    src: "{{projects_path}}openhab2/habpanel.config"
    dest: "{{global_etc}}openhab/conf/habpanel.config"
    remote_src: yes
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    mode: 0640

- name: copy service configs
  template:
    src: "{{item}}"
    dest: "{{ global_etc }}openhab/conf/services/{{item|basename}}"
    remote_src: yes
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    mode: 0640
  with_fileglob: "{{projects_path}}openhab2/templates/services/*"
  notify: "restart openhab"

- name: copy things configs
  template:
    src: "{{item}}"
    dest: "{{ global_etc }}openhab/conf/things/{{item|basename}}"
    remote_src: yes
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    mode: 0640
  with_fileglob: "{{projects_path}}openhab2/templates/things/*"
  notify: "restart openhab"

# JYTHON
- name: check jython jar
  stat:
    path: "{{global_etc}}openhab/runtime/lib/python/jython-standalone-{{jython_version}}.jar"
  register: jython_jar_exists
  changed_when: "not jython_jar_exists.stat.exists"

- name: install jython jar
  get_url:
    url: "https://repo1.maven.org/maven2/org/python/jython-standalone/{{jython_version}}/jython-standalone-{{jython_version}}.jar"
    dest: "{{global_etc}}openhab/runtime/lib/python/jython-standalone-{{jython_version}}.jar"
  when: "not jython_jar_exists.stat.exists"

# JYTHON HELPER
- name: "clone jython helper git"
  git:
    repo: 'https://github.com/openhab-scripters/openhab-helper-libraries.git'
    dest: '{{global_build}}openhab-jython'
    version: '{{jython_script_version}}'

- name: copy jython helper classes
  copy:
    src: "{{global_build}}openhab-jython/Core/automation/lib/python/core"
    dest: "{{global_etc}}openhab/python/"
    remote_src: yes
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    mode: 0750
  notify: "restart openhab"

- name: copy jython helper configuration
  copy:
    src: "{{global_build}}openhab-jython/Core/automation/lib/python/configuration.py.example"
    dest: "{{global_etc}}openhab/python/configuration.py"
    remote_src: yes
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    mode: 0640
  notify: "restart openhab"
 
- name: copy udev rules
  template:
    src: "{{item}}"
    dest: "/etc/udev/rules.d/{{item|basename}}"
    remote_src: yes
    owner: root
    group: root
    mode: 0644
  register: udev_rules
  with_fileglob: "{{projects_path}}openhab2/templates/udev/rules.d/*"
  notify: "restart openhab"

- name: reload udev rules
  shell: "udevadm control --reload-rules && udevadm trigger"
  when: udev_rules.changed
 
- name: create systemd service
  vars:
    container_name: "openhab"
  import_tasks: roles/container/tasks/add_docker_service.yml
  
# ***** DATABASE ****
- name: check mysql service
  import_tasks: roles/mysql/tasks/wait_until_ready.yml
  
- name: check mysql databases
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e 'show databases;'\""
  register: mysql_data_exists
  changed_when: "'openhab' not in mysql_data_exists.stdout"

- name: create missing mysql databases => database does not exists
  shell: "docker exec mysql sh -c \"mysqladmin -u root -h 127.0.0.1 create openhab\""
  when: "'openhab' not in mysql_data_exists.stdout"

- name: create missing mysql user => database does not exists
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e \\\"CREATE USER IF NOT EXISTS '{{vault_openhab_mysql_username}}'@'%' IDENTIFIED BY '{{vault_openhab_mysql_password}}';\\\"\""
  when: "'openhab' not in mysql_data_exists.stdout"

- name: grant permissions to mysql user => database does not exists
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e \\\"GRANT ALL PRIVILEGES ON openhab.* TO '{{vault_openhab_mysql_username}}'@'%';\\\"\""
  when: "'openhab' not in mysql_data_exists.stdout"

- name: refresh mysql privileges => database does not exists
  shell: "docker exec mysql sh -c \"mysqladmin -u root -h 127.0.0.1 flush-privileges\""
  when: "'openhab' not in mysql_data_exists.stdout"
  
- name: check influxdb data
  stat:
    path: "{{ global_lib }}influxdb/data/openhab_db"
  register: influxdb_data_exists
  changed_when: not influxdb_data_exists.stat.exists
  
- name: check influxdb service => database does not exists
  import_tasks: roles/influxdb/tasks/wait_until_ready.yml
  when: "not influxdb_data_exists.stat.exists"

- name: create missing influx databases => database does not exists
  shell: "docker exec influxdb sh -c \"influx -execute 'CREATE DATABASE openhab_db'\""
  when: "not influxdb_data_exists.stat.exists"
  
- name: create missing influx openhab user => database does not exists
  shell: "docker exec influxdb sh -c \"influx -execute \\\"CREATE USER {{vault_openhab_influxdb_username}} WITH PASSWORD '{{vault_openhab_influxdb_password}}'\\\"\""
  when: "not influxdb_data_exists.stat.exists"
  
- name: grant permissions to influx openhab user => database does not exists
  shell: "docker exec influxdb sh -c \"influx -execute 'GRANT ALL ON openhab_db TO {{vault_openhab_influxdb_username}}'\""
  when: "not influxdb_data_exists.stat.exists"

- name: create missing influx grafana user => database does not exists
  shell: "docker exec influxdb sh -c \"influx -execute \\\"CREATE USER {{vault_grafana_influxdb_username}} WITH PASSWORD '{{vault_grafana_influxdb_password}}'\\\"\""
  when: "not influxdb_data_exists.stat.exists"

- name: grant permissions to influx openhab user => database does not exists
  shell: "docker exec influxdb sh -c \"influx -execute 'GRANT READ ON openhab_db TO {{vault_grafana_influxdb_username}}'\""
  when: "not influxdb_data_exists.stat.exists"

#- name: create retention policy
#  vars:
#    database: "openhab_db"
#  import_tasks: roles/influxdb/tasks/create_retention_policy.yml

# ***** FINALIZE *****
- name: create cron job
  vars:
    name: "MySQL Openhab Backup"
    cmd: "docker exec mysql sh -c \"/usr/bin/mysqldump openhab -h 127.0.0.1 | bzip2 -c > /var/lib/mysql_backup/openhab_$(date +\\%Y-\\%m-\\%d).sql.bz2\""
    file: "ansible_openhab"
    hour: "1"
    minute: "0"
  import_tasks: roles/cron/tasks/add_cronjob.yml

- name: create cron job
  vars:
    name: "Influxdb Openhab Backup"
    cmd: "docker exec influxdb sh -c \"influxd backup -database openhab_db /var/lib/influxdb_backup/openhab_db_$(date +\\%Y-\\%m-\\%d)/ > /dev/null\""
    file: "ansible_openhab"
    hour: "1"
    minute: "0"
  import_tasks: roles/cron/tasks/add_cronjob.yml

- name: register webui
  vars:
    name: "openhab"
    js_file: "templates/webui/openhab.js"
    i18n_files: [ { language: "de", file: "templates/webui/openhab.de.json" } ]
    listener: { "sub_domain": "openhab", "prefix": "basicui", "js_file": "templates/webui/openhab.listener.js" }
    icons: [ 'templates/webui/icons/openhab_logo.svg' ]
  import_tasks: roles/apache_webui/tasks/add_webui.yml

- name: copy apache vhost
  vars:
    sub_domain: "openhab"
    include: "templates/etc/apache2/_.ansible.vhost.d/openhab.inc"
  import_tasks: roles/apache/tasks/add_vhost.yml

- name: copy special vhosts
  template:
    src: "templates/etc/apache2/_.ansible.vhost.d/{{item}}"
    dest: "{{global_etc}}apache2/_.ansible.vhost.d/{{item}}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - default-openhab.conf
    - default-openhab-ssl.conf
  notify: "restart apache2"
  tags: ['apache_conf']

- name: copy fluentd config
  vars:
    config_file: "templates/etc/fluent/_.ansible.d/openhab.conf"
  import_tasks: roles/fluentd/tasks/add_config.yml

- name: register service watcher
  vars:
    name: "openhab"
  import_tasks: roles/systemd_watcher/tasks/add_watcher.yml

- name: register openhab update notifier
  vars:
    name: "openhab"
    type: "docker"
    url: "https://github.com/openhab/openhab-distro/release"
    config: {
      repository: "openhab/openhab",
      pattern: "^([0-9\\.]+)-debian$"
    }
  import_tasks: roles/update_notifier/tasks/add_notifier.yml

- name: register jython update notifier
  vars:
    name: "jython"
    type: "github"
    url: "https://www.jython.org/news"
    config: { 
      project: "jythontools/jython",
      pattern: "^v([0-9\\.]+)$",
      version: "v{{jython_version}}" 
    }
  import_tasks: roles/update_notifier/tasks/add_notifier.yml

- name: register jython script update notifier
  vars:
    name: "jsr223"
    type: "github"
    url: "https://github.com/openhab-scripters/openhab-helper-libraries"
    config: { 
      project: "openhab-scripters/openhab-helper-libraries", 
      version: "{{jython_script_version}}" 
    }
  import_tasks: roles/update_notifier/tasks/add_notifier.yml

- name: trigger openhab handler
  vars:
    notify: "restart openhab"
    service: "openhab.service"
  import_tasks: roles/base/tasks/service_check.yml
