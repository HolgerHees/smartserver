# ***** CHECK *****
- name: "wait to become ready"
  shell: "sshpass -v -p \"habopen\" ssh -o \"StrictHostKeyChecking no\" -p 8101 openhab@openhab \"users list\""
  register: check_result
  until: "'Password' in check_result.stderr and check_result.rc == 0"
  retries: 300
  delay: 1
  changed_when: "check_result.rc != 0"
  
# ***** CREATE USER *****
- name: check users
  shell: "sshpass -p \"habopen\" ssh -p 8101 openhab@openhab \"users list\""
  register: openhab_user_result
  changed_when: False
  tags: [ 'user' ]

- name: remove users with wrong roles
  shell: "sshpass -p \"habopen\" ssh -p 8101 openhab@openhab \"users remove {{item}}\""
  when: "'admin' in userdata[item].groups and item + ' (administrator)' not in openhab_user_result.stdout and item + ' (' in openhab_user_result.stdout"
  loop_control:
    label: "{{item}}"
  with_items: "{{userdata}}"
  tags: [ 'user' ]
  
- name: check users
  shell: "sshpass -p \"habopen\" ssh -p 8101 openhab@openhab \"users list\""
  register: openhab_user_result
  changed_when: False
  tags: [ 'user' ]

- name: add new user
  shell: "sshpass -p \"habopen\" ssh -p 8101 openhab@openhab \"users add {{item}} {{userdata[item].password}} {{'administrator' if 'admin' in userdata[item].groups else 'user'}}\""
  when: "item not in openhab_user_result.stdout"
  loop_control:
    label: "{{item}}"
  with_items: "{{userdata}}"
  tags: [ 'user' ]

- name: update user password
  shell: "sshpass -p \"habopen\" ssh -p 8101 openhab@openhab \"users password {{item}} {{userdata[item].password}}\""
  when: "item in openhab_user_result.stdout"
  loop_control:
    label: "{{item}}"
  with_items: "{{userdata}}"
  changed_when: False
  tags: [ 'user' ]
 
- name: set additional configs
  shell: "sshpass -p \"habopen\" ssh -p 8101 openhab@openhab \"{{item}}\""
  with_items:
    - "log:set DEBUG jsr223.jython"
  changed_when: False


