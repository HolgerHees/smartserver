#!/usr/bin/python3

import subprocess
import json
import re
import sys

def execCommand(cmd, cwd=None ):
    return subprocess.run([ cmd ], shell=True, check=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=cwd )
 
ipList = execCommand("ip a").stdout.decode("utf-8")

# get networks attached to container
containerResult = execCommand("docker inspect --format='{{json .NetworkSettings.Networks}}' openhab")
containerJson = json.loads(containerResult.stdout.decode("utf-8"))

# inspect attached networks
networkResult = execCommand("docker network inspect {}".format(" ".join(list(containerJson.keys()))))
networkJson = json.loads(networkResult.stdout.decode("utf-8"))
#for network in networkJson:
#    gateway = network['IPAM']['Config'][0]['Gateway']
#    bridgeInfo = re.findall("^.*{}.*".format(gateway), ipList, flags=re.MULTILINE)[0].split()[-1]
#    print(gateway)
#    print(bridgeInfo)

# get gateway from first network
gateway = networkJson[0]['IPAM']['Config'][0]['Gateway']
bridgeInfo = re.findall("^.*{}.*".format(gateway), ipList, flags=re.MULTILINE)[0].split()[-1]

# enable arp proxy to allow arping
sysctlResult = execCommand("sysctl -w net.ipv4.conf.{}.proxy_arp=1".format(bridgeInfo)).stdout.decode("utf-8").strip()
if sysctlResult != "net.ipv4.conf.{}.proxy_arp = 1".format(bridgeInfo):
    print("SysCtl: '{}'".format(sysctlResult), file=sys.stderr)
    print("Gateway: {}".format(gateway), file=sys.stderr)
    print("Bridge: {}".format(bridgeInfo), file=sys.stderr)
    raise Exception("sysctl not successful")


