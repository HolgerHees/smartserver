- name: set version
  set_fact:
    rclone_version: "1.52.0"
  tags: [ 'update_notifier_configs' ]
  
# check early to give some time to be active and connected
- name: check openvpn@cloud service
  import_tasks: roles/openvpn_cloud/tasks/wait_until_ready.yml
  when: "is_production|bool"

# FOLDER
- name: prepare needed cloud folder
  file:
    path: '{{item}}'
    state: directory
  with_items:
    - "{{cloud_backup_source_path}}"
    - "{{cloud_backup_target_path}}"  
  
- name: set backup links
  file:
    src: "{{item.src}}"
    dest: "{{cloud_backup_source_path}}{{item.name}}"
    state: link
    follow: no
    owner: root
    group: root
  with_items:
    - {name: 'archive', src: '{{local_backup_path}}archive'}
    - {name: 'nextcloud', src: '{{nextcloud_data_path}}'}
    - {name: 'mysql', src: '{{local_backup_path}}mysql'}
    - {name: '{{ansible_project_name}}', src: '{{projects_path}}{{ansible_project_name}}'}
    
# RCLONE
- name: install archive
  unarchive:
    src: "https://downloads.rclone.org/v{{rclone_version}}/rclone-v{{rclone_version}}-linux-amd64.zip"
    dest: "/opt/"
    creates: "/opt/rclone-v{{rclone_version}}-linux-amd64"
    remote_src: yes
    owner: "root"
    group: "root"
    mode: 0750

- name: set symbolic link
  file:
    src: "/opt/rclone-v{{rclone_version}}-linux-amd64"
    dest: "/opt/rclone"
    state: link
    follow: no
    owner: "root"
    group: "root"
    
- name: check for vault keys
  stat:
    path: "/opt/rclone/rclone.config"
  register: rclone_config_file
  
- name: copy config
  template:
    src: "templates/rclone.config"
    dest: "/opt/rclone/rclone.config"
  when: "not rclone_config_file.stat.exists"
    
- name: set password
  shell: "/opt/rclone/rclone --obscure --config=/opt/rclone/rclone.config config update backup password \"{{vault_cloudsync_password}}\""
  when: "not rclone_config_file.stat.exists"

- name: prepare sync cmd
  set_fact:
    sync_cmd: "/usr/bin/flock -n {{global_tmp}}cloudbackup.lock /opt/rclone/rclone -v --copy-links --config=/opt/rclone/rclone.config --crypt-remote={{cloud_backup_target_path}}backup sync {{cloud_backup_source_path}} backup:"
    
#- name: show sync_cmd
#  debug:
#    msg: "{{sync_cmd}}"
    
# FINALIZE  
- name: create cron job => is_production
  vars:
    name: "RClone"
    cmd: "( mountpoint -q {{cloud_backup_target_path}} && {{sync_cmd}} ) || ((>&2 echo \"{{cloud_backup_target_path}} not mounted\"); exit 1)"
    file: "ansible_cloudbackup"
    hour: "2"
    minute: "0"
  import_tasks: roles/cron/tasks/add_cronjob.yml
  when: "is_production|bool"

- name: register update notifier
  vars:
    name: "rclone"
    type: "github"
    url: "https://rclone.org/changelog/"
    config: { 
      project: "rclone/rclone", 
      pattern: "^v([0-9\\.]+)$",
      version: "v{{rclone_version}}" 
    }
  import_tasks: roles/update_notifier/tasks/add_notifier.yml

- name: test reachability of {{cloud_vpn_endpoint_slave}}
  wait_for: timeout=120 port=2049 host="{{cloud_vpn_endpoint_slave}}"
  register: server_reachability
  failed_when: no
  when: "is_production|bool"

- name: mount cloud data folder => is_production
  mount:
    name: "{{cloud_backup_target_path}}"
    src: "{{cloud_vpn_endpoint_slave}}:{{vault_vpn_cloud_remote_export_path}}"
    fstype: nfs
    opts: "rw,noauto,rsize=8192,wsize=8192"
    state: mounted
  when: "is_production|bool and server_reachability.state is not undefined and server_reachability.state == 'started'"

