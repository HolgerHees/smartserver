- name: set version
  set_fact:
    mysql_version: "10.11.9"
  tags: [ 'update_notifier_config' ]
  
- name: "create user and group => user or group does not exists"
  vars:
    user: { name: "mysql", system: true, home: "{{ global_etc }}mysql" }
    group: { name: "mysql", system: true }
  include_tasks: roles/user/shared/add_system_user.yml
  when: "'mysql' not in system_users or 'mysql' not in system_groups"

- name: prepare needed directories
  vars:
    directories:
      - { mode: "u=rwx,g=rx,o=", owner: "{{system_users['mysql'].name}}", group: "{{system_groups['mysql'].name}}", path: "{{ global_etc }}mysql" }
      - { mode: "u=rwx,g=rx,o=", owner: "{{system_users['mysql'].name}}", group: "{{system_groups['mysql'].name}}", path: "{{ global_lib }}mysql" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{database_backup_path}}mysql" }
  include_tasks: roles/_shared/create_directories.yml

- name: synchronize config
  synchronize:
    src: "templates/etc/mysql/"
    dest: "{{ global_etc }}mysql/"
    archive: no
    checksum: yes
    group: yes
    owner: yes
    perms: yes
    recursive: yes
    rsync_opts:
      - "--chown={{system_users['mysql'].name}}:{{system_groups['mysql'].name}}"
      - "--chmod=D750,F640"
  notify: "restart mysql"

- name: create podman container
  containers.podman.podman_container:
    name: mysql
    image: "mariadb:{{mysql_version}}"
    state: present
    security_opt:
      - label=disable
#    recreate: yes
#    command: "--innodb-read-only-compressed=OFF" # => FIX for nextcloud, https://github.com/nextcloud/docker/issues/1492
    user: "{{system_users['mysql'].id}}:{{system_groups['mysql'].id}}"
    # !!! DISABLED HEALTHCHECK => see pihole healthcheck
    #healthcheck: "healthcheck.sh --connect --innodb_initialized"
    #health_startup_cmd: "healthcheck.sh --connect --innodb_initialized"
    #health_startup_interval: "1s"
    #health_startup_timeout: "30s"
    #healthcheck_start_period: 10s
    #healthcheck_interval: 30s
    #healthcheck_retries: 3
    #healthcheck_timeout: 10s
    env:
      MYSQL_ROOT_HOST: "%"
      MYSQL_ROOT_PASSWORD: ""
      MYSQL_ALLOW_EMPTY_PASSWORD: "true"
      TZ: "{{timezone}}"
    log_driver: journald
    log_options:
      tag: mysql
    volumes:
      - '{{ global_etc }}mysql:/etc/mysql'
      - '{{ global_lib }}mysql:/var/lib/mysql'
    network: "isolated"
    ip: "{{podman_mysql_ip}}"
    exposed_ports:
      - "3306"  
  register: "podman_container_state"
  notify: "restart mysql"

# ***** SERVICE CONFIGS *****
- name: handle systemd service
  vars:
    container_name: "mysql"
    container_ip: "{{podman_mysql_ip}}"
    container_readyness: { "type": "container_exec", "cmd": "mysqladmin ping -h 127.0.0.1 --silent" }
    container_changed: "{{podman_container_state.changed}}"
  include_tasks: roles/container/shared/handle_podman_service.yml
  tags: ['systemd_watcher_config','systemd_service_config']

- name: add service name
  vars:
    host_name: "mysql"
    host_ip_address: "{{podman_mysql_ip}}"
  include_tasks: roles/_shared/add_to_hosts.yml

# ***** DEPENDENCY CONFIGS *****
- name: create cron job
  vars:
    name: "MySQL Clean Backup"
    cmd: "find {{database_backup_path}}mysql/ -name \"*.sql.bz2\" -mtime +30 -exec rm {} +"
    group: "mysql"
    log: "dump_cleanup"
    hour: "0"
    minute: "45"
  include_tasks: roles/cron/shared/add_cronjob.yml
  tags: ['cron_job']

- name: create cron job
  vars:
    name: "MySQL Core Backup"
    cmd: "set -o pipefail && podman exec mysql sh -c \"/usr/bin/mysqldump mysql -u root --quick --single-transaction -h 127.0.0.1\" | bzip2 -c > {{database_backup_path}}mysql/mysql_$(date +\\%Y-\\%m-\\%d).sql.bz2"
    group: "mysql"
    log: "dump_mysql"
    hour: "1"
    minute: "0"
  include_tasks: roles/cron/shared/add_cronjob.yml
  tags: ['cron_job']

- name: copy fluentd config
  vars:
    config_file: "templates/etc/fluent/_.ansible.d/mysql.conf"
  include_tasks: roles/fluentd/shared/add_config.yml
  tags: ['fluentd_config']
  when: "monitoring_enabled"
    
- name: register update notifier
  vars:
    name: "mysql"
    type: "docker"
    url: "https://mariadb.com/kb/en/release-notes/"
    config: {
      repository: "mariadb",
      pattern: "^([0-9\\.]+)$"
    }
  include_tasks: roles/update_service/shared/add_software.yml
  tags: ['update_notifier_config']
  when: "update_service_software_check_enabled"

- name: check mysql service
  include_tasks: roles/mysql/shared/wait_until_ready.yml
  when: podman_container_state.changed

- name: check mysql upgrade
  shell: "podman exec mysql sh -c \"/usr/bin/mysql_upgrade\""
  when: podman_container_state.changed
  
# ***** SHARED DATABASE ****
- name: create database
  vars:
    database: "shared"
    username: "{{shared_mysql_username}}"
    password: "{{shared_mysql_password}}"
    backup: yes
  include_tasks: roles/mysql/shared/add_database.yml
  tags: ['cron_job','backup_restore']
  
- name: "check healthcheck user"
  shell: "podman exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e 'SELECT User FROM mysql.user'\""
  register: mysql_user_exists
  changed_when: "system_users['mysql'].name not in mysql_user_exists.stdout"

- name: "create healthcheck user => user does not exists"
  shell: "podman exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e \\\"CREATE USER IF NOT EXISTS '{{system_users['mysql'].name}}'@'%'\\\"\""
  when: "system_users['mysql'].name not in mysql_user_exists.stdout"

- name: "refresh privileges => user does not exists"
  shell: "podman exec mysql sh -c \"mysqladmin -u root -h 127.0.0.1 flush-privileges\""
  when: "system_users['mysql'].name not in mysql_user_exists.stdout"

#- name: "grant healthcheck user permissions => user does not exists"
#  shell: "podman exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e \\\"GRANT USAGE TO '{{system_users['mysql'].name}}'@'%';\\\"\""
#  when: "system_users['mysql'].name not in mysql_user_exists.stdout"
