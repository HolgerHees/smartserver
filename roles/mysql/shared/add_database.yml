- name: "mysql : add_database : check service"
  include_tasks: roles/mysql/shared/wait_until_ready.yml
  
- name: "mysql : add_database : check databases"
  shell: "podman exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e 'show databases;'\""
  register: mysql_database_exists
  changed_when: "database not in mysql_database_exists.stdout"

- name: "mysql : add_database : create missing databases => database does not exists"
  shell: "podman exec mysql sh -c \"mysqladmin -u root -h 127.0.0.1 create {{database}}\""
  when: "database not in mysql_database_exists.stdout"

- name: "mysql : add_database : create missing user => database does not exists"
  shell: "podman exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e \\\"CREATE USER IF NOT EXISTS '{{username}}'@'%' IDENTIFIED BY '{{password}}';\\\"\""
  when: "database not in mysql_database_exists.stdout"

- name: "mysql : add_database : grant permissions to user => database does not exists"
  shell: "podman exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e \\\"GRANT ALL PRIVILEGES ON {{database}}.* TO '{{username}}'@'%';\\\"\""
  when: "database not in mysql_database_exists.stdout"

- name: "mysql : add_database : refresh privileges => database does not exists"
  shell: "podman exec mysql sh -c \"mysqladmin -u root -h 127.0.0.1 flush-privileges\""
  when: "database not in mysql_database_exists.stdout"

- name: "mysql : add_database : create cron job"
  vars:
    name: "MySQL {{database | capitalize}} Backup"
    cmd: "set -o pipefail && podman exec mysql sh -c \"/usr/bin/mysqldump {{database}} -u root --quick --single-transaction -h 127.0.0.1\" | bzip2 -c > {{database_backup_path}}mysql/{{database}}_$(date +\\%Y-\\%m-\\%d).sql.bz2"
    group: "mysql"
    log: "dump_{{database}}"
    hour: "1"
    minute: "0"
  include_tasks: roles/cron/shared/add_cronjob.yml
  tags: ['cron_job']
  when: "backup"

- name: "mysql : add_database : register result state"
  set_fact:
    database_added: "{{ database not in mysql_database_exists.stdout }}"

- name: "mysql : add_database : copy backup restore script"
  template:
    src: "roles/mysql/templates/restore/mysql.sh"
    dest: "{{database_backup_path}}mysql_{{database}}.sh"
    owner: root
    group: root
    mode: 0750
  tags: ['backup_restore']
