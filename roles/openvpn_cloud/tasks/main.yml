- name: prepare needed cloud folder
  file:
    path: '{{item}}'
    state: directory
  with_items:
    - "{{cloud_mount_path}}"  

# **** CLOUD VPN SHARED KEY - check ****
- name: check shared key
  stat:
    path: /etc/openvpn/cloud_shared.key
  register: shared_key_file
  changed_when: not shared_key_file.stat.exists

- name: check for vault shared key file => is_production and shared_key_file does not exists
  stat:
    path: "{{config_path}}vault/openvpn/cloud_shared.key"
  register: shared_key_file_from_vault
  changed_when: shared_key_file_from_vault.stat.exists
  when: is_production and not shared_key_file.stat.exists

- name: decide to create or restore openvpn shared key
  set_fact: 
    openvpn_shared_key_mode: "{% if shared_key_file_from_vault.stat is defined and shared_key_file_from_vault.stat.exists %}vault{% elif not shared_key_file.stat.exists %}create{% endif %}"
  changed_when: not shared_key_file.stat.exists

# **** CLOUD VPN SHARED KEY - process ****
- name: generate shared key => openvpn_shared_key_mode == 'create'
  shell: "openvpn --genkey --secret /etc/openvpn/cloud_shared.key"
  notify: "restart openvpn@cloud"
  when: "openvpn_shared_key_mode == 'create'"
    
- name: copy shared keys => openvpn_shared_key_mode == 'vault'
  copy:
    src: "{{config_path}}vault/openvpn/cloud_shared.key"
    dest: "/etc/openvpn/cloud_shared.key"
    decrypt: yes
    owner: root
    group: root
    mode: 0600
  notify: "restart openvpn@cloud"
  when: "openvpn_shared_key_mode == 'vault'"

# **** CONFIGS ****
- name: copy config
  template:
    src: "templates/{{ 'cloud.conf' if vault_vpn_cloud_type == 'master' else 'cloud.remote.conf' }}"
    dest: "/etc/openvpn/cloud.conf"
    owner: root
    group: root
    mode: 0640
  notify: "restart openvpn@cloud"
  
- name: copy slave config => vault_vpn_cloud_type == 'master'
  template:
    src: "templates/cloud.remote.conf"
    dest: "/etc/openvpn/cloud.remove.conf"
    owner: root
    group: root
    mode: 0640
  when: "vault_vpn_cloud_type == 'master'"

- name: mount cloud data folder => is_production
  mount:
    name: "{{cloud_mount_path}}"
    src: "{{cloud_vpn_endpoint_slave}}:{{vault_vpn_cloud_remote_export_path}}"
    fstype: nfs
    opts: "rw,noauto,rsize=8192,wsize=8192"
    state: present
  when: "is_production|bool"

- name: set selinux cloud port configuration => is_fedora
  seport:
    ports: "{{vault_vpn_cloud_port}}"
    proto: tcp
    setype: openvpn_port_t
    state: present
  notify: "restart openvpn@cloud"
  when: is_fedora|bool

- name: allow openvpn.cloud service
  vars:
    name: "openvpn.cloud"
    rule: "proto tcp dport {{vault_vpn_cloud_port}}"
  import_tasks: roles/firewall/tasks/allow_service.yml
  tags: [ 'firewall_config' ]

# needs to be restarted to activate new firewalld rule
#- name: restarting ferm
#  systemd:
#    name: ferm
#    state: restarted
#  when: "firewall_allow_service_result.changed"

#- name: test reachability of {{cloud_vpn_endpoint_slave}}
#  wait_for: timeout=120 port=2049 host="{{cloud_vpn_endpoint_slave}}"
#  register: server_reachability
#  failed_when: no
#  when: "is_production|bool"

- name: register service watcher
  vars:
    name: "openvpn@cloud"
  import_tasks: roles/systemd_watcher/tasks/add_watcher.yml
  
- name: trigger openvpn@cloud handler
  vars:
    notify: "restart openvpn@cloud"
    service: "openvpn@cloud.service"
  import_tasks: roles/_shared/tasks/service_check.yml
