- name: set version
  set_fact:
    rclone_version: "1.57.0"
  tags: [ 'update_notifier_configs' ]
  
# FOLDER
- name: prepare needed cloud folder
  file:
    path: '{{item}}'
    state: directory
  with_items:
    - "{{global_lib}}cloud_backup"
    - "{{global_log}}cloud_backup"  
  
- name: set backup links
  file:
    src: "{{item.src}}"
    dest: "{{global_lib}}cloud_backup/{{item.name}}"
    state: link
    follow: no
    owner: root
    group: root
  with_items:
    - {name: 'archive', src: '{{backup_path}}archive'}
    - {name: 'nextcloud', src: '{{nextcloud_data_path}}'}
    - {name: 'mysql', src: '{{backup_path}}mysql'}
    - {name: 'potd', src: '{{htdocs_path}}img/potd'}
    - {name: '{{project_name}}', src: '{{projects_path}}{{project_name}}'}
    
# RCLONE
- name: install archive
  unarchive:
    src: "https://downloads.rclone.org/v{{rclone_version}}/rclone-v{{rclone_version}}-linux-amd64.zip"
    dest: "/opt/"
    creates: "/opt/rclone-v{{rclone_version}}-linux-amd64"
    remote_src: yes
    owner: "root"
    group: "root"
    mode: 0750

- name: set symbolic link
  file:
    src: "/opt/rclone-v{{rclone_version}}-linux-amd64"
    dest: "/opt/rclone"
    state: link
    follow: no
    owner: "root"
    group: "root"
    
- name: check for vault keys
  stat:
    path: "/opt/rclone/rclone.config"
  register: rclone_config_file
  
- name: copy config
  template:
    src: "templates/rclone.config"
    dest: "/opt/rclone/rclone.config"
    mode: 0600
  when: "not rclone_config_file.stat.exists"
    
- name: set password
  shell: "/opt/rclone/rclone --obscure --config=/opt/rclone/rclone.config config update backup password \"{{vault_cloudsync_password}}\""
  when: "not rclone_config_file.stat.exists"

- name: prepare sync cmd
  set_fact:
    cloudback_sync_cmd: "/usr/bin/flock -n {{global_tmp}}cloud_backup.lock /opt/rclone/rclone --log-file={{global_log}}cloud_backup/cloud_backup.log --log-level INFO --bwlimit \"02:00,30M 05:00,20M 06:00,5M 23:00,10M\" --copy-links --config=/opt/rclone/rclone.config --crypt-remote={{cloud_backup_sync_target_path}}backup sync {{global_lib}}cloud_backup backup:"
    
#- name: show sync_cmd
#  debug:
#    msg: "{{cloudback_sync_cmd}}"
    
# FINALIZE  
- name: create cron job => is_production
  vars:
    name: "RClone"
    cmd: "( mountpoint -q {{cloud_backup_sync_target_path}} && {{cloudback_sync_cmd}} ) || ((>&2 echo \"{{cloud_backup_sync_target_path}} not mounted\"); exit 1)"
    file: "ansible_cloud_backup"
    hour: "2"
    minute: "0"
  import_tasks: roles/cron/tasks/add_cronjob.yml
  when: "is_production|bool"
  
- name: set logrotate job
  vars:
    logrotate_path: "{{global_log}}cloud_backup/*.log"
  copy:
    content: "{{ lookup('template', 'templates/logrotate') }}"
    dest: "/etc/logrotate.d/ansible_cloud_backup"
    owner: root
    group: root
    mode: 0640

- name: register update notifier
  vars:
    name: "rclone"
    type: "github"
    url: "https://rclone.org/changelog/"
    config: { 
      project: "rclone/rclone", 
      pattern: "^v([0-9\\.]+)$",
      version: "v{{rclone_version}}" 
    }
  import_tasks: roles/update_notifier/tasks/add_notifier.yml
