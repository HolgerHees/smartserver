- name: prepare needed cloud folder
  file:
    path: '{{item}}'
    state: directory
  with_items:
    - "{{cloud_backup_source_path}}"
    - "{{cloud_backup_target_path}}"

- name: prepare needed log folder
  file:
    path: '{{global_log}}cloudsync/'
    state: directory
    owner: root
    group: root
    mode: 0750

# check early to give some time to be active and connected
- name: check openvpn@cloud service
  import_tasks: roles/openvpn_cloud/tasks/wait_until_ready.yml
  when: "is_production|bool"

- name: "clone git"
  git:
#    accept_hostkey: yes
    repo: 'https://github.com/HolgerHees/cloudsync.git'
    dest: '{{projects_path}}cloudsync'
    version: 'master'
  register: clone_status
 
- name: copy config
  template:
    src: "templates/cloudsync.config"
    dest: "{{projects_path}}cloudsync/config/cloudsync.config"
  
- name: install => clone_status
  shell: '/usr/bin/mvn clean install'
  args:
    chdir: '{{projects_path}}cloudsync'
  when: clone_status.changed
  
- name: set backup links
  file:
    src: "{{item.src}}"
    dest: "{{cloud_backup_source_path}}{{item.name}}"
    state: link
    follow: no
    owner: root
    group: root
  with_items:
    - {name: 'archive', src: '{{local_backup_path}}archive'}
    - {name: 'nextcloud', src: '{{nextcloud_data_path}}'}
    - {name: 'mysql', src: '{{local_backup_path}}mysql'}
    - {name: '{{ansible_project_name}}', src: '{{projects_path}}{{ansible_project_name}}'}
    
- name: create cron job => is_production
  vars:
    name: "Cloudsync"
    cmd: "( ( mountpoint -q {{cloud_backup_target_path}} && {{projects_path}}cloudsync/cloudsync.sh --backup {{cloud_backup_source_path}} --name {{server_name}} ) || ((>&2 echo \"{{cloud_backup_target_path}} not mounted\"); exit 1) )"
    file: "ansible_cloudsync"
    hour: "2"
    minute: "0"
  import_tasks: roles/cron/tasks/add_cronjob.yml
  when: "is_production|bool"

- name: test reachability of {{cloud_vpn_endpoint_slave}}
  wait_for: timeout=120 port=2049 host="{{cloud_vpn_endpoint_slave}}"
  register: server_reachability
  failed_when: no
  when: "is_production|bool"

- name: mount cloud data folder => is_production
  mount:
    name: "{{cloud_backup_target_path}}"
    src: "{{cloud_vpn_endpoint_slave}}:{{vault_vpn_cloud_remote_export_path}}"
    fstype: nfs
    opts: "rw,noauto,rsize=8192,wsize=8192"
    state: mounted
  when: "is_production|bool and server_reachability.state is not undefined and server_reachability.state == 'started'"

