import threading
import logging
import traceback
import time
import socket
import ipaddress
import re

import requests
import json

import schedule
import os
from datetime import datetime

from smartserver.confighelper import ConfigHelper

class Malware(threading.Thread):
    def __init__(self, config, influxdb):
        threading.Thread.__init__(self)

        self.is_running = False

        self.event = threading.Event()

        self.ipsum_url = "https://raw.githubusercontent.com/stamparm/ipsum/master/ipsum.txt"

        self.dump_list_path = "/var/lib/system_service/malware_list.json"

        self.list_version = 1

        self.valid_list_file = True
        self.valid_config_file = True

        self.ipsum_modified = None
        self.ipsum_map = None

        self.max_list_age = 60 * 60 * 24 * 7

    def start(self):
        self.is_running = True
        self._restore()

        schedule.every().day.at("05:00").do(self._fetch) # list is normally updated at 3am
        #influxdb.register(self.getMessurements)

        super().start()

    def terminate(self):
        self.is_running = False
        self.event.set()

    def run(self):
        logging.info("IP attack check started")
        try:
            if self.ipsum_map is None:
                self.ipsum_map = {}
                if self.valid_list_file:
                    self._fetch()

            while self.is_running:
                self.event.wait(60)

            logging.info("IP attack check  stopped")
        except Exception:
            logging.error(traceback.format_exc())
            self.is_running = False

    def _restore(self):
        self.valid_list_file, data = ConfigHelper.loadConfig(self.dump_list_path, self.list_version )
        if data is not None:
            self.ipsum_map = data["ipsum_map"]
            self.ipsum_modified = datetime.fromtimestamp(data["ipsum_modified"])
            logging.info("Loaded {} malware ip's".format(len(self.ipsum_map)))

    def _fetch(self):
        try:
            response = requests.get(self.ipsum_url)
            if response.status_code == 200:
                if len(response.content) > 0:
                    content = response.content.decode("utf-8")
                    ipsum_map = {}
                    ipsum_modified = None
                    for line in content.splitlines():
                        if len(line.strip()) == 0:
                            continue

                        if line.startswith("#"):
                            if line.startswith("# Last update: "):
                                datetime_str = line[15:]
                                ipsum_modified = datetime.strptime(datetime_str, '%a, %d %b %Y %H:%M:%S %z' )
                            continue

                        columns = re.split("\s+", line)
                        ipsum_map[columns[0]] = int(columns[1])
                    self.ipsum_map = ipsum_map
                    self.ipsum_modified = ipsum_modified

                    ConfigHelper.saveConfig(self.dump_list_path, self.list_version, { "ipsum_modified": datetime.timestamp(self.ipsum_modified), "ipsum_map": self.ipsum_map } )
                    logging.info("Saved {} malware ip's".format(len(self.ipsum_map)))
                else:
                    logging.error("Error fetching ipsum list. Got empty response")
            else:
                logging.error("Error fetching ipsum list. Got code: '{}' and repsonse: '{}'".format(response.status_code, response.content))

        except:
            logging.error("Error fetching ipsum list")
            logging.error(traceback.format_exc())
            return

    def check(self, ip, is_expected):
        _ip = ip.compressed
        if _ip in self.ipsum_map:
            if is_expected:
                return 1
            else:
                # minimum of 2 blacklists
                if self.ipsum_map[_ip] < 2:
                    return 0
                return 2

        return 0

    def getStateMetrics(self):
        return [
            "system_service_process{{type=\"malware\",}} {}".format("1" if self.is_running else "0"),
            "system_service_malware{{type=\"list_state\",}} {}".format(1 if ( self.ipsum_modified is not None and datetime.timestamp(self.ipsum_modified) > time.time() - self.max_list_age ) else 0),
            "system_service_malware{{type=\"list_last_modified\",}} {}".format(datetime.timestamp(self.ipsum_modified) if self.ipsum_modified is not None else 0),
            "system_service_malware{{type=\"list_entries\",}} {}".format(len(self.ipsum_map.keys())),
            "system_service_state{{type=\"malware_list_dump\",}} {}".format("1" if self.valid_list_file else "0"),
            "system_service_state{{type=\"malware_config_dump\",}} {}".format("1" if self.valid_config_file else "0")
        ]
