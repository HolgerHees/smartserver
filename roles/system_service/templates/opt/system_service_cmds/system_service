#!/usr/bin/python3

from flask import Flask, request, make_response
from flask_socketio import SocketIO, emit
from werkzeug.serving import WSGIRequestHandler

import logging
import sys
import json

from datetime import datetime

from smartserver.server import Server

from config import config

from lib.scanner.scanner import Scanner as NetworkScanner
from lib.netflow.processor import Processor as NetflowProcessor
from lib.speedtest.speedtest import Speedtest
from lib.fping.fping import FPing
from lib.info.info import Info
from lib.trafficblocker.trafficblocker import TrafficBlocker

from lib.malware import Malware
from lib.mqtt import MQTTHandler
from lib.influxdb import InfluxDB
from lib.scheduler import Scheduler
from lib.ipcache import IPCache


app = Flask(__name__ )
app.logger = logging.getLogger()
#app.config['SECRET_KEY'] = 'test!'
#socketio = SocketIO(app, async_mode="threading", logger=logging.getLogger(), cors_allowed_origins="*")
socketio = SocketIO(app, async_mode="threading", cors_allowed_origins="*")

class Handler(Server):
    def __init__(self):
        super().__init__("system_service")
        
        #self.startup_timestamp = round(datetime.now().timestamp(),3)
        
        self.mqtt = MQTTHandler(config)
        self.influxdb = InfluxDB(config)

        self.ipcache = IPCache(config)

        self.malware = Malware(config, self.influxdb)

        self.info = Info(config, self.ipcache)

        self.scanner = NetworkScanner(config, self, self.mqtt, self.influxdb )
        self.netflow = NetflowProcessor(config, self, self.influxdb, self.ipcache, self.malware )
        self.speedtest = Speedtest(config, self, self.mqtt, self.influxdb, self.info )
        self.fping = FPing(config, self, self.influxdb )

        self.trafficblocker = TrafficBlocker(config, self, self.influxdb, self.netflow, self.malware)

        self.scheduler = Scheduler()

    def getTrafficBlocker(self): # used by netflow
        return self.trafficblocker

    def start(self, callback):
        self.mqtt.start()
        self.influxdb.start()

        self.ipcache.start()

        self.malware.start()

        self.info.start()

        self.scanner.start()
        self.netflow.start()
        self.speedtest.start()
        self.fping.start()

        self.trafficblocker.start()

        self.scheduler.start()

        super().start(callback)

    def terminate(self):
        if self.scheduler:
            self.scheduler.terminate()

        if self.trafficblocker:
            self.trafficblocker.terminate()

        if self.fping:
            self.fping.terminate()
        if self.speedtest:
            self.speedtest.terminate()
        if self.netflow:
            self.netflow.terminate()
        if self.scanner:
            self.scanner.terminate()

        if self.info:
            self.info.terminate()

        if self.malware:
            self.malware.terminate()

        if self.ipcache:
            self.ipcache.terminate()

        if self.influxdb:
            self.influxdb.terminate()
        if self.mqtt:
            self.mqtt.terminate()

        super().terminate()
        
    def notifyNetworkData(self, changed_data, msg):
        logging.info("Emit changed network {}".format(msg))

        with app.app_context():
            socketio.emit('network_data', changed_data)
        #socketio.sleep(5)
        
    def emitNetworkData(self):
        [ data, msg ] = self.scanner.getWebSocketData();

        logging.info("Emit initial network {}".format(msg))

        data["root"] = self.scanner.getGatewayMAC()
        emit('network_data', data)

    def notifySpeedtestData(self):
        data = self.speedtest.getWebSocketData();

        logging.info("Emit changed speedtest {}".format(data))

        with app.app_context():
            socketio.emit('speedtest', data)
        #socketio.sleep(5)

    def emitSpeedtestData(self):
        data = self.speedtest.getWebSocketData();

        logging.info("Emit initial speedtest {}".format(data))

        emit('speedtest', data)

    def triggerSpeedtest(self):
        self.speedtest.triggerSpeedtest()

    def getStateMetrics(self):
        metrics = []
        metrics = metrics + self.scanner.getStateMetrics()
        metrics = metrics + self.netflow.getStateMetrics()
        metrics = metrics + self.speedtest.getStateMetrics()
        metrics = metrics + self.fping.getStateMetrics()

        metrics = metrics + self.info.getStateMetrics()

        metrics = metrics + self.malware.getStateMetrics()
        metrics = metrics + self.ipcache.getStateMetrics()

        metrics = metrics + self.influxdb.getStateMetrics()
        metrics = metrics + self.mqtt.getStateMetrics()

        metrics = metrics + self.scheduler.getStateMetrics()

        metrics = metrics + self.trafficblocker.getStateMetrics()

        return "{}\n".format( "\n".join(metrics) )

    def getConnectionState(self):
        if self.info.isConnectionOnline():
            if self.info.isDefaultConnection():
                return "default"
            else:
                return "fallback"
        else:
            return "unknown"

    def getWidgetState(self):
        result = {}
        result["wan_isp_state"] = "default" if self.info.isDefaultConnection() else "fallback"
        result["wan_online_state"] = "online" if self.info.isConnectionOnline() else "offline"
        result["traffic_states"] = self.netflow.getTrafficState()
        result["traffic_states"]["blocked"] = len(self.trafficblocker.getBlockedIPs())
        return json.dumps(result)

#@app.route('/state/', methods = ['POST'])
#def state():
#    pass

#https://github.com/miguelgrinberg/Flask-SocketIO/blob/main/example/app.py

@app.route('/widget_state/', methods = ['GET'])
def widget_state():
    return handler.getWidgetState()

@app.route('/wan_state/', methods = ['GET'])
def wan_state():
    return handler.getConnectionState()

@app.route('/metrics/', methods = ['GET'])
def metrics():
    #logging.info(request.headers.get('User-Agent'))
    #return handler.getStateMetrics( "Prometheus" in request.headers.get('User-Agent') )
    return handler.getStateMetrics()

@app.route('/triggerSpeedtest/', methods = ['GET'])
def speedtest():
    #logging.info(request.headers.get('User-Agent'))
    handler.triggerSpeedtest()
    return "ok"

@socketio.on_error_default
def on_error(e):
    logging.error(e)
    sys.excepthook(*sys.exc_info())

@socketio.on('connect')
def on_connect():
    logging.info("on_connect {}".format(request.sid))
    
@socketio.on('disconnect')
def on_disconnect():
    logging.info("on_disconnect {}".format(request.sid))
    
@socketio.on('call')
def on_call(type):
    logging.info("on_call {}".format(type))
    if type == "network_data":
        handler.emitNetworkData()
    elif type == "speedtest":
        handler.emitSpeedtestData()

if __name__ == '__main__':
    Server.initLogger(logging.INFO)

    handler = Handler()

    def handleServer():
        WSGIRequestHandler.protocol_version = "HTTP/1.1"
        socketio.run(app=app, use_reloader=False, host=config.service_ip, port=config.service_port)
        
    handler.start(handleServer)

