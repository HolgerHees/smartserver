#!/usr/bin/python3

from flask import Flask, request, make_response
from werkzeug.serving import WSGIRequestHandler

import logging
import json

from datetime import datetime

from smartserver.server import Server

from config import config
from lib.handler.arpscan import ArpScanner

from lib.handler.openwrt import OpenWRT
from lib.handler.librenms import LibreNMS
from lib.handler.portscan import PortScanner
from lib.handler.gateway import Gateway

from lib.handler.publish_mqtt import MQTTPublisher
from lib.handler.publish_influxdb import InfluxDBPublisher

from lib.dispatcher import Dispatcher
from lib.cache import Cache


class Handler(Server):
    def __init__(self):
        super().__init__("system_service")
        
        self.startup_timestamp = round(datetime.now().timestamp(),3)
        
        self.pipeline = []
        self.cache = Cache(config)

        self.dispatcher = Dispatcher(config, self.cache )
        
        self.dispatcher.register(ArpScanner(config, self.cache ))
        if len(config.openwrt_devices) > 0:
            self.dispatcher.register(OpenWRT(config, self.cache ))
        if config.librenms_token:
            self.dispatcher.register(LibreNMS(config, self.cache ))
        self.dispatcher.register(PortScanner(config, self.cache ))
        self.dispatcher.register(Gateway(config, self.cache ))
        self.dispatcher.register(MQTTPublisher(config, self.cache ))
        self.dispatcher.register(InfluxDBPublisher(config, self.cache ))
        
        self.dispatcher.start()
        
    def terminate(self):
        self.dispatcher.terminate()
        super().terminate()
        
    def getState(self):

        last_data_modified = {}
        last_data_modified["startup"] = self.startup_timestamp
        last_data_modified["groups"] = self.dispatcher.getLastGroupRefreshAsTimestamp()
        last_data_modified["devices"] = self.dispatcher.getLastDeviceRefreshAsTimestamp()
        last_data_modified["stats"] = self.dispatcher.getLastStatRefreshAsTimestamp()
        changed_data = {}
        
        force = "last_data_modified[startup]" not in request.form or float(request.form["last_data_modified[startup]"]) < last_data_modified["startup"]
                
        if force or "last_data_modified[groups]" not in request.form or float(request.form["last_data_modified[groups]"]) < last_data_modified["groups"]:
            changed_data["groups"] = self.dispatcher.getGroups()

        if force or "last_data_modified[devices]" not in request.form or float(request.form["last_data_modified[devices]"]) < last_data_modified["devices"]:
            changed_data["devices"] = self.dispatcher.getDevices()

        if force or "last_data_modified[stats]" not in request.form or float(request.form["last_data_modified[stats]"]) < last_data_modified["stats"]:
            changed_data["stats"] = self.dispatcher.getStats()

        result = { 
            "status": 0, 
            "last_data_modified": last_data_modified,
            "changed_data": changed_data
        }

        return json.dumps(result)
          
app = Flask(__name__)

@app.route('/state/', methods = ['POST'])
def refreshSoftwareVersionCheck():
    return handler.getState()

if __name__ == '__main__':
    Server.initLogger(logging.INFO)
    handler = Handler()

    def handleServer():
        WSGIRequestHandler.protocol_version = "HTTP/1.1"
        app.run(debug=False, use_reloader=False, threaded=True, host=config.service_ip, port=config.service_port)
        
    handler.start(handleServer)
