#!/usr/bin/python3

import logging
import sys
import json
from datetime import datetime

from smartserver.server import Server, serverWeb, serverSocket
from smartserver.scheduler import Scheduler

from lib.scanner.scanner import Scanner as NetworkScanner
from lib.speedtest.speedtest import Speedtest
from lib.fping.fping import FPing
from lib.info.info import Info

from lib.mqtt import MQTTHandler
from lib.influxdb import InfluxDB
from lib.ipcache import IPCache

from lib.trafficwatcher.trafficwatcher import TrafficWatcher

from config import config


class Handler(Server):
    def __init__(self):
        super().__init__("system_service", config.service_ip, config.service_port)
        
        #self.startup_timestamp = round(datetime.now().timestamp(),3)
        
        self.mqtt = MQTTHandler(config)
        self.influxdb = InfluxDB(config)

        self.ipcache = IPCache(config)

        self.info = Info(config, self.ipcache)

        self.scanner = NetworkScanner(config, self, self.mqtt, self.influxdb )
        self.speedtest = Speedtest(config, self, self.mqtt, self.influxdb, self.info )
        self.fping = FPing(config, self, self.influxdb )

        self.trafficwatcher = TrafficWatcher(config, self, self.influxdb, self.ipcache)

        self.scheduler = Scheduler("system_service")

        self.startup_timestamp = round(datetime.now().timestamp(),3)

    def start(self):
        self.mqtt.start()
        self.influxdb.start()

        self.ipcache.start()

        self.info.start()

        self.scanner.start()
        self.speedtest.start()
        self.fping.start()

        self.trafficwatcher.start()

        self.scheduler.start()

        super().start()

    def terminate(self):
        self.scheduler.terminate()

        self.trafficwatcher.terminate()

        self.fping.terminate()
        self.speedtest.terminate()
        self.scanner.terminate()

        self.info.terminate()

        self.ipcache.terminate()

        self.influxdb.terminate()
        self.mqtt.terminate()

        super().terminate()
        
    def notifyNetworkData(self, changed_data, msg):
        logging.info("Emit changed network {}".format(msg))
        self.emitSocketData('network_data', changed_data)
        
    def emitNetworkData(self):
        [ data, msg ] = self.scanner.getWebSocketData();
        logging.info("Emit initial network {}".format(msg))
        data["root"] = self.scanner.getGatewayMAC()
        self.emitSocketData('network_data', data)

    def notifySpeedtestData(self):
        data = self.speedtest.getWebSocketData();

        logging.info("Emit changed speedtest {}".format(data))
        self.emitSocketData('speedtest', data)

    def emitSpeedtestData(self):
        data = self.speedtest.getWebSocketData();

        logging.info("Emit initial speedtest {}".format(data))
        self.emitSocketData('speedtest', data)

    def triggerSpeedtest(self):
        self.speedtest.triggerSpeedtest()

    def getStateMetrics(self):
        metrics = []
        metrics += self.trafficwatcher.getStateMetrics()

        metrics += self.scanner.getStateMetrics()
        metrics += self.speedtest.getStateMetrics()
        metrics += self.fping.getStateMetrics()

        metrics += self.info.getStateMetrics()

        metrics += self.ipcache.getStateMetrics()

        metrics += self.influxdb.getStateMetrics()
        metrics += self.mqtt.getStateMetrics()

        metrics += self.scheduler.getStateMetrics()

        return "{}\n".format( "\n".join(metrics) )

    def getConnectionState(self):
        if self.info.isConnectionOnline():
            if self.info.isDefaultConnection():
                return "default"
            else:
                return "fallback"
        else:
            return "unknown"

    def getWidgetState(self):
        result = {}
        result["wan_isp_state"] = "default" if self.info.isDefaultConnection() else "fallback"
        result["wan_online_state"] = "online" if self.info.isConnectionOnline() else "offline"
        result["traffic_states"] = self.trafficwatcher.getTrafficStateSummery()
        result["traffic_states"]["blocked"] = len(self.trafficwatcher.getBlockedIPs())
        return json.dumps(result)

    def getObservedIPData(self):
        result = {
            "status": 0,
        }

        last_data_modified = {}
        last_data_modified["startup"] = self.startup_timestamp

        changed_data = {}
        changed_data["observed_ips"] = self.trafficwatcher.getObservedIPData()

        result["last_data_modified"] = last_data_modified
        result["changed_data"] = changed_data

        return json.dumps(result)

@serverWeb.route('/observed_ips/', methods = ['POST'])
def observed_ips():
    return handler.getObservedIPData()

@serverWeb.route('/widget_state/', methods = ['GET'])
def widget_state():
    return handler.getWidgetState()

@serverWeb.route('/wan_state/', methods = ['GET'])
def wan_state():
    return handler.getConnectionState()

@serverWeb.route('/metrics/', methods = ['GET'])
def metrics():
    #logging.info(request.headers.get('User-Agent'))
    #return handler.getStateMetrics( "Prometheus" in request.headers.get('User-Agent') )
    return handler.getStateMetrics()

@serverWeb.route('/triggerSpeedtest/', methods = ['GET'])
def speedtest():
    #logging.info(request.headers.get('User-Agent'))
    handler.triggerSpeedtest()
    return "ok"
    
@serverSocket.on('call')
def on_call(type):
    logging.info("on_call {}".format(type))
    if type == "network_data":
        handler.emitNetworkData()
    elif type == "speedtest":
        handler.emitSpeedtestData()

handler = Handler()
handler.start()

