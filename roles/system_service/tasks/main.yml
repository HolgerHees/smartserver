- name: prepare needed folder
  file:
    path: "{{item}}"
    state: directory
    owner: root
    group: root
    mode: 0750
  with_items:
    - "{{global_etc}}system_service/"
    - "{{global_etc}}system_service/config"

- name: synchronize service
  synchronize:
    src: "templates/opt/{{item.path}}"
    dest: "{{global_etc}}system_service/"
    archive: no
    checksum: yes
    group: yes
    owner: yes
    perms: yes
    recursive: yes
    rsync_opts:
      - "--chown=root:root"
      - "--chmod={{item.chmod}}"
  with_items:
    - { "chmod": "D750,F640", "path": "system_service_libs/" }
    - { "chmod": "D750,F750", "path": "system_service_cmds/" }
  notify: "restart system_service"

- name: copy service config
  template:
    src: "templates/config.py"
    dest: "{{global_etc}}system_service/config/config.py"
    owner: root
    group: root
    mode: 0750
  notify: "restart system_service"

- name: build docker image
  vars:
    name: "system_service"
    image_name: "custom_system_service"
    image_version: "{{alpine_version}}"
    files:
      - roles/system_service/templates/container/Dockerfile
      - roles/system_service/templates/container/entrypoint.sh
  import_tasks: roles/container/tasks/build_docker_image.yml

- name: create docker container
  docker_container:
    name: system_service
    image: "custom_system_service:{{alpine_version}}"
    state: present
#    recreate: true
    env:
      TZ: "{{timezone}}"
    log_driver: journald
    log_options:
      tag: system_service
    container_default_behavior: "compatibility"
    network_mode: "host"
    exposed_ports:
      - "8507"
      - "2055/udp"
    volumes:
      - '{{global_etc}}system_service/:/etc/system_service:ro,z'
      - '/opt/shared/python:/opt/shared/python:ro,z'
  notify: "restart system_service"

# ***** INFLUXDB DATABASE ****
- name: create database
  vars:
    database: "system_info"
    retentions: 
      - { retention: "14d" }
#      - { retention: "90d", name: "090d", interval: "5m", every: "6h" }
#      - { retention: "360d", name: "360d", interval: "15m", every: "12h" }
#      - { retention: "0", name: "999d", interval: "1h", every: "1d" }
    backup: yes
  import_tasks: roles/influxdb/tasks/add_bucket.yml

# ***** FINALIZE *****
- name: register prometheus metrics
  vars:
    name: "system_service"
    rules_file: "templates/prometheus/rules.yml"
    scrape_file: "templates/prometheus/scrape.yml"
  import_tasks: roles/prometheus/tasks/add_config.yml

- name: register grafana configs
  vars:
    name: "system_service"
    datasources: 
      - "templates/grafana/datasources/system_info_influxdb.yaml"
    dashboards:
      - "templates/grafana/dashboards/System Service Scanner.json"
  import_tasks: roles/grafana/tasks/add_datasource.yml

- name: register grafana configs
  vars:
    name: "system_service"
    datasources:
      - "templates/grafana/datasources/system_info_influxdb.yaml"
    dashboards:
      - "templates/grafana/dashboards/System Service Netflow.json"
  import_tasks: roles/grafana/tasks/add_datasource.yml
  when: "netflow_collector"

- name: synchronize webui
  synchronize:
    src: "templates/htdocs/system_service"
    dest: "{{htdocs_path}}"
    archive: no
    checksum: yes
    group: yes
    owner: yes
    perms: yes
    recursive: yes
    rsync_opts:
      - "--chown={{system_users['www'].name}}:{{system_groups['www'].name}}"
      - "--chmod=D755,F644"
  tags: ['apache_webui_page']

- name: register webui
  vars:
    name: "system_service"
    js_file: "templates/webui/system_service.js"
    i18n_files: [ { language: "de", file: "templates/webui/system_service.de.json" } ]
    icons: [ 'templates/webui/icons/system_service_logo.svg' ]
  import_tasks: roles/apache_webui/tasks/add_webui.yml
  
- name: copy apache api config
  vars:
    config_file: "templates/etc/apache2/_.ansible.conf.d/system_service.conf"
  import_tasks: roles/apache/tasks/add_config.yml

- name: copy fluentd config
  vars:
    config_file: "templates/etc/fluent/_.ansible.d/system_service.conf"
  import_tasks: roles/fluentd/tasks/add_config.yml

- name: register systemd service watcher
  vars:
    name: "system_service"
  import_tasks: roles/systemd_watcher/tasks/add_watcher.yml

- name: create systemd service
  vars:
    container_name: "system_service"
    container_after: [ "network-online.target", "mosquitto", "influxdb" ]
    container_wants: [ "network-online.target" ]
  import_tasks: roles/container/tasks/add_docker_service.yml

- name: trigger device_ping handler
  vars:
    notify: "restart system_service"
    service: "system_service.service"
  import_tasks: roles/_shared/tasks/service_check.yml

  
