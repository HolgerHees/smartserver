# set config path based on hostname
- name: set config path
  set_fact:
    config_path: "config/{{inventory_hostname}}/"
  tags: always

# load initial environment variables
- name: load env vars
  include_vars: "{{config_path}}env.yml"
  tags: always
  
- name: load vault vars
  include_vars: "{{config_path}}vault/vault.yml"
  tags: always

- name: check if vault is encrypted
  shell: "head -1 {{config_path}}vault/vault.yml | grep \"\\$ANSIBLE_VAULT\""
  changed_when: False
  failed_when: no
  register: "vault_check_result"

# detect main ip. must be specified in env.yml
- name: detect host ip address
  set_fact:
    host_ip: "{{ production_ip if production_ip in ansible_all_ipv4_addresses else ( staging_ip if staging_ip in ansible_all_ipv4_addresses else '' ) }}"
  tags: always
    
# check for a valid main ip
- name: check for valid ip
  assert:
    that: host_ip != ''
    msg: "No valid ip found. Allowed are: production ({{ production_ip if production_ip else 'disabled' }}), staging ({{ staging_ip if staging_ip else 'disabled' }})"
  tags: always

# set environment specific variables [pre]
- name: set env state vars
  set_fact:
    system_users: {}
    system_groups: {}

    has_encrypted_vault: "{{true if vault_check_result.rc == 0 else false}}"

    is_suse: "{{ansible_distribution == 'openSUSE Leap'}}"
    is_fedora: "{{ansible_distribution == 'Fedora'}}"
    is_rhel: "{{ansible_distribution == 'AlmaLinux'}}"
    is_ubuntu: "{{ansible_distribution == 'Ubuntu'}}"
    os_type: "{{ 'rhel' if ansible_distribution == 'AlmaLinux' else 'fedora' if ansible_distribution == 'Fedora' else 'ubuntu' if ansible_distribution == 'Ubuntu' else 'opensuse'}}"

    is_production: "{{host_ip == production_ip}}"

    default_server_ip:                 "{{ansible_default_ipv4['address']}}"
    default_server_gateway:            "{{ansible_default_ipv4['gateway'] }}"
    default_network_interface:         "{{ansible_default_ipv4['interface']}}"
    default_server_arpa:               "{{ansible_default_ipv4['address'] | ipaddr('revdns')}}"
    default_server_subnet:             "{{ansible_default_ipv4['address'].rsplit('.',1)[0]}}"
    default_server_network:            "{{( ( ansible_facts[ansible_default_ipv4['interface']]['ipv4']['network'] + '/' + ansible_facts[ansible_default_ipv4['interface']]['ipv4']['netmask'] ) | ipaddr('subnet') )}}"

    #host_server_arpa:                  "{{host_ip | ipaddr('revdns')}}"
    #host_server_subnet:                "{{host_ip.rsplit('.',1)[0]}}"
    host_server_network:               "{{( ( host_ip + '/' + ansible_facts[ansible_default_ipv4['interface']]['ipv4']['netmask'] ) | ipaddr('subnet') )}}"
  tags: always

# **** load initial environment variables ****
- name: load default vars
  include_vars: "config/default.yml"
  tags: always
  
- name: apply default vars
  set_fact:
    "{{item.name}}": "{{ item.default }}"
  when: "item.state in ['missing','default']"
  failed_when: "item.state  == 'missing'"
  ignore_errors: True
  register: check_result
  with_items:  |
    [
      {% for name, config in default_variables.items() %}
        { 'name': '{{name}}',
          'state':
          {% if name in vars %}
              'custom'
          {% else %}
              {% if ('optional' not in config or not config['optional']) %}
                  {% if 'default' in config %}
                      'default', 'default': {{config['default'] | to_json}}
                  {% else %}
                      'missing'
                  {% endif %}
              {% else %}
                  'not needed'
              {% endif %}
          {% endif %}
        },
      {% endfor %}
    ]

- name: check for missing variables
  assert:
    that: "check_result.failed is not defined or not check_result.failed"
    msg: "Some variables are not defined. Please check the 'config/default.yml' file and add the missing variables to your configuration."

- name: set ipv6 env state vars
  set_fact:
    default_server_ipv6:              "{{ansible_default_ipv6['address']}}"
    default_server_gateway_ipv6:      "{{ansible_default_ipv6['gateway']}}"
    default_server_network_ipv6:      "{{( ( ansible_default_ipv6['address'] + '/' + ansible_default_ipv6['prefix'] ) | ipaddr('subnet') )}}"
  when: "ipv6_enabled and 'address' in ansible_default_ipv6"

- name: collect intern_networks
  set_fact:
    intern_networks: "{{ [default_server_network] + ( [host_server_network] if default_server_network != host_server_network else [] ) }}"

- name: validate dhcp reservations
  include_tasks: "validate_dhcp_reservations.yml"
  tags: [ 'dnsmasq', "pihole" ]
  when: "dhcp_reservations | length > 0"

