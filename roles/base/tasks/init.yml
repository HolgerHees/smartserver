# set config path based on hostname
- name: set config path
  set_fact:
    config_path: "config/{{inventory_hostname}}/"
    before_var_keys: "{{vars.keys()}}"

# load initial environment variables
- name: load env vars
  include_vars: "{{config_path}}env.yml"

- name: check var keys
  set_fact:
    custom_var_keys: "{{ vars.keys() | difference(before_var_keys + ['config_path', 'before_var_keys']) }}"
    before_var_keys: "{{vars.keys()}}"

- name: load vault vars
  include_vars: "{{config_path}}vault/vault.yml"

- name: check if vault is encrypted
  shell: "head -1 {{config_path}}vault/vault.yml | grep \"\\$ANSIBLE_VAULT\""
  changed_when: False
  failed_when: no
  register: "vault_check_result"

# detect main ip. must be specified in env.yml
- name: detect host ip address
  set_fact:
    host_ip: "{{ production_ip if production_ip in ansible_all_ipv4_addresses else ( staging_ip if staging_ip in ansible_all_ipv4_addresses else '' ) }}"
    vault_var_keys: "{{ vars.keys() | difference(before_var_keys + ['custom_var_keys', 'vault_check_result']) }}"

# check for a valid main ip
- name: check for valid ip
  assert:
    that: host_ip != ''
    msg: "No valid ip found. Allowed are: production ({{ production_ip if production_ip else 'disabled' }}), staging ({{ staging_ip if staging_ip else 'disabled' }})"

- name: check for mdraid
  stat:
    path: "/etc/mdadm.conf"
  register: mdraid_check

# set environment specific variables [pre]
- name: set env state vars
  set_fact:
    system_users: {}
    system_groups: {}

    mdraid_exists: "{{mdraid_check.stat.exists}}"

    has_encrypted_vault: "{{true if vault_check_result.rc == 0 else false}}"

    is_suse: "{{ansible_distribution == 'openSUSE Leap'}}"
    is_fedora: "{{ansible_distribution == 'Fedora'}}"
    is_rhel: "{{ansible_distribution == 'AlmaLinux'}}"
    is_ubuntu: "{{ansible_distribution == 'Ubuntu'}}"
    os_type: "{{ 'rhel' if ansible_distribution == 'AlmaLinux' else 'fedora' if ansible_distribution == 'Fedora' else 'ubuntu' if ansible_distribution == 'Ubuntu' else 'opensuse'}}"

    is_production: "{{host_ip == production_ip}}"

    default_server_ip:                 "{{ansible_default_ipv4['address']}}"
    default_server_gateway:            "{{ansible_default_ipv4['gateway'] }}"
    default_network_interface:         "{{ansible_default_ipv4['interface']}}"
    default_server_arpa:               "{{ansible_default_ipv4['address'] | ipaddr('revdns')}}"
    default_server_subnet:             "{{ansible_default_ipv4['address'].rsplit('.',1)[0]}}"
    default_server_network:            "{{( ( ansible_facts[ansible_default_ipv4['interface']]['ipv4']['network'] + '/' + ansible_facts[ansible_default_ipv4['interface']]['ipv4']['netmask'] ) | ipaddr('subnet') )}}"

    #host_server_arpa:                  "{{host_ip | ipaddr('revdns')}}"
    #host_server_subnet:                "{{host_ip.rsplit('.',1)[0]}}"
    host_server_network:               "{{( ( host_ip + '/' + ansible_facts[ansible_default_ipv4['interface']]['ipv4']['netmask'] ) | ipaddr('subnet') )}}"

# **** load initial environment variables ****
- name: load default vars
  include_defaults:
    file: "config/default.yml"
    custom_var_keys: "{{custom_var_keys}}"
    vault_var_keys: "{{vault_var_keys}}"

#- name:
#  debug:
#    msg:
#      - "{{authenticated_ip_addresses}}"
#      - "{{userdata}}"

- name: check for parsing errors of 'config/default.yml'
  debug:
    msg: |
      {% if parser_errors | length > 0 %}
      [
        "The parse errors happens during loading of 'config/default.yml'",
        "",
        {% for parser_error in parser_errors %}
          "- {{parser_error}}",
        {% endfor %}
      ]
      {% else %}Config file successfully loaded{% endif %}
  failed_when: "parser_errors | length > 0"

- name: check for missing requirements
  debug:
    msg: |
      {% if parser_missing_requirements | length > 0 %}
      [
        "The following features have unfulfilled requirements",
        "",
        {% for missing_dependency in parser_missing_requirements %}
          "- '{{missing_dependency}}' requires ['{{ parser_missing_requirements[missing_dependency] | join(', ')}}']",
        {% endfor %}
      ]
      {% else %}All requirements fulfilled{% endif %}
  failed_when: "parser_missing_requirements | length > 0"

- name: check for missing mandatory variables in your {{config_path}}env.yml
  debug:
    msg: |
      {% if parser_missing_variables | length > 0 %}
      [
        "The following mandatory variables has to be defined",
        "",
        {% for missing_variable in parser_missing_variables %}
          "- '{{missing_variable}}' is missing",
        {% endfor %}
      ]
      {% else %}All mandatory variables are defined{% endif %}
  failed_when: "parser_missing_variables | length > 0"

- name: show defined variables
  debug:
    msg: |
      [
        {% if parser_vault_variables | length > 0 %}
        "VAULT VARIABLES ('{{config_path}}vault/vault.yml') - Should be used only in '{{config_path}}env.yml'",
        {% for row in ( parser_vault_variables | join(' - ') | wordwrap(120, false, '\n') | split('\n') ) %}
          "- {{row | regex_replace('^\s*-',' ') | regex_replace('-\s*$',' ') | trim()}}",
        {% endfor %}
        "",
        {% endif %}
        {% if parser_custom_variables | length > 0 %}
        "CUSTOM VARIABLES (Defined in '{{config_path}}env.yml') - Should be used in custom roles or openhab configurations",
        {% for row in ( parser_custom_variables | join(' - ') | wordwrap(120, false, '\n') | split('\n') ) %}
          "- {{row | regex_replace('^\s*-',' ') | regex_replace('-\s*$',' ') | trim()}}",
        {% endfor %}
        "",
        {% endif %}
        {% if parser_adjusted_variables | length > 0 %}
        "ADJUSTED DEFAULT VARIABLES (Defined in '{{config_path}}env.yml' or '{{config_path}}vault/vault.yml')",
        {% for row in ( parser_adjusted_variables | join(' - ') | wordwrap(120, false, '\n') | split('\n') ) %}
          "- {{row | regex_replace('^\s*-',' ') | regex_replace('-\s*$',' ') | trim()}}",
        {% endfor %}
        "",
        {% endif %}
        {% if parser_default_variables | length > 0 %}
        "PREDEFINED DEFAULT VARIABLES (Defined in 'config/default.yml')",
        {% for row in ( parser_default_variables | join(' - ') | wordwrap(120, false, '\n') | split('\n') ) %}
          "- {{row | regex_replace('^\s*-',' ') | regex_replace('-\s*$',' ') | trim()}}",
        {% endfor %}
        "",
        {% endif %}
        {% if parser_unneeded_variables | length > 0 %}
        "LEFTOVER VARIABLES (Related feature is not active, but the variable still exists in '{{config_path}}env.yml' and can be removed)",
        {% for row in ( parser_unneeded_variables | join(' - ') | wordwrap(120, false, '\n') | split('\n') ) %}
          "- {{row | regex_replace('^\s*-',' ') | regex_replace('-\s*$',' ') | trim()}}",
        {% endfor %}
        "",
        {% endif %}
        {% if parser_unused_variables | length > 0 %}
        "UNUSED DEFAULT VARIABLES (Related features are not active)",
        {% for row in ( parser_unused_variables | join(' - ') | wordwrap(120, false, '\n') | split('\n') ) %}
          "- {{row | regex_replace('^\s*-',' ') | regex_replace('-\s*$',' ') | trim()}}",
        {% endfor %}
        "",
        {% endif %}
      ]

- name: set ipv6 env state vars
  set_fact:
    default_server_ipv6:              "{{ansible_default_ipv6['address']}}"
    default_server_gateway_ipv6:      "{{ansible_default_ipv6['gateway']}}"
    default_server_network_ipv6:      "{{( ( ansible_default_ipv6['address'] + '/' + ansible_default_ipv6['prefix'] ) | ipaddr('subnet') )}}"
  when: "ipv6_enabled and 'address' in ansible_default_ipv6"

- name: fetch all user
  shell: "awk -F: '{ print $1 \":\" $3}' /etc/passwd"
  register: fetched_user
  changed_when: no

- name: fetch all groups
  shell: "awk -F: '{ print $1 \":\" $3}' /etc/group"
  register: fetched_groups
  changed_when: no

#- name:
#  debug:
#    msg:
#     - "{{fetched_user}}"
#     - "{{fetched_groups}}"

- name: collect intern_networks & nobody/nogroup user
  set_fact:
    system_users: |
      {
        {% for data in fetched_user.stdout_lines %}
          "{{ user_key_maps[data | split(':') | first] | default(data | split(':') | first) }}": { "name": "{{data | split(':') | first }}", "id": {{data | split(':') | last }} },
        {% endfor %}
      }
    system_groups: |
      {
        {% for data in fetched_groups.stdout_lines %}
          "{{ group_key_maps[data | split(':') | first] | default(data | split(':') | first) }}": { "name": "{{data | split(':') | first }}", "id": {{data | split(':') | last }} },
        {% endfor %}
      }
    intern_networks: |
        [
            "{{default_server_network}}",
            {% if default_server_network != host_server_network %}
                "{{host_server_network}}",
            {% endif %}
            {% for network in intern_networks %}
                "{{network}}",
            {% endfor %}
        ]
