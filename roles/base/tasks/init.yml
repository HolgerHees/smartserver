#- name: debug
#  debug: msg="{{ hostvars }}"
#  tags: always

#- name: read service facts
#  service_facts:
#  tags: always
      
# set config path based on hostname
- name: set config path
  set_fact:
    config_path: "config/{{inventory_hostname}}/"
  tags: always

# load initial environment variables
- name: load env vars
  include_vars: "{{config_path}}env.yml"
  tags: always
  
# detect main ip. must be specified in env.yml
- name: detect host ip address
  set_fact:
    host_ip: "{{ item }}"
  with_items: "{{ ansible_all_ipv4_addresses }}"
  when: "item == production_ip or item == staging_ip"
  tags: always
    
# check for a valid main ip
- assert:
    that: host_ip is defined
    msg: "No valid ip found. Allowed are: production ({{ production_ip if production_ip else 'disabled' }}), staging ({{ staging_ip if staging_ip else 'disabled' }})"
  tags: always

# set environment specific variables [pre]
- name: set env state vars
  set_fact:
    system_users: {}
    system_groups: {}
    is_suse: "{{ansible_distribution == 'openSUSE Leap'}}"
    is_fedora: "{{ansible_distribution == 'Fedora'}}"
    is_rhel: "{{ansible_distribution == 'AlmaLinux'}}"
    is_ubuntu: "{{ansible_distribution == 'Ubuntu'}}"
    os_type: "{{ 'rhel' if ansible_distribution == 'AlmaLinux' else 'fedora' if ansible_distribution == 'Fedora' else 'ubuntu' if ansible_distribution == 'Ubuntu' else 'opensuse'}}"

    is_production: "{{host_ip == production_ip}}"

    default_network_interface: "{{ansible_default_ipv4['interface']}}"

#    ansible_remote_ip: "{{ ansible_ssh_host if ansible_ssh_host != '127.0.0.1' else host_ip }}"
    default_server_ip: "{{ansible_default_ipv4['address']}}"
    default_server_gateway: "{{ ansible_default_ipv4['gateway'] }}"

#- name: debug
#  debug:
#    msg: "{{ansible_default_ipv4['network'] | ansible.utils.ipaddr('net') }}"

#- name: detect network interface
#  #shell: "ip a | grep -P \"inet {{host_ip}}\" | grep -Po \"[a-z0-9]*$\""
#  shell: "ip route list | grep -Po \"default via [0-9\\.]* dev [a-z0-9]*\" | grep -Po \"[a-z0-9]*$\""
#  register: "default_network_interface_result"
#  changed_when: False
#  tags: always

#- name: detect network ip
#  shell: "ip a | grep -Po \"[0-9\\.]*/.*{{default_network_interface_result.stdout_lines[0]}}$\" | grep -Po \"^[0-9\\.]*\""
#  register: "main_network_ip_result"
#  changed_when: False
#  tags: always

# load vault file
- name: load vault vars
  include_vars: "{{config_path}}vault/vault.yml"
  tags: always
  
- name: check if vault is encrypted
  shell: "cat {{config_path}}vault/vault.yml | grep \"\\$ANSIBLE_VAULT\""
  changed_when: False
  failed_when: no
  register: "vault_check_result"
  
- name: set vault state vars
  set_fact:
    has_encrypted_vault: "{{true if vault_check_result.rc == 0 else false}}"
  tags: always

# load shared variables
- name: load shared vars
  include_vars: "config/pre_shared.yml"
  tags: always

# load initial environment variables
- name: load default vars
  include_vars: "config/default.yml"
  tags: always
  
- name: apply default vars
  set_fact:
    "{{item.name}}": "{{ item.default }}"
  when: "item.state in ['missing','default']"
  failed_when: "item.state  == 'missing'"
  ignore_errors: True
  register: check_result
  with_items:  |
    [
      {% for name, config in default_variables.items() %}
        { 'name': '{{name}}',
          'state':
          {% if name in vars %}
              'custom'
          {% else %}
              {% if ('optional' not in config or not config['optional']) %}
                  {% if 'default' in config %}
                      'default', 'default': {{config['default'] | to_json}}
                  {% else %}
                      'missing'
                  {% endif %}
              {% else %}
                  'not needed'
              {% endif %}
          {% endif %}
        },
      {% endfor %}
    ]

#- name: apply default vars
#  set_fact:
#    "{{item.name}}": "{{ default_variables[item.name]['default'] }}"
##    "{{item.name}}": "{{ vars['default_variables'][item.name]['default'] }}"
#  when: "item.state in ['missing','default']"
#  failed_when: "item.state  == 'missing'"
#  ignore_errors: True
#  register: check_result
#  with_items:  |
#    [
#      {% for item in default_variables %}
#        { 'name': '{{item}}',
#          'state':
#          {% if item in vars %}
#              'custom'
#          {% else %}
#              {% if ('optional' not in default_variables[item] or not default_variables[item]['optional']) %}
#                  {% if 'default' not in default_variables[item] %}
#                      'missing'
#                  {% else %}
#                      'default'
#                  {% endif %}
#              {% else %}
#                  'not needed'
#              {% endif %}
#          {% endif %}
#        },
#      {% endfor %}
#    ]

- name: set ipv6 env state vars
  set_fact:
    default_server_ipv6:              "{{server_ipv6}}"
    default_server_gateway_ipv6:      "{{server_gateway_ipv6}}"
    default_server_network_ipv6:      "{{server_network_ipv6}}"
  when: server_ipv6 is defined

- name: check for missing variables
  assert:
    that: "check_result.failed is not defined or not check_result.failed"
    msg: "Some variables are not defined. Please check the 'config/default.yml' file and add the missing variables to your configuration."

# load shared variables
- name: load shared vars
  include_vars: "config/post_shared.yml"
  tags: always

  
