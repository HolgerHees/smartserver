- name: prepare needed directories
  vars:
    directories: |
      [
        { "mode": "u=rwx,g=rx,o=", "owner": "root", "group": "root", "path": "{{global_opt}}camera_service/" },
        { "mode": "u=rwx,g=rx,o=", "owner": "root", "group": "root", "path": "{{global_opt}}camera_service/config/" },
        { "mode": "u=rwx,g=rx,o=", "owner": "root", "group": "root", "path": "{{global_lib}}camera_service/" },
        { "mode": "u=rwx,g=rx,o=", "owner": "{{system_users['www'].name}}", "group": "{{system_groups['www'].name}}", "path": "{{htdocs_path}}camera_service/" },
        { "mode": "u=rwx,g=rx,o=", "owner": "{{system_users['www'].name}}", "group": "{{system_groups['www'].name}}", "path": "{{htdocs_path}}camera_service/cache/" },
        {% for item in camera_devices %}{% if 'ftp_upload_name' in item %}
          { "mode": "u=rwx,g=rx,o=", "owner": "{{system_users['www'].name}}", "group": "{{system_groups['www'].name}}", "path": "{{htdocs_path}}camera_service/cache/{{item['ftp_upload_name']}}/" },
        {% endif %}{% endfor %}
      ]
  include_tasks: roles/_shared/create_directories.yml

- name: build docker image
  vars:
    name: "camera_service"
    image_name: "custom_camera_service"
    image_version: "{{alpine_version}}"
    files:
      - roles/camera_service/templates/container/Dockerfile
      - roles/camera_service/templates/container/entrypoint.sh
  include_tasks: roles/container/shared/build_docker_image.yml

- name: create docker container
  docker_container:
    name: camera_service
    image: "custom_camera_service:{{alpine_version}}"
    state: present
#    recreate: true
    env:
      TZ: "{{timezone}}"
    log_driver: journald
    log_options:
      tag: camera_service
    container_default_behavior: "compatibility"
    network_mode: "default"
    networks:
      - name: "isolated"
        ipv4_address: "{{docker_camera_service_ip}}"
    networks_cli_compatible: yes
    volumes:
      - '{{global_opt}}shared/python:/opt/shared/python:ro,z'
      - '{{global_opt}}camera_service/:/opt/camera_service:ro,z'
      - "{{global_lib}}camera_service/:/var/lib/camera_service:rw,z"
      - '{{htdocs_path}}camera_service/cache/:/var/lib/camera_service/cache:rw,z'
  notify: "restart camera_service"

- name: allow camera_service service
  vars:
    name: "camera_service"
    rules:
      - "saddr {{docker_prometheus_ip}} daddr {{docker_camera_service_ip}}"
  include_tasks: roles/firewall/shared/allow_service.yml
  tags: ['firewall_config']

- name: copy config
  template:
    src: "templates/config.py"
    dest: "{{global_opt}}camera_service/config/config.py"
    owner: root
    group: root
    mode: 0640
  notify: "restart camera_service"

- name: synchronize daemon
  synchronize:
    src: "templates/opt/camera_service/{{item}}/"
    dest: "{{global_opt}}camera_service/{{item}}/"
    archive: no
    checksum: yes
    group: yes
    owner: yes
    perms: yes
    recursive: yes
    rsync_opts:
      - "--chown=root:root"
      - "--chmod=F640"
  with_items:
      - "lib"
  notify: "restart camera_service"

- name: copy daemon
  copy:
    src: "templates/opt/camera_service/camera_service"
    dest: "{{global_opt}}camera_service/camera_service"
    owner: root
    group: root
    mode: 0750
  notify: "restart camera_service"

- name: synchronize htdocs
  synchronize:
    src: "templates/htdocs/"
    dest: "{{htdocs_path}}"
    archive: no
    checksum: yes
    group: yes
    owner: yes
    perms: yes
    recursive: yes
    rsync_opts:
      - "--chown={{system_users['www'].name}}:{{system_groups['www'].name}}"
      - "--chmod=D750,F640"
  
- name: copy proxy config
  vars:
    config_file: "templates/etc/apache2/_.ansible.d/cameras.conf"
  include_tasks: roles/apache/shared/add_config.yml
  tags: ['apache_config']

- name: register webui
  vars:
    name: "camera_service"
    js_file: "templates/webui/camera_service.js"
    i18n_files: [ { language: "de", file: "templates/webui/camera_service.de.json" } ]
    icons: []
  include_tasks: roles/apache_webui/shared/add_webui.yml
  tags: ['apache_webui_config']

# ***** FINALIZE *****
- name: register prometheus rules & metrics
  vars:
    name: "camera_service"
    rules_file: "templates/prometheus/rules.yml"
    scrape_file: "templates/prometheus/scrape.yml"
  include_tasks: roles/prometheus/shared/add_config.yml
  tags: ['prometheus_config']
  when: "monitoring_enabled"

- name: copy service apache config
  vars:
    service_name: "camera_service"
    service_host: "{{docker_camera_service_ip}}"
  include_tasks: roles/shared_libs/shared/add_apache_service_config.yml
  tags: ['apache_config']

- name: copy service fluentd config
  vars:
    service_name: "camera_service"
    service_is_container: no
  include_tasks: roles/shared_libs/shared/add_fluentd_service_config.yml
  tags: ['fluentd_config']
  when: "monitoring_enabled"

- name: create systemd service
  vars:
    container_name: "camera_service"
    container_after: [ "camera_ftp" ]
  include_tasks: roles/container/shared/add_docker_service.yml
  tags: ['systemd_watcher_config']

- name: register systemd service watcher
  vars:
    name: "camera_service"
  include_tasks: roles/systemd_watcher/shared/add_watcher.yml
  tags: ['systemd_watcher_config']
  when: "monitoring_enabled"
  
- name: trigger update_service handler
  vars:
    notify: "restart camera_service"
    service: "camera_service.service"
  include_tasks: roles/_shared/service_check.yml

