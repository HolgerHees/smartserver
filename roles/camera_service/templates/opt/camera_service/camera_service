#!/usr/bin/python3

import logging
import sys
import os
from datetime import datetime

from smartserver.server import Server, serverWeb, serverSocket
from smartserver.scheduler import Scheduler
from smartserver.filewatcher import FileWatcher

from lib.cachehandler import CacheHandler

from config import config


class Handler(Server):
    '''Handler client'''
    def __init__(self):
        super().__init__("camera_service", "0.0.0.0", "80")

        self.scheduler = Scheduler("camera_service")
        self.cache_handler = CacheHandler(self, config)

        watched_directories = []
        for camera_name in config.camera_names:
            watched_directories.append("{}{}/".format(config.upload_path,camera_name))
            watched_directories.append("{}{}/".format(config.cache_path,camera_name))
            #watched_directories.append("/var/lib/camera_service/test/folder/")
            #watched_directories.append("/var/lib/camera_service/test/file.txt")

        self.initWatchedFiles( watched_directories, self.fileChangeTriggered )

    def fileChangeTriggered(self, event):
        if event["type"] not in [ FileWatcher.EVENT_TYPE_WRITTEN, FileWatcher.EVENT_TYPE_MOVED_TO, FileWatcher.EVENT_TYPE_MOVED_FROM, FileWatcher.EVENT_TYPE_DELETED ]:
            return

        #logging.info(event);
        if event["path"][:len(config.upload_path)] == config.upload_path:
            self.cache_handler.uploadChangeTriggered(event["path"], event["time"], event["type"] in [ FileWatcher.EVENT_TYPE_WRITTEN, FileWatcher.EVENT_TYPE_MOVED_TO ] )
        elif event["path"][:len(config.cache_path)] == config.cache_path:
            self.cache_handler.cacheChangeTriggered(event["path"], event["time"], event["type"] in [ FileWatcher.EVENT_TYPE_WRITTEN, FileWatcher.EVENT_TYPE_MOVED_TO ] )

    def start(self):
        self.scheduler.start()
        self.cache_handler.start()
        super().start()

    def terminate(self):
        self.scheduler.terminate()
        self.cache_handler.terminate()
        super().terminate()

    def run(self):
        while self.is_running:
            self.event.wait(60)
            self.event.clear()
            #requests.exceptions.ConnectionError, urllib3.exceptions.MaxRetryError, urllib3.exceptions.NewConnectionError

    def notifyChangedData(self, camera_name, changed_data):
        if not self.isSocketRoomActive(camera_name):
            return

        self.emitSocketData(camera_name + ':update', changed_data, camera_name)

    def onSocketRoomJoin(self, sid, room, data = None):
        super().onSocketRoomJoin(sid, room, data)

        camera_data = self.cache_handler.getCacheData(room);
        self.emitSocketData(room + ':init', camera_data)

    def getStateMetrics(self):
        metrics = []
        metrics += self.scheduler.getStateMetrics()
        metrics += self.cache_handler.getStateMetrics()
        return "{}\n".format( "\n".join(metrics) )

handler = Handler()
handler.start()

