#!/usr/bin/python3

import logging
import sys
import os
import pyinotify
from datetime import datetime

from smartserver.server import Server, serverWeb, serverSocket
from smartserver.scheduler import Scheduler

from lib.cachehandler import CacheHandler

import config


class Handler(Server):
    '''Handler client'''
    def __init__(self):
        super().__init__("camera_service", "0.0.0.0", "80")

        self.scheduler = Scheduler("camera_service")
        self.cache_handler = CacheHandler(self, config)

        watched_directories = []
        for camera_name in config.camera_names:
            watched_directories.append("{}{}/".format(config.upload_path,camera_name))
            watched_directories.append("{}{}/".format(config.cache_path,camera_name))
        self.initWatchedFiles( watched_directories, self.fileChangeTriggered )

    def fileChangeTriggered(self, event):
        #logging.info(event);
        if event["pathname"][:len(config.upload_path)] == config.upload_path:
            self.cache_handler.uploadChangeTriggered(event["pathname"], event["time"], event["mask"] & ( pyinotify.IN_CREATE | pyinotify.IN_MOVED_TO ))
        elif event["pathname"][:len(config.cache_path)] == config.cache_path:
            self.cache_handler.cacheChangeTriggered(event["pathname"], event["time"], event["mask"] & ( pyinotify.IN_CREATE | pyinotify.IN_MOVED_TO ))

    def start(self):
        self.scheduler.start()
        self.cache_handler.start()
        super().start()

    def terminate(self):
        self.scheduler.terminate()
        self.cache_handler.terminate()
        super().terminate()

    def run(self):
        while self.is_running:
            self.event.wait(60)
            self.event.clear()
            #requests.exceptions.ConnectionError, urllib3.exceptions.MaxRetryError, urllib3.exceptions.NewConnectionError

    def emitChangedData(self, camera_name, changed_data):
        logging.info("Emit changed cache data for camera '{}'".format(camera_name))
        self.emitSocketData('change_' + camera_name, changed_data)

    def emitInitialData(self, camera_name):
        data = self.cache_handler.getCacheData(camera_name);
        logging.info("Emit initial cache data for camera '{}'".format(camera_name))
        self.emitSocketData('init', data)

    def getStateMetrics(self):
        metrics = []
        metrics += self.scheduler.getStateMetrics()
        metrics += self.cache_handler.getStateMetrics()
        return "{}\n".format( "\n".join(metrics) )

@serverWeb.route('/metrics/', methods = ['GET'])
def metrics():
    return handler.getStateMetrics()

@serverSocket.on('init')
def on_init(camera_name):
    handler.emitInitialData(camera_name)

handler = Handler()
handler.start()

