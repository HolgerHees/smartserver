- name: ensure user and group exists
  vars:
    user: { name: "openhab", system: true, home: "{{global_etc}}openhab" }
    group: { name: "openhab", system: true }
  import_tasks: roles/user/tasks/add_system_user.yml

- name: set openhab version
  set_fact:
    openhab_version: "3.0.2"
    openhab_uid: "{{system_users['openhab'].id}}"
    openhab_user: "{{system_users['openhab'].name}}"
    openhab_gid: "{{system_groups['openhab'].id}}"
    openhab_group: "{{system_groups['openhab'].name}}"
#    openhab_user: "root"
#    openhab_group: "root"
    jython_script_version: "db88d897c962ea9328d0f685bc01f02af887e6b4"
  tags: [ 'update_notifier_configs' ]

- name: prepare needed config folder
  file:
    path:  "{{item}}"
    state: directory
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    mode: 0750
  with_items:
    - "{{global_etc}}openhab3"
    - "{{global_etc}}openhab3/conf"
    - "{{global_etc}}openhab3/conf/html"
    - "{{global_etc}}openhab3/conf/icons"
    - "{{global_etc}}openhab3/python"
    - "{{global_etc}}openhab3/userdata"
    - "{{global_etc}}openhab3/userdata/config"
    - "{{global_etc}}openhab3/userdata/jsondb"
    - "{{global_log}}openhab3"
    - "{{global_lib}}openhab3"
    - "{{global_lib}}openhab3/persistance"
#    - "{{global_lib}}openhab3/jsondb" # => for homeconnect oauth => 
# userdata/config/SymmetricKeyCipher.config

# ****** GITHUB SHARED PROJECT ******
- name: clone git
  vars:
    git_clone_name: "shared"
    git_clone_path: "{{projects_path}}openhab_shared"
    git_clone_url: "https://github.com/HolgerHees/openhab_shared.git"
  import_tasks: roles/_shared/tasks/git_clone.yml

- name: ensure that right owner is assigned => git_clone_result changed
  file:
    path: "{{projects_path}}openhab_shared"
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    recurse: yes
  when: "git_clone_result.changed"

- name: set symbolic link to shared python scripts
  file:
    src: "{{projects_path}}openhab_shared/{{item}}"
    dest: "{{global_etc}}/openhab3/{{item}}"
    state: link
    follow: no
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"  
  with_items:
    - "python/shared"
    - "conf/html/shared"
    - "conf/icons/classic"

# ****** GITHUB CONFIG PROJECT ******
- name: clone config git
  vars:
    git_clone_name: "config"
    git_clone_path: "{{projects_path}}openhab_config"
    git_clone_url: "{{vault_openhab_config_git}}"
  import_tasks: roles/_shared/tasks/git_clone.yml

- name: ensure that right owner is assigned => git_clone_result changed
  file:
    path: "{{projects_path}}openhab_config"
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    recurse: yes
  when: "git_clone_result.changed"
  
# => custom python
- name: link custom python
  file:
    src: "{{projects_path}}openhab_config/python/custom"
    dest: "{{global_etc}}openhab3/python/custom"
    state: link
    follow: no
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
#  notify: "restart openhab3"

# conf folder
- name: check conf folder
  shell: "ls -1 {{projects_path}}openhab_config/conf/"
  register: config_result
  changed_when: no
  
- name: link conf folder
  file:
    src: "{{projects_path}}openhab_config/conf/{{item}}"
    dest: "{{global_etc}}openhab3/conf/{{item}}"
    state: link
    follow: no
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
  with_items: "{{config_result.stdout_lines | difference(['html','icons'])}}"
#  notify: "restart openhab3"

# custom conf sub folder (html & icons)
- name: check custom html & icons conf folder
  shell: "ls -1 {{projects_path}}openhab_config/conf/{{item}}/"
  register: config_sub_folder_result
  changed_when: no
  when: "item in config_result.stdout_lines"
  with_items:
    - html
    - icons
    
- name: collect custom html & icons conf folder
  set_fact:
    config_sub_folders: |
      [
      {% for result in config_sub_folder_result.results %}
      {% if result.stdout_lines is defined %}
      {% for line in result.stdout_lines %}
      "{{result.item}}/{{line}}",
      {% endfor %}
      {% endif %}
      {% endfor %}
      ]
    
- name: link custom html & icons conf folder
  file:
    src: "{{projects_path}}openhab_config/conf/{{item}}"
    dest: "{{global_etc}}openhab3/conf/{{item}}"
    state: link
    follow: no
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
  with_items: "{{config_sub_folders}}"
#  notify: "restart openhab3"

# create missing folder
- name: prepare missing config folder
  file:
    path:  "{{global_etc}}openhab3{{item}}"
    state: directory
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    mode: 0750
  with_items:
    - /conf/automation
    - /conf/html
    - /conf/icons
    - /conf/items
    - /conf/persistence
    - /conf/rules
    - /conf/scripts
    - /conf/services
    - /conf/sitemaps
    - /conf/transform
    - /conf/things
    - /addons
#  notify: "restart openhab3"
    
# habpanel if exists
- name: check habpanel config
  shell: "ls {{projects_path}}openhab_config/habpanel_panelconfig.json"
  register: habpanel_result
  changed_when: no
  failed_when: no
  tags: [ 'apache_webui_configs' ]
   
- name: copy habpanel config => habpanel_result.rc == 0
  copy:
    src: "{{projects_path}}openhab_config/habpanel_panelconfig.json"
    dest: "{{global_etc}}openhab3/userdata/jsondb/uicomponents_habpanel_panelconfig.json"
    remote_src: yes
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    mode: 0644
  when: "habpanel_result.rc == 0"

# addons folder
- name: check addons folder
  shell: "ls -1 {{projects_path}}openhab_config/addons3/"
  register: addons_result
  changed_when: no

- name: copy addons folder
  copy:
    src: "{{projects_path}}openhab_config/addons3/{{item}}"
    dest: "{{global_etc}}openhab3/addons/{{item}}"
    remote_src: yes
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    mode: 0640
  with_items: "{{addons_result.stdout_lines}}"
  
# SERVICES
- name: check service folder
  shell: "ls -1 {{projects_path}}openhab_config/templates3/services/"
  register: services_result
  changed_when: no

# have to fetch files before, because ansible template module works only with local files
- name: prepare service configs
  fetch:
    src: "{{projects_path}}openhab_config/templates3/services/{{item}}"
    dest: "/tmp/ansible/openhab3/services/{{item}}"
    flat: yes
  register: services_state
  with_items: "{{services_result.stdout_lines}}"
  changed_when: no
    
- name: copy service configs
  template:
    src: "/tmp/ansible/openhab3/services/{{item}}"
    dest: "{{ global_etc }}openhab3/conf/services/{{item}}"
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    mode: 0640
  with_items: "{{services_result.stdout_lines}}"
#  notify: "restart openhab3"

# THINGS
- name: check things folder
  shell: "ls -1 {{projects_path}}openhab_config/templates3/things/"
  register: things_result
  changed_when: no

# have to fetch files before, because ansible template module works only with local files
- name: prepare things config
  fetch:
    src: "{{projects_path}}openhab_config/templates3/things/{{item}}"
    dest: "/tmp/ansible/openhab3/things/{{item}}"
    flat: yes
  register: things_state
  with_items: "{{things_result.stdout_lines}}"
  changed_when: no

- name: copy things configs
  template:
    src: "/tmp/ansible/openhab3/things/{{item}}"
    dest: "{{ global_etc }}openhab3/conf/things/{{item}}"
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    mode: 0640
  with_items: "{{things_result.stdout_lines}}"
#  notify: "restart openhab3"
  
# UDEV
- name: check udev folder
  shell: "ls -1 {{projects_path}}openhab_config/templates3/udev/rules.d/"
  register: udev_result
  changed_when: no

# have to fetch files before, because ansible template module works only with local files
- name: prepare udev rules
  fetch:
    src: "{{projects_path}}openhab_config/templates3/udev/rules.d/{{item}}"
    dest: "/tmp/ansible/openhab3/udev/{{item}}"
    flat: yes
  register: udev_state
  with_items: "{{udev_result.stdout_lines}}"
  changed_when: no

- name: copy udev rules
  template:
    src: "/tmp/ansible/openhab3/udev/{{item}}"
    dest: "/etc/udev/rules.d/{{item}}"
    owner: root
    group: root
    mode: 0644
  register: udev_rules
  with_items: "{{udev_result.stdout_lines}}"
#  notify: "restart openhab3"

- name: reload udev rules
  shell: "udevadm control --reload-rules && udevadm trigger"
  when: udev_rules.changed

# CLEANUP  
- name: clean configs
  file:
    path: "/tmp/ansible/openhab3/"
    state: absent
  changed_when: no
  
# JYTHON HELPER
- name: "clone jython helper git"
  git:
    #https://community.openhab.org/t/ivan-s-helper-libraries-oh3-python-javascript/116458
    repo: 'https://github.com/CrazyIvan359/openhab-helper-libraries'
    #repo: 'https://github.com/openhab-scripters/openhab-helper-libraries.git'
    dest: '{{global_build}}openhab3-jython'
    version: '{{jython_script_version}}'

- name: copy jython core classes
  copy:
    src: "{{global_build}}openhab3-jython/Core/automation/lib/python/core"
    dest: "{{global_etc}}openhab3/python/"
    remote_src: yes
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    mode: 0750
#  notify: "restart openhab3"

- name: copy jython configuration
  template:
    src: "templates/python/configuration.py"
    dest: "{{global_etc}}openhab3/python/configuration.py"
    owner: "{{openhab_user}}"
    group: "{{openhab_group}}"
    mode: 0640
#  notify: "restart openhab3"
  
- name: collect devices
  shell: "grep -P  \"^[^#]+$\" {{projects_path}}openhab_config/templates/udev/rules.d/*.rules | grep -oP \"SYMLINK\\+=\\\"\\K([^\\\"])+\""
  register: device_result
  changed_when: no
  failed_when: no
  
#- name:
#  debug:
#    msg: "{{device_result}}"

- name: prepare device javaopts
  set_fact:
    openhab_device_java_opts: "-Dgnu.io.rxtx.SerialPorts=/dev/{{device_result.stdout_lines | join(':/dev/')}}"
  when: "device_result.rc == 0"
  
- name: check if devices exists
  shell: "ls -al /dev/{{item}}"
  register: symlink_result
  changed_when: no
  failed_when: no
  with_items: "{{device_result.stdout_lines}}"
  when: "device_result.rc == 0"
  
- name: prepare device mounts
  set_fact:
    openhab_device_mounts: "{{openhab_device_mounts | default([]) + ['/dev/' + item.1 + ':/dev/' + item.1 + ':rwm']}}"
  with_indexed_items: "{{device_result.stdout_lines}}"
  when: "device_result.rc == 0 and symlink_result.results[item.0].rc == 0"
  
- name: build docker image
  vars:
    name: "openhab3"
    image_name: "custom_openhab3"
    image_version: "{{openhab_version}}"
    files:
      - roles/openhab3/templates/container/Dockerfile
      - roles/openhab3/templates/container/init.sh
  import_tasks: roles/container/tasks/build_docker_image.yml

- name: create docker container
  docker_container:
    name: openhab3
    image: "custom_openhab3:{{openhab_version}}"
    state: present
#    capabilities:
#      - NET_ADMIN
#      - NET_RAW
#    recreate: true
    env:
      TZ: "{{timezone}}"
      USER_ID: "{{openhab_uid}}"
      GROUP_ID: "{{openhab_gid}}"
      #CRYPTO_POLICY: "unlimited"
      EXTRA_JAVA_OPTS: "-Duser.timezone={{timezone}} {{openhab_device_java_opts | default('')}} -Dpython.path=/openhab/python/"
      OPENHAB_HTTP_ADDRESS: "127.0.0.1"
    network_mode: host
    log_driver: journald
    log_options:
      tag: openhab3
    volumes:
      - '{{projects_path}}openhab_config:{{projects_path}}openhab_config:z'
      - '{{projects_path}}openhab_shared:{{projects_path}}openhab_shared:z'
      - '{{global_etc}}openhab3/addons:/openhab/addons:z'
      - '{{global_etc}}openhab3/conf:/openhab/conf:z'
      - '{{global_etc}}openhab3/python:/openhab/python:z'
      - '{{global_etc}}openhab3/runtime/lib/python:/openhab/runtime/lib/python:z'
      - "{{global_etc}}openhab3/userdata/config:/openhab/userdata/config/org/openhab/:z"
      - "{{global_etc}}openhab3/userdata/jsondb:/openhab/userdata/jsondb/:z"
#      - '{{global_lib}}openhab3/jsondb:/openhab/userdata/jsondb:z'
      - '{{global_lib}}openhab3/persistance:/openhab/userdata/persistence:z'
      - '{{global_log}}openhab3:/openhab/userdata/logs:z'
    devices: "{{openhab_device_mounts | default([])}}"
#    networks:
#      - name: "openhab"
#        ipv4_address: "{{docker_openhab_ip}}"
#    networks_cli_compatible: yes
#    sysctls:
#      "net.ipv4.conf.all.arp_accept": "1"
#      "net.ipv4.conf.all.proxy_arp": "1"
    exposed_ports:
      - "8080"  
      - "8443"  
      - "5007"  
      - "8101" 
  register: openhab_container_result 
#  notify: "restart openhab3"

- name: clean ssh key
  command: "ssh-keygen -R [openhab]:8101 -f /root/.ssh/known_hosts"
  when: openhab_container_result.changed

- name: add container name
  vars:
    host_name: "openhab"
    host_ip_address: "127.0.0.1"
  import_tasks: roles/network/tasks/add_to_hosts.yml

# ***** DATABASE ****
- name: check mysql service
  import_tasks: roles/mysql/tasks/wait_until_ready.yml
  
- name: check mysql databases
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e 'show databases;'\""
  register: mysql_data_exists
  changed_when: "'openhab' not in mysql_data_exists.stdout"

- name: create missing mysql databases => database does not exists
  shell: "docker exec mysql sh -c \"mysqladmin -u root -h 127.0.0.1 create openhab\""
  when: "'openhab' not in mysql_data_exists.stdout"

- name: create missing mysql user => database does not exists
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e \\\"CREATE USER IF NOT EXISTS '{{vault_openhab_mysql_username}}'@'%' IDENTIFIED BY '{{vault_openhab_mysql_password}}';\\\"\""
  when: "'openhab' not in mysql_data_exists.stdout"

- name: grant permissions to mysql user => database does not exists
  shell: "docker exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e \\\"GRANT ALL PRIVILEGES ON openhab.* TO '{{vault_openhab_mysql_username}}'@'%';\\\"\""
  when: "'openhab' not in mysql_data_exists.stdout"

- name: refresh mysql privileges => database does not exists
  shell: "docker exec mysql sh -c \"mysqladmin -u root -h 127.0.0.1 flush-privileges\""
  when: "'openhab' not in mysql_data_exists.stdout"
  
- name: check influxdb data
  stat:
    path: "{{ global_lib }}influxdb/data/openhab_db"
  register: influxdb_data_exists
  changed_when: not influxdb_data_exists.stat.exists
  
- name: check influxdb service => database does not exists
  import_tasks: roles/influxdb/tasks/wait_until_ready.yml
  when: "not influxdb_data_exists.stat.exists"

- name: create missing influx databases => database does not exists
  shell: "docker exec influxdb sh -c \"influx -execute 'CREATE DATABASE openhab_db'\""
  when: "not influxdb_data_exists.stat.exists"
  
- name: create missing influx openhab user => database does not exists
  shell: "docker exec influxdb sh -c \"influx -execute \\\"CREATE USER {{vault_openhab_influxdb_username}} WITH PASSWORD '{{vault_openhab_influxdb_password}}'\\\"\""
  when: "not influxdb_data_exists.stat.exists"
  
- name: grant permissions to influx openhab user => database does not exists
  shell: "docker exec influxdb sh -c \"influx -execute 'GRANT ALL ON openhab_db TO {{vault_openhab_influxdb_username}}'\""
  when: "not influxdb_data_exists.stat.exists"

- name: create missing influx grafana user => database does not exists
  shell: "docker exec influxdb sh -c \"influx -execute \\\"CREATE USER {{vault_grafana_influxdb_username}} WITH PASSWORD '{{vault_grafana_influxdb_password}}'\\\"\""
  when: "not influxdb_data_exists.stat.exists"

- name: grant permissions to influx openhab user => database does not exists
  shell: "docker exec influxdb sh -c \"influx -execute 'GRANT READ ON openhab_db TO {{vault_grafana_influxdb_username}}'\""
  when: "not influxdb_data_exists.stat.exists"

#- name: create retention policy
#  vars:
#    database: "openhab_db"
#  import_tasks: roles/influxdb/tasks/create_retention_policy.yml

# ***** FINALIZE *****
- name: create cron job
  vars:
    name: "MySQL Openhab Backup"
    cmd: "docker exec mysql sh -c \"/usr/bin/mysqldump openhab -h 127.0.0.1 | bzip2 -c > /var/lib/mysql_backup/openhab_$(date +\\%Y-\\%m-\\%d).sql.bz2\""
    file: "ansible_openhab"
    hour: "1"
    minute: "0"
  import_tasks: roles/cron/tasks/add_cronjob.yml

- name: create cron job
  vars:
    name: "Influxdb Openhab Backup"
    cmd: "docker exec influxdb sh -c \"influxd backup -database openhab_db /var/lib/influxdb_backup/openhab_db_$(date +\\%Y-\\%m-\\%d)/ > /dev/null\""
    file: "ansible_openhab"
    hour: "1"
    minute: "0"
  import_tasks: roles/cron/tasks/add_cronjob.yml

- name: register default webui
  vars:
    name: "openhab"
    js_file: "templates/webui/openhab.js"
    i18n_files: [ { language: "de", file: "templates/webui/openhab.de.json" } ]
    listener: { "sub_domain": "openhab", "prefix": "basicui", "js_file": "templates/webui/openhab.listener.js" }
    icons: [ 'templates/webui/icons/openhab_logo.svg' ]
  import_tasks: roles/apache_webui/tasks/add_webui.yml

- name: register habpanel webui
  vars:
    name: "openhab_habpanel"
    js_file: "templates/webui/openhab_habpanel.js"
    i18n_files: [ { language: "de", file: "templates/webui/openhab_habpanel.de.json" } ]
  import_tasks: roles/apache_webui/tasks/add_webui.yml
  when: "habpanel_result.rc == 0"

- name: copy apache vhost
  vars:
    sub_domain: "openhab"
    include: "templates/etc/apache2/_.ansible.vhost.d/openhab.inc"
  import_tasks: roles/apache/tasks/add_vhost.yml

- name: copy special vhosts
  template:
    src: "templates/etc/apache2/_.ansible.vhost.d/default-127.0.0.0-80-openhab.conf"
    dest: "{{global_etc}}apache2/_.ansible.vhost.d/default-127.0.0.0-80-openhab.conf"
    owner: root
    group: root
    mode: 0644
  notify: "restart apache2"
  tags: ['apache_conf']

- name: copy fluentd config
  vars:
    config_file: "templates/etc/fluent/_.ansible.d/openhab3.conf"
  import_tasks: roles/fluentd/tasks/add_config.yml

- name: create systemd service
  vars:
    container_name: "openhab3"
    container_after: [ "mysql", "influxdb", "mosquitto" ]
  import_tasks: roles/container/tasks/add_docker_service.yml
  
- name: register service watcher
  vars:
    name: "openhab3"
  import_tasks: roles/systemd_watcher/tasks/add_watcher.yml

- name: register openhab update notifier
  vars:
    name: "openhab3"
    type: "docker"
    url: "https://github.com/openhab/openhab-distro/releases"
    config: {
      repository: "openhab/openhab",
      pattern: "^([0-9\\.]+)-debian$"
    }
  import_tasks: roles/update_notifier/tasks/add_notifier.yml

- name: register jython script update notifier
  vars:
    name: "jsr223"
    type: "github"
    url: 'https://github.com/CrazyIvan359/openhab-helper-libraries'
    #url: "https://github.com/openhab-scripters/openhab-helper-libraries"
    config: { 
      project: "openhab-scripters/openhab-helper-libraries", 
      version: "{{jython_script_version}}" 
    }
  import_tasks: roles/update_notifier/tasks/add_notifier.yml

- name: trigger openhab handler
  vars:
    notify: "restart openhab3"
    service: "openhab3.service"
  import_tasks: roles/_shared/tasks/service_check.yml
