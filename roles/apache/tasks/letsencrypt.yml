- name: check letsencrypt certificate
  stat:
    path: "{{global_etc}}letsencrypt/archive/{{server_domain}}"
  register: certificate_files_from_etc

- name: check for vault certificate files
  stat:
    path: "{{config_path}}vault/letsencrypt"
  register: certificate_files_from_vault

- name: decide to create or restore easy_rsa certificates
  set_fact:
    certificate_mode: "{% if certificate_files_from_etc.stat.exists %}exists{% elif certificate_files_from_vault.stat.exists %}vault{% else %}create{% endif %}"
    changed_when: "certificate_mode != 'exists'"
  
# CREATE #  
- name: check for vault certificate files
  stat:
    path: "{{global_etc}}letsencrypt/live/{{server_domain}}"
  register: certificate_files
  when: "certificate_mode == 'create'"

- name: backup selfsigned certificate
  command: "mv {{global_etc}}letsencrypt/live/{{server_domain}} {{global_etc}}letsencrypt/live/{{server_domain}}.bak"
  when: "certificate_mode == 'create' and certificate_files.stat.exists"

- name: collect domain names => certificate_mode = 'create'
  shell: "grep -ohP \"ServerName\\s*\\K(.*){{server_domain}}\" {{global_etc}}apache2/_.ansible.vhost.d/*.conf"
  register: domain_result
  when: "certificate_mode == 'create'"

- name: create certificates => certificate_mode = 'create'
  shell: "docker exec apache2 sh -c \"certbot certonly --webroot -w {{htdocs_path}}letsencrypt --preferred-challenges http --agree-tos --email {{vault_root_email}} -d {{ domain_result.stdout_lines | unique | join(' -d ') }}\""
  notify: "restart apache2"
  when: "certificate_mode == 'create'"
  
- name: create cron job
  vars:
    name: "Letsencrypt renew job"
    cmd: "docker exec apache2 sh -c \"certbot renew -q --deploy-hook=\\\"apachectl -k graceful\\\"\""
    file: "ansible_letsencrypt"
    hour: "1"
    minute: "0"
  import_tasks: roles/cron/tasks/add_cronjob.yml
