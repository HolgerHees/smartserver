- name: set version
  set_fact:
    apache_version: '2.4.60'
    openidc_version: '2.4.15.7'
  tags: [ 'update_notifier_config' ]
  
# SELFSIGNED CERTIFICATE
- name: install required packages => is_rhel or is_fedora
  yum:
    name: [
      python3-cryptography
    ]
    state: present
  when: is_rhel or is_fedora
  
- name: install required packages => is_ubuntu
  apt:
    name: [
      python3-cryptography
    ]
    state: present
  when: is_ubuntu

- name: install required packages => is_suse
  zypper:
    name: [
#      , python2-cryptography
      python3-cryptography # needed for ansible openssl
    ]
    state: present
  when: is_suse
  
- name: check certificate
  stat:
    path: "{{global_etc}}letsencrypt/live/{{server_domain}}/"
  register: certificate_files
  changed_when: not certificate_files.stat.exists

- name: prepare needed directories => certificate_files not exists
  file:
    path: "{{global_etc}}{{item}}"
    state: directory
    owner: root
    group: root
    mode: 0755
  with_items:
    - "letsencrypt/"
    - "letsencrypt/live"
    - "letsencrypt/live/{{server_domain}}"
    - "letsencrypt/live/ca"
  when: not certificate_files.stat.exists

# CA
#- name: create CA key
#  openssl_privatekey:
#    path: "{{global_etc}}letsencrypt/live/ca/privkey.pem"
#    mode: 0600
#  when: not certificate_files.stat.exists

#- name: create the CA CSR
#  openssl_csr:
#    path: "{{global_etc}}letsencrypt/live/ca/cert_csr.pem"
#    privatekey_path: "{{global_etc}}letsencrypt/live/ca/privkey.pem"
#    common_name: "smartserver-ca"
#    mode: 0600
#  when: not certificate_files.stat.exists

#- name: sign the CA CSR
#  openssl_certificate:
#    path: "{{global_etc}}letsencrypt/live/ca/fullchain.pem"
#    csr_path: "{{global_etc}}letsencrypt/live/ca/cert_csr.pem"
#    privatekey_path: "{{global_etc}}letsencrypt/live/ca/privkey.pem"
#    provider: selfsigned
#    mode: 0640
#  when: not certificate_files.stat.exists

# Certificate
- name: generate openssl privatekey => certificate_files not exists
  openssl_privatekey:
    path: "{{global_etc}}letsencrypt/live/{{server_domain}}/privkey.pem"
    mode: 0600
  when: not certificate_files.stat.exists
    
- name: generate openssl csr => certificate_files not exists
  openssl_csr:
    path: "{{global_etc}}letsencrypt/live/{{server_domain}}/cert.csr"
    privatekey_path: "{{global_etc}}letsencrypt/live/{{server_domain}}/privkey.pem"
    common_name: "*.{{server_domain}}"
    mode: 0600
  when: not certificate_files.stat.exists
    
- name: generate openssl certificate => certificate_files not exists
  openssl_certificate:
    path: "{{global_etc}}letsencrypt/live/{{server_domain}}/fullchain.pem"
    privatekey_path: "{{global_etc}}letsencrypt/live/{{server_domain}}/privkey.pem"
    csr_path: "{{global_etc}}letsencrypt/live/{{server_domain}}/cert.csr"
    provider: selfsigned
#    provider: ownca
#    ownca_path: "{{global_etc}}letsencrypt/live/ca/fullchain.pem"
#    ownca_privatekey_path: "{{global_etc}}letsencrypt/live/ca/privkey.pem"
    mode: 0640
  when: not certificate_files.stat.exists
  
# APACHE
- name: prepare needed directories
  vars:
    directories:
      - { mode: "u=rwx,g=rx,o=", owner: "{{system_users['www'].name}}", group: "{{system_groups['www'].name}}", path: "{{htdocs_path}}_public" }
      - { mode: "u=rwx,g=rx,o=", owner: "{{system_users['www'].name}}", group: "{{system_groups['www'].name}}", path: "{{htdocs_path}}_public/.well-known" }
      - { mode: "u=rwx,g=rx,o=", owner: "{{system_users['www'].name}}", group: "{{system_groups['www'].name}}", path: "{{htdocs_path}}_fallback" }
      - { mode: "u=rwx,g=rx,o=", owner: "{{system_users['www'].name}}", group: "{{system_groups['www'].name}}", path: "{{htdocs_path}}_fallback/domain" }
      - { mode: "u=rwx,g=rx,o=", owner: "{{system_users['www'].name}}", group: "{{system_groups['www'].name}}", path: "{{global_log}}apache2/" }
      - { mode: "u=rwx,g=rx,o=", owner: "{{system_users['www'].name}}", group: "{{system_groups['www'].name}}", path: "{{global_etc}}apache2/_.ansible.auth/" }
      - { mode: "u=rwx,g=rx,o=", owner: "{{system_users['www'].name}}", group: "{{system_groups['www'].name}}", path: "{{global_etc}}apache2/_.ansible.vhost.d/auth/" }
  include_tasks: roles/_shared/create_directories.yml

- name: copy config
  template:
    src: "templates/etc/apache2/{{item}}"
    dest: "{{global_etc}}apache2/{{item}}"
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0640
  vars:
    enable_stapeling: "{{ssl_certificate != 'selfsigned'}}"
    usergroup: "user"
  with_items:
    - _.ansible.conf.d/default_cache_control.conf
    - _.ansible.conf.d/public.conf
    - _.ansible.conf.d/options.conf
    - _.ansible.conf.d/ssl.conf
    - _.ansible.vhost.d/auth/form2.inc
    - _.ansible.vhost.d/auth/openidc2.inc
    - _.ansible.vhost.d/default-ssl.conf
    - _.ansible.server.conf
    - _.ansible.httpd.conf
  notify: "restart apache2"
  tags: ['apache_config']

- name: copy auth config
  template:
    src: "templates/etc/apache2/{{item}}"
    dest: "{{global_etc}}apache2/{{item}}"
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0640
  vars:
    enable_stapeling: "{{ssl_certificate != 'selfsigned'}}"
  with_items:
    - _.ansible.auth/required_env.inc
    - _.ansible.vhost.d/auth/basic.inc
    - _.ansible.vhost.d/auth/form1.inc
    - _.ansible.vhost.d/auth/openidc1.inc
  notify: "restart apache2"
  tags: ['user']

- name: copy auth users
  template:
    src: "templates/etc/apache2/_.ansible.auth/required.inc"
    dest: "{{global_etc}}apache2/_.ansible.auth/required_{{item}}.inc"
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0640
  with_items:
    - "admin"
    - "user"
  notify: "restart apache2"
  tags: ['user']

- name: synchronize login form
  synchronize:
    src: "templates/htdocs/_auth"
    dest: "{{htdocs_path}}"
    archive: no
    checksum: yes
    group: yes
    owner: yes
    perms: yes
    recursive: yes
    rsync_opts:
      - "--chown={{system_users['www'].name}}:{{system_groups['www'].name}}"
      - "--chmod=D750,F640"

- name: copy domain fallback
  template:
    src: "templates/htdocs/_fallback/{{item}}"
    dest: "{{htdocs_path}}_fallback/{{item}}"
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0640
  with_items:
    - error.php
    - domain/index.html
    - domain/style.css

- name: copy public files
  copy:
    src: "templates/htdocs/_public/{{item}}"
    dest: "{{htdocs_path}}_public/{{item}}"
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0640
  with_items:
   - state
   - robots.txt

- name: build docker image
  vars:
    name: "apache"
    image_name: "custom_apache2"
    image_version: "{{apache_version}}"
    files:
      - roles/apache/templates/container/Dockerfile
  include_tasks: roles/container/shared/build_docker_image.yml
  
- name: create docker container
  docker_container:
    name: apache2
    image: "custom_apache2:{{apache_version}}"
    state: present
#    recreate: true
    env:
      TZ: "{{timezone}}"
    log_driver: journald
    log_options:
      tag: apache
    container_default_behavior: "compatibility"
    network_mode: "host"
    volumes:
      - '{{global_etc}}apache2/_.ansible.auth:/etc/apache2/_.ansible.auth:z'
      - '{{global_etc}}apache2/_.ansible.conf.d:/etc/apache2/_.ansible.conf.d:z'
      - '{{global_etc}}apache2/_.ansible.vhost.d:/etc/apache2/_.ansible.vhost.d:z'
      - '{{global_etc}}apache2/_.ansible.server.conf:/etc/apache2/_.ansible.server.conf:z'
      - '{{global_etc}}apache2/_.ansible.httpd.conf:/usr/local/apache2/conf/httpd.conf:z'
      - '{{global_etc}}letsencrypt:/etc/letsencrypt:z'

      - '{{global_log}}:{{global_log}}:z'

      - '{{htdocs_path}}:{{htdocs_path}}:z'
#    published_ports:
#      - "80:80"
#      - "443:443"
#      - "10114:10114"
  notify: "restart apache2"

#- name: clean old docker images
#  shell: "docker rmi -f $(docker images --filter \"dangling=true\" -q)"
#  when: "'custom_vsftpd' not in image_exists.stdout"
  
- name: disable old systemd service
  shell: "if [ -f /usr/lib/systemd/system/{{ 'apache2' if is_suse else 'httpd' }}.service ]; then mv /usr/lib/systemd/system/{{ 'apache2' if is_suse else 'httpd' }}.service /usr/lib/systemd/system/{{ 'apache2' if is_suse else 'httpd' }}.service.org; echo \"1\"; else echo \"0\"; fi"
  register: service_change
  changed_when: "'1' in service_change.stdout"

- name: prepare auth files
  copy:
    content: ""
    dest: "{{global_etc}}apache2/_.ansible.auth/{{item}}"
    force: no
    owner: "{{system_users['www'].name}}"
    group: "{{system_groups['www'].name}}"
    mode: 0640
  with_items:
    - .htpasswd
    - auth_openidc_users.txt
    - auth_openidc_user_fullnames.txt
    - auth_openidc_user_groups.txt
    - auth_user_fullnames.txt
    - auth_user_groups.txt
    
- name: set logrotate job
  vars:
    logrotate_path: "{{global_log}}apache2/*.log"
  copy:
    content: "{{ lookup('template', 'roles/apache/templates/logrotate') }}"
    dest: "/etc/logrotate.d/ansible_apache"
    owner: root
    group: root
    mode: 0640

# ***** FINALIZE *****
- name: copy fluentd config
  vars:
    config_file: "templates/etc/fluent/_.ansible.d/apache.conf"
  include_tasks: roles/fluentd/shared/add_config.yml
  tags: ['fluentd_config']
  when: "monitoring_enabled"
  
- name: allow letsencrypt service
  vars:
    name: "http.letsencrypt"
    rules: [ "daddr {{default_server_ip}} proto tcp dport 80" ]
  include_tasks: roles/firewall/shared/allow_service.yml
  tags: ['firewall_config']
  
- name: create systemd service
  vars:
    container_name: "apache2"
  include_tasks: roles/container/shared/add_docker_service.yml
  tags: ['systemd_watcher_config']

- name: register apache update notifier
  vars:
    name: "apache"
    type: "docker"
    url: "https://www.apachelounge.com/Changelog-2.4.html"
    config: {
      repository: "httpd", 
      pattern: "^([0-9\\.]+)$"
    }
  include_tasks: roles/update_service/shared/add_software.yml
  tags: ['update_notifier_config']
  when: "update_service_software_check_enabled"

- name: register openidc update notifier
  vars:
    name: "apache - openidc"
    type: "github"
    url: "https://github.com/OpenIDC/mod_auth_openidc/releases"
    config: { 
      project: "zmartzone/mod_auth_openidc", 
      pattern: "^v([0-9\\.]+)$",
      version: "v{{openidc_version}}" 
    }
  include_tasks: roles/update_service/shared/add_software.yml
  tags: ['update_notifier_config']
  when: "update_service_software_check_enabled"

- name: trigger apache2 handler
  vars:
    notify: "restart apache2"
    service: "apache2.service"
  include_tasks: roles/_shared/service_check.yml
