- name: install required packages
  zypper:
    name: [
        apache2 
      , python2-setuptools
      , apache2-mod_php7
      , python2-certbot-apache
    ]
    state: present
  notify: "restart apache"

- name: check certificate (develop)
  stat:
    path: /etc/certbot/live/{{server_domain}}/
  register: certificate_exists
  changed_when: not certificate_exists.stat.exists
  when: "not use_vault_files"
  
- name: prepare needed folder (develop)
  file:
    path: "/etc/{{item}}"
    state: directory
    owner: root
    group: root
    mode: 0750
  with_items:
    - "certbot/"
    - "certbot/live"
    - "certbot/live/{{server_domain}}"
  when: "not use_vault_files and not certificate_exists.stat.exists"

- name: generate openssl privatekey (develop)
  openssl_privatekey:
    path: "/etc/certbot/live/{{server_domain}}/privkey.pem"
  when: "not use_vault_files and not certificate_exists.stat.exists"
    
- name: generate openssl csr (develop)
  openssl_csr:
    path: "/etc/certbot/live/{{server_domain}}/cert.csr"
    privatekey_path: "/etc/certbot/live/{{server_domain}}/privkey.pem"
    common_name: "{{server_domain}}"
  when: "not use_vault_files and not certificate_exists.stat.exists"
    
- name: generate openssl certificate (develop)
  openssl_certificate:
    path: "/etc/certbot/live/{{server_domain}}/fullchain.pem"
    privatekey_path: "/etc/certbot/live/{{server_domain}}/privkey.pem"
    csr_path: "/etc/certbot/live/{{server_domain}}/cert.csr"
    provider: selfsigned
  when: "not use_vault_files and not certificate_exists.stat.exists"
  
- name: install certificate (production)
  unarchive:
    src: "{{ vault_files }}letsencrypt/certbot.tgz"
    dest: "/etc/"
    creates: "/etc/certbot/"
    decrypt: yes
  notify: "restart apache"
  when: "use_vault_files|bool"

# TODO add renew job
#certbot certonly --manual --preferred-challenges=dns --email {{admin_mail}} --server https://acme-v02.api.letsencrypt.org/directory --agree-tos -d *.{{server_domain}} -d {{server_domain}}

- name: prepare needed folder
  file:
    path: "{{item.dir}}"
    state: directory
    owner: "{{item.owner}}"
    group: "{{item.group}}"
    mode: 0750
  with_items:
    - { owner: wwwrun, group: www, dir: "{{htdocs_path}}" }
    - { owner: wwwrun, group: www, dir: "{{htdocs_path}}fallback/" }
    - { owner: root, group: root, dir: "/etc/apache2/_.ansible.d/" }
    - { owner: root, group: root, dir: "{{global_log}}/apache2/" }

- name: enable modules
  apache2_module:
    name: "{{item}}"
    state: present
  #register: mod_status
  #changed_when: "'already present' in mod_status.stdout"
  with_items:
    #- authz_group 
    #- header 
    - headers 
    - proxy 
    - proxy_html 
    - proxy_http 
    - proxy_balancer
    - lbmethod_bytraffic # used by proxy_balancer
    - slotmem_shm # used by proxy_balancer
    - xml2enc
    - deflate 
    - filter 
    #- apcu 
    - proxy_wstunnel 
    #- enable 
    - rewrite 
    - php7
    - substitute # needed for instar camera webui
  notify: "restart apache"
    
- name: set php configs
  lineinfile:
    path: /etc/php7/apache2/php.ini
    insertafter: '^\[{{item.block}}\]'
    regexp: '^{{item.field}}'
    line: '{{item.field}}={{item.value}}'
  with_items:
    - { block: 'opcache', field: 'opcache.enable', value: '1' }
    - { block: 'opcache', field: 'opcache.enable_cli', value: '1' }
    - { block: 'opcache', field: 'opcache.interned_strings_buffer', value: '8' }
    - { block: 'opcache', field: 'opcache.max_accelerated_files', value: '10000' }
    - { block: 'opcache', field: 'opcache.memory_consumption', value: '128' }
    - { block: 'opcache', field: 'opcache.save_comments', value: '1' }
    - { block: 'opcache', field: 'opcache.revalidate_freq', value: '1' }
  notify: "restart apache"

- name: copy config
  template:
    src: "roles/apache/templates/etc/apache2/{{item}}"
    dest: "/etc/apache2/{{item}}"
    owner: root
    group: root
    mode: 0640
  with_items:
    - listen.conf
    - _.ansible.d/auth.conf
    - _.ansible.d/services.conf
    - _.ansible.d/options.conf
    - vhosts.d/vhost-ssl.conf
  notify: "restart apache"
  when: "vault_active|bool"

- name: copy balancer fallback files
  copy:
    src: "roles/apache/templates/device404.jpg"
    dest: "{{htdocs_path}}fallback/{{item}}"
    owner: wwwrun
    group: www
  with_items:
    - cam.jpg
    - cam.mjpg
    - snapshot.cgi
    - videostream.cgi

- name: disable http vhost
  command: "mv /etc/apache2/vhosts.d/vhost.conf /etc/apache2/vhosts.d/vhost.conf.bak"
  register: command_result
  failed_when: "'command-not-found' in command_result.stderr"
  changed_when: "command_result.rc == 0"
  notify: "restart apache"

- name: set config
  lineinfile:
    path: /etc/apache2/default-server.conf
    regexp: '^{{item.field}}'
    line: '{{item.field}} {{item.value}}'
  with_items:
    - { field: 'ErrorLog', value: '{{global_log}}apache2/error.log' }
    - { field: 'Logformat', value: '"%t - %h - %u - \"%r\" - %s - %b (%D) - \"%{User-Agent}i\"" my_http_log' }
    - { field: 'CustomLog', value: '{{global_log}}apache2/access.log my_http_log' }
    - { field: 'DocumentRoot', value: '"{{htdocs_path}}"' }
    - { field: 'ServerName', value: '"{{server_domain}}"' }
  notify: "restart apache"

- name: prepare .htpasswd file
  copy:
    content: ""
    dest: "{{htdocs_path}}.htpasswd"
    force: no
    owner: wwwrun
    group: www
    mode: 0640

- name: prepare .htgroups file
  copy:
    content: ""
    dest: "{{htdocs_path}}.htgroups"
    force: no
    owner: wwwrun
    group: www
    mode: 0640

- name: set logrotate job
  vars:
    logrotate_path: "{{global_log}}apache2/*.log"
  copy:
    content: "{{ lookup('template', 'templates/logrotate_apache') }}"
    dest: "/etc/logrotate.d/ansible_apache"
    owner: root
    group: root
    mode: 0640
