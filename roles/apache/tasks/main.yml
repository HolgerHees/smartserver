- name: install required fedora packages
  yum:
    name: [
        httpd 
      #, python2-setuptools      # needed by openssl ansible module
      , python3-setuptools
      , certbot-apache
      , mod_proxy_html
    ]
    state: present
  when: ansible_distribution == 'Fedora'
  notify: "restart apache"
  
- name: install required suse packages
  zypper:
    name: [
        apache2 
      , python2-setuptools      # needed by openssl ansible module
      #, python3-setuptools
      , apache2-mod_php7
      , python2-certbot-apache
      #, python3-certbot-apache
    ]
    state: present
  when: ansible_distribution == 'openSUSE Leap'
  notify: "restart apache"
  
- name: check certificate (develop)
  stat:
    path: /etc/letsencrypt/live/{{server_domain}}/
  register: certificate_exists
  changed_when: not certificate_exists.stat.exists
  when: "not use_vault_files"
  
- name: prepare needed folder (develop)
  file:
    path: "/etc/{{item}}"
    state: directory
    owner: root
    group: root
    mode: 0750
  with_items:
    - "letsencrypt/"
    - "letsencrypt/live"
    - "letsencrypt/live/{{server_domain}}"
  when: "not use_vault_files and not certificate_exists.stat.exists"

- name: generate openssl privatekey (develop)
  openssl_privatekey:
    path: "/etc/letsencrypt/live/{{server_domain}}/privkey.pem"
  when: "not use_vault_files and not certificate_exists.stat.exists"
    
- name: generate openssl csr (develop)
  openssl_csr:
    path: "/etc/letsencrypt/live/{{server_domain}}/cert.csr"
    privatekey_path: "/etc/letsencrypt/live/{{server_domain}}/privkey.pem"
    common_name: "{{server_domain}}"
  when: "not use_vault_files and not certificate_exists.stat.exists"
    
- name: generate openssl certificate (develop)
  openssl_certificate:
    path: "/etc/letsencrypt/live/{{server_domain}}/fullchain.pem"
    privatekey_path: "/etc/letsencrypt/live/{{server_domain}}/privkey.pem"
    csr_path: "/etc/letsencrypt/live/{{server_domain}}/cert.csr"
    provider: selfsigned
  when: "not use_vault_files and not certificate_exists.stat.exists"
  
- name: install certificate (production)
  unarchive:
    src: "{{ vault_files }}letsencrypt/letsencrypt.tgz"
    dest: "/etc/"
    creates: "/etc/letsencrypt/"
    decrypt: yes
  notify: "restart apache"
  when: "use_vault_files|bool"

- name: create certificate symlink
  file:
    src: "letsencrypt"
    dest: "/etc/certbot"
    state: link
    owner: root
    group: root
    mode: 0777

# TODO add renew job
#certbot certonly --manual --preferred-challenges=dns --email {{admin_mail}} --server https://acme-v02.api.letsencrypt.org/directory --agree-tos -d *.{{server_domain}} -d {{server_domain}}

- name: prepare needed folder
  file:
    path: "{{item.dir}}"
    state: directory
    owner: "{{item.owner}}"
    group: "{{item.group}}"
    mode: 0750
  with_items:
    - { owner: "{{www_username}}", group: "{{www_group}}", dir: "{{htdocs_path}}" }
    - { owner: "{{www_username}}", group: "{{www_group}}", dir: "{{htdocs_path}}fallback/" }
    - { owner: root, group: root, dir: "{{www_etc}}_.ansible.d/" }
    - { owner: "{{ 'root' if ansible_distribution == 'openSUSE Leap' else www_username }}", group: "{{ 'root' if ansible_distribution == 'openSUSE Leap' else www_group }}", dir: "{{global_log}}apache2/" }


  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
- name: prepare needed folderon fedora
  file:
    path: "{{www_etc}}vhosts.d/"
    state: directory
    owner: root
    group: root
    mode: 0750

- name: enable modules on fedora
  lineinfile:
    path: "{{www_etc}}conf.modules.d/{{item.file}}"
    regexp: '^[#\s]*LoadModule\s*{{item.name}}_module\s*modules/{{item.prefix}}{{item.name}}.so\s*'
    line: 'LoadModule {{item.name}}_module modules/{{item.prefix}}{{item.name}}.so'
  with_items:
    - { file: "00-base.conf", name: "auth_digest", prefix: "mod_" }
    - { file: "00-base.conf", name: "headers", prefix: "mod_" }
    - { file: "00-proxy.conf", name: "proxy", prefix: "mod_" }
    - { file: "00-proxyhtml.conf", name: "proxy_html", prefix: "mod_" } 
    - { file: "00-proxy.conf", name: "proxy_http", prefix: "mod_" } 
    - { file: "00-proxy.conf", name: "proxy_balancer", prefix: "mod_" }
    - { file: "00-proxy.conf", name: "lbmethod_bytraffic", prefix: "mod_" } # used by proxy_balancer
    - { file: "00-base.conf", name: "slotmem_shm", prefix: "mod_" } # used by proxy_balancer
    - { file: "00-proxyhtml.conf", name: "xml2enc", prefix: "mod_" }
    - { file: "00-base.conf", name: "deflate", prefix: "mod_" } 
    - { file: "00-base.conf", name: "filter", prefix: "mod_" } 
    - { file: "00-proxy.conf", name: "proxy_wstunnel", prefix: "mod_" } 
    - { file: "00-base.conf", name: "rewrite", prefix: "mod_" } 
    - { file: "15-php.conf", name: "php7", prefix: "lib" }
    - { file: "00-base.conf", name: "substitute", prefix: "mod_" } # needed for instar camera webui
  notify: "restart apache"
  when: ansible_distribution == 'Fedora'
  
- name: disable default LISTEN on fedora
  lineinfile:
    path: "{{www_etc}}{{item.file}}"
    backrefs: yes
    regexp: '{{item.regex}}'
    line: '{{item.line}}'
  with_items:
    - { file: "conf/httpd.conf", regex: "^(Listen.*)", line: "#\\1" }
    - { file: "conf.d/ssl.conf", regex: "^(Listen.*)", line: "#\\1" }
  notify: "restart apache"
  when: ansible_distribution == 'Fedora'

- name: set server config on fedora
  lineinfile:
    path: "{{www_etc}}conf/httpd.conf"
    regexp: '^[#]*{{item.regex}}'
    line: '{{item.line}}'
  with_items:
    - { regex: "Include {{www_etc}}listen\\.conf", line: "Include {{www_etc}}listen.conf" }
    - { regex: "Include {{www_etc}}vhosts.d/vhost-ssl\\.conf", line: "Include {{www_etc}}vhosts.d/vhost-ssl.conf" }
    - { regex: 'ErrorLog', line: 'ErrorLog "{{global_log}}apache2/error.log"' }
    - { regex: 'Logformat.*?my_http_log', line: 'Logformat "%t - %h - %u - \"%r\" - %s - %b (%D) - \"%{User-Agent}i\"" my_http_log' }
    - { regex: 'CustomLog.*?my_http_log', line: 'CustomLog "{{global_log}}apache2/access.log" my_http_log' }
    - { regex: 'DocumentRoot', line: 'DocumentRoot "{{htdocs_path}}"' }
    - { regex: 'ServerName', line: 'ServerName "{{server_domain}}"' }
  notify: "restart apache"
  when: ansible_distribution == 'Fedora'
  
- name: set selinux configuration on fedora
  shell: "{{item}}"
  with_items:
    - "semanage port -a -t http_port_t -p tcp 10114"
    - "semanage fcontext -a -t httpd_log_t \"{{global_log}}apache2(/.*)?\""
    - "restorecon -Rv {{global_log}}apache2/"
  register: selinux_config_exists
  changed_when: "'already defined' not in selinux_config_exists.stderr"
  failed_when: false #"http_port_exists.rc == 1 and 'already defined' not in http_port_exists.stderr"
  when: ansible_distribution == 'Fedora'
  
  
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
- name: enable modules on suse
  apache2_module:
    name: "{{item}}"
    state: present
  with_items:
    - auth_digest
    - headers 
    - proxy 
    - proxy_html 
    - proxy_http 
    - proxy_balancer
    - lbmethod_bytraffic # used by proxy_balancer
    - slotmem_shm # used by proxy_balancer
    - xml2enc
    - deflate 
    - filter 
    #- apcu 
    - proxy_wstunnel 
    #- enable 
    - rewrite 
    - php7
    - substitute # needed for instar camera webui
  notify: "restart apache"
  when: ansible_distribution == 'openSUSE Leap'
    
- name: set web config on suse # fedora is using a shared one (cli & web)
  import_tasks: roles/php/tasks/php_ini.yml
  vars:
    php_ini_file: "/etc/php7/apache2/php.ini"
  notify: "restart apache"
  when: ansible_distribution == 'openSUSE Leap'
  
- name: disable http vhost on suse
  shell: "if [ -f {{www_etc}}vhosts.d/vhost.conf ]; then mv {{www_etc}}vhosts.d/vhost.conf {{www_etc}}vhosts.d/vhost.conf.org; echo \"1\"; else echo \"0\"; fi"
  register: vhost_change
  changed_when: "'1' in vhost_change.stdout"
  notify: "restart apache"
  when: ansible_distribution == 'openSUSE Leap'

- name: set server config on suse
  lineinfile:
    path: "{{www_etc}}default-server.conf"
    regexp: '^[#]*{{item.field}} '
    line: '{{item.field}} {{item.value}}'
  with_items:
    - { field: 'ErrorLog', value: '{{global_log}}apache2/error.log' }
    - { field: 'Logformat', value: '"%t - %h - %u - \"%r\" - %s - %b (%D) - \"%{User-Agent}i\"" my_http_log' }
    - { field: 'CustomLog', value: '{{global_log}}apache2/access.log my_http_log' }
    - { field: 'DocumentRoot', value: '"{{htdocs_path}}"' }
    - { field: 'ServerName', value: '"{{server_domain}}"' }
  notify: "restart apache"
  when: ansible_distribution == 'openSUSE Leap'
 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
- name: copy config
  template:
    src: "roles/apache/templates/etc/apache2/{{item}}"
    dest: "{{www_etc}}{{item}}"
    owner: root
    group: root
    mode: 0640
  with_items:
    - listen.conf
    - _.ansible.d/auth.conf
    - _.ansible.d/services.conf
    - _.ansible.d/options.conf
    - vhosts.d/vhost-ssl.conf
  notify: "restart apache"
  when: "vault_active|bool"

- name: copy balancer fallback files
  copy:
    src: "roles/apache/templates/device404.jpg"
    dest: "{{htdocs_path}}fallback/{{item}}"
    owner: "{{www_username}}"
    group: "{{www_group}}"
  with_items:
    - cam.jpg
    - cam.mjpg
    - snapshot.cgi
    - videostream.cgi

- name: copy fluentd config
  template:
    src: "roles/apache/templates/etc/fluent/_.ansible.d/apache.conf"
    dest: "/etc/fluent/_.ansible.d/apache.conf"
    owner: root
    group: root
    mode: 0640
  notify: "restart fluentd"
  tags: ['fluentd']

- name: prepare .htpasswd file
  copy:
    content: ""
    dest: "{{htdocs_path}}.htpasswd"
    force: no
    owner: "{{www_username}}"
    group: "{{www_group}}"
    mode: 0640

- name: prepare .htdigest file
  copy:
    content: ""
    dest: "{{htdocs_path}}.htdigest"
    force: no
    owner: "{{www_username}}"
    group: "{{www_group}}"
    mode: 0640

- name: prepare .htgroups file
  copy:
    content: ""
    dest: "{{htdocs_path}}.htgroups"
    force: no
    owner: "{{www_username}}"
    group: "{{www_group}}"
    mode: 0640

- name: set logrotate job
  vars:
    logrotate_path: "{{global_log}}apache2/*.log"
  copy:
    content: "{{ lookup('template', 'templates/logrotate_apache') }}"
    dest: "/etc/logrotate.d/ansible_apache"
    owner: root
    group: root
    mode: 0640

