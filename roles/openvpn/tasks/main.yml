- name: install required packages => is_fedora
  yum:
    name: [
        openvpn
      #, openvpn-auth-pam-plugin
      , easy-rsa
    ]
    state: present
  when: is_fedora|bool

- name: install required packages => is_suse
  zypper:
    name: [
        openvpn
      #, openvpn-auth-pam-plugin
      , easy-rsa
    ]
    state: present
  when: is_suse|bool
  
- name: prepare needed easyrsa folder
  file:
    path: '/etc/{{item}}'
    state: directory
    owner: root
    group: root
    mode: 0755
  with_items:
    - easy-rsa
    - easy-rsa/pki
    - easy-rsa/issued
    - easy-rsa/private
    - easy-rsa/reqs

- name: copy files => is_fedora
  copy:
    src: "{{item.src}}"
    dest: "{{item.target}}"
    owner: root
    group: root
    mode: "{{item.permissions}}"
  with_items:
    - { permissions: "u=rw,g=r,o=r", src: "/usr/share/easy-rsa/3/openssl-easyrsa.cnf", target: "/etc/easy-rsa/" }
    - { permissions: "u=rw,g=r,o=r", src: "/usr/share/easy-rsa/3/x509-types", target: "/etc/easy-rsa/" }
    - { permissions: "u=rwx,g=rx,o=rx", src: "/usr/share/easy-rsa/3/easyrsa", target: "/usr/bin/easyrsa" }
  when: is_fedora|bool
  
- name: copy config => is_fedora
  copy:
    src: "/usr/lib/systemd/system/openvpn-client@.service"
    dest: "/usr/lib/systemd/system/openvpn@.service"
    owner: root
    group: root
    mode: 0640
    force: no
  when: is_fedora|bool

- name: modify openvpn systemd service => is_fedora
  lineinfile:
    path: "/usr/lib/systemd/system/openvpn@.service"
    regex: "^ExecStart="
    line: "ExecStart=/usr/sbin/openvpn --daemon --suppress-timestamps --cd /etc/openvpn/ --config %i.conf"
  when: is_fedora|bool

# **** VPN CERTIFICATES - check ****
- name: check easyrsa certificate
  stat:
    path: /etc/easy-rsa/pki/ca.crt
  register: certificate_file
  changed_when: not certificate_file.stat.exists

- name: check for vault easy-rsa files => is_production and certificate_file does not exists
  stat:
    path: "{{config_path}}vault/easy-rsa/"
  register: vault_easy_rsa_files
  changed_when: vault_easy_rsa_files.stat.exists
  when: is_production and not certificate_file.stat.exists

- name: decide to create or restore easy_rsa certificates
  set_fact: 
    easy_rsa_file_mode: "{% if vault_easy_rsa_files.stat is defined and vault_easy_rsa_files.stat.exists %}vault{% elif not certificate_file.stat.exists %}create{% endif %}"
  changed_when: not certificate_file.stat.exists
  
# **** VPN CERTIFICATES - process ****

# https://en.opensuse.org/SDB:OpenVPN_Installation_and_Setup
# cp /etc/easy-rsa
# cd /etc/easy-rsa
# easyrsa clean-all
# easyrsa build-ca
# easyrsa build-server-full server
# easyrsa build-client-full mobile
# easyrsa gen-dh
- name: init easyrsa certificates => easy_rsa_file_mode =='create'
  shell: "{{item}}"
  args:
    chdir: '/etc/easy-rsa'
  with_items:
    - "echo 'yes' | easyrsa clean-all"
    - "echo 'yes' | easyrsa init-pki"
  when: "easy_rsa_file_mode =='create'"

- name: Create a symbolic config link => is_fedora and easy_rsa_file_mode =='create'
  file:
    src: "/etc/easy-rsa/{{item}}"
    dest: "/etc/easy-rsa/pki/{{item}}"
    state: link
    follow: no
    owner: root
    group: root
  with_items:
    - openssl-easyrsa.cnf
    - x509-types
  when: "is_fedora|bool and easy_rsa_file_mode =='create'"
  
#- name: init easyrsa => easy_rsa_file_mode =='create'
#  command: "echo 'yes' | easyrsa init-pki"
#  args:
#    chdir: '/etc/easy-rsa'
#  notify: "restart openvpn@mobile"
#  when: "easy_rsa_file_mode =='create'"
  
- name: generate easyrsa ca => easy_rsa_file_mode =='create'
  expect:
    command: "easyrsa build-ca"
    chdir: '/etc/easy-rsa'
    responses:
      Enter New CA Key Passphrase: "{{server_vpn_pass_mobile}}"
      Verifying - Enter New CA Key Passphrase: "{{server_vpn_pass_mobile}}"
      Common Name: "{{server_name}}"
  notify: "restart openvpn@mobile"
  when: "easy_rsa_file_mode =='create'"
    
- name: generate easyrsa certificate => easy_rsa_file_mode =='create'
  expect:
    command: "{{item}}"
    chdir: '/etc/easy-rsa'
    responses:
      Enter PEM pass phrase: "{{server_vpn_pass_mobile}}"
      Verifying - Enter PEM pass phrase: "{{server_vpn_pass_mobile}}"
      Enter pass phrase for: "{{server_vpn_pass_mobile}}"
  notify: "restart openvpn@mobile"
  with_items:
    - "easyrsa build-server-full server"
    - "easyrsa build-client-full mobile"
  when: "easy_rsa_file_mode =='create'"

- name: init easyrsa gen-dh => easy_rsa_file_mode =='create'
  shell: "easyrsa gen-dh"
  args:
    chdir: '/etc/easy-rsa'
  notify: "restart openvpn@mobile"
  when: "easy_rsa_file_mode =='create'"

- name: copy easy-rsa certificates => easy_rsa_file_mode =='vault'
  copy:
    src: "{{config_path}}vault/easy-rsa/{{item.path}}"
    dest: "/etc/easy-rsa/pki/{{item.path}}"
    decrypt: yes
    owner: root
    group: root
    mode: "{{item.mode}}"
  with_items:
    - { mode: "u=rw,g=r,o=", path: "issued/server.crt" }
    - { mode: "u=rw,g=r,o=", path: "issued/mobile.crt" }
    - { mode: "u=rw,g=,o=", path: "private/ca.key" }
    - { mode: "u=rw,g=,o=", path: "private/server.key" }
    - { mode: "u=rw,g=,o=", path: "private/mobile.key" }
    - { mode: "u=rw,g=,o=", path: "reqs/server.req" }
    - { mode: "u=rw,g=,o=", path: "reqs/mobile.req" }
    - { mode: "u=rw,g=r,o=", path: "ca.crt" }
    - { mode: "u=rw,g=r,o=", path: "dh.pem" }
#    - "certs_by_serial/76C34AF12707764CFBBE86AA4BB64751.pem"  // server.crt
#    - "certs_by_serial/B0C6214224191008AE8BF1D26F09D2B1.pem"  // mobile.crt
#    - "private/server.pass"
#    - "serial"
#    - "index.txt.attr"
#    - "index.txt"
  notify: "restart openvpn@mobile"
  when: "easy_rsa_file_mode =='vault'"
  
- name: copy server pass => vault_active
  copy:
    content: "{{server_vpn_pass_mobile}}"
    dest: "/etc/openvpn/mobile_certificate.pass"
    decrypt: yes
    owner: root
    group: root
    mode: 0600
  notify: "restart openvpn@mobile"
  when: "vault_active|bool"
  
# **** CLOUD VPN SHARED KEY - check ****
- name: check shared key
  stat:
    path: /etc/openvpn/cloud_shared.key
  register: shared_key_file
  changed_when: not shared_key_file.stat.exists

- name: check for vault shared key file => is_production and shared_key_file does not exists
  stat:
    path: "{{config_path}}vault/openvpn/cloud_shared.key"
  register: vault_shared_key_file
  changed_when: vault_shared_key_file.stat.exists
  when: is_production and not shared_key_file.stat.exists

- name: decide to create or restore openvpn shared key
  set_fact: 
    openvpn_shared_key_mode: "{% if vault_shared_key_file.stat is defined and vault_shared_key_file.stat.exists %}vault{% elif not shared_key_file.stat.exists %}create{% endif %}"
  changed_when: not shared_key_file.stat.exists

# **** CLOUD VPN SHARED KEY - process ****
- name: generate shared key => openvpn_shared_key_mode == 'create'
  shell: "openvpn --genkey --secret /etc/openvpn/cloud_shared.key"
  notify: "restart openvpn@cloud"
  when: "openvpn_shared_key_mode == 'create'"
    
- name: copy shared keys => openvpn_shared_key_mode == 'vault'
  copy:
    src: "{{config_path}}vault/openvpn/cloud_shared.key"
    dest: "/etc/openvpn/cloud_shared.key"
    decrypt: yes
    owner: root
    group: root
    mode: 0600
  notify: "restart openvpn@cloud"
  when: "openvpn_shared_key_mode == 'vault'"

# **** CONFIGS ****
- name: get ca content => vault_active
  shell: cat /etc/easy-rsa/pki/ca.crt
  register: file_ca_crt
  changed_when: no
  when: "vault_active|bool"
  
- name: get crt content => vault_active
  shell: cat /etc/easy-rsa/pki/issued/mobile.crt
  register: file_mobile_crt
  changed_when: no
  when: "vault_active|bool"
  
- name: get key content => vault_active
  shell: cat /etc/easy-rsa/pki/private/mobile.key
  register: file_mobile_key
  changed_when: no
  when: "vault_active|bool"
  
- name: prepare ovpn certificate vars => vault_active
  set_fact:
    ca_crt: "{{file_ca_crt.stdout}}"
    mobile_crt: "-----BEGIN CERTIFICATE-----{{file_mobile_crt.stdout.split('-----BEGIN CERTIFICATE-----')[1]}}"
    mobile_key: "{{file_mobile_key.stdout}}"
  changed_when: no
  when: "vault_active|bool"
  
#- name: prepare ovpn certificate vars => vault_active
#  set_fact:
#    ca_crt: "{{ lookup('file', '/etc/easy-rsa/pki/ca.crt')}}"
#    mobile_crt: "-----BEGIN CERTIFICATE-----{{ lookup('file','/etc/easy-rsa/pki/issued/mobile.crt').split('-----BEGIN CERTIFICATE-----')[1]}}"
#    mobile_key: "{{ lookup('file','/etc/easy-rsa/pki/private/mobile.key')}}"
#  changed_when: no
#  when: "vault_active|bool"
  
- name: copy config => vault_active
  template:
    src: "roles/openvpn/templates/{{item}}"
    dest: "/etc/openvpn/{{item}}"
    owner: root
    group: root
    mode: 0640
  with_items:
    - "cloud.conf"
    - "mobile.conf"
    - "mobile.ovpn"
  notify: "restart openvpn"
  when: "vault_active|bool"
  
#semanage port -a -t openvpn_port_t -p tcp  5517

# **** SELINUX MODULE COMPILATION ****
# sudo grep 'openvpn' /var/log/audit/audit.log | audit2allow -m openvpn_smtp_port > openvpn_smtp_port.te
# needed for openvpn on smtp port (smtp is used to avoid blocking firewalls)
#- name: check for selinux (openvpn/smtp) port module => is_fedora
#  shell: "semodule -l | grep \"openvpn_smtp_port.te\""
#  register: semodule_result 
#  changed_when: semodule_result.rc == 1
#  failed_when: no
#  when: is_fedora|bool

#- name: compile selinux (openvpn/smtp) port module => is_fedora and semodule does not exists
#  shell: "{{item}}" 
#  with_items:
#    - "checkmodule -M -m -o {{global_tmp}}openvpn_smtp_port.te.mod roles/openvpn/templates/selinux/openvpn_smtp_port.te.te"
#    - "semodule_package -o {{global_tmp}}openvpn_smtp_port.te.pp -m {{global_tmp}}openvpn_smtp_port.te.mod"
#    - "semodule -i {{global_tmp}}openvpn_smtp_port.te.pp"
#  when: "is_fedora|bool and semodule_result.rc == 1"

#- name: cleanup selinux module build => is_fedora and semodule does not exists
#  file: 
#    path: "{{item}}"
#    state: absent
#  with_items:
#    - "{{global_tmp}}openvpn_smtp_port.te.mod"
#    - "{{global_tmp}}openvpn_smtp_port.te.pp"
#  when: "is_fedora|bool and semodule_result.rc == 1"
# **********************************************
