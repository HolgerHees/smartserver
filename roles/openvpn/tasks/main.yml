- name: install required packages (is_fedora)
  yum:
    name: [
        openvpn
      #, openvpn-auth-pam-plugin
      , easy-rsa
    ]
    state: present
  when: is_fedora|bool

- name: install required packages (is_suse)
  zypper:
    name: [
        openvpn
      #, openvpn-auth-pam-plugin
      , easy-rsa
    ]
    state: present
  when: is_suse|bool
  
- name: prepare needed easyrsa folder (is_fedora)
  file:
    path: '/etc/easy-rsa'
    state: directory
    owner: root
    group: root
    mode: 0755
  when: is_fedora|bool

- name: copy files (is_fedora)
  copy:
    src: "{{item.src}}"
    dest: "{{item.target}}"
    owner: root
    group: root
    mode: "{{item.permissions}}"
  with_items:
    - { permissions: "u=rw,g=r,o=r", src: "/usr/share/easy-rsa/3/openssl-easyrsa.cnf", target: "/etc/easy-rsa/" }
    - { permissions: "u=rw,g=r,o=r", src: "/usr/share/easy-rsa/3/x509-types", target: "/etc/easy-rsa/" }
    - { permissions: "u=rwx,g=rx,o=rx", src: "/usr/share/easy-rsa/3/easyrsa", target: "/usr/bin/easyrsa" }
  when: is_fedora|bool
  
- name: copy config (is_fedora)
  copy:
    src: "/usr/lib/systemd/system/openvpn-client@.service"
    dest: "/usr/lib/systemd/system/openvpn@.service"
    owner: root
    group: root
    mode: 0640
    force: no
  when: is_fedora|bool

- name: modify openvpn systemd service (is_fedora)
  lineinfile:
    path: "/usr/lib/systemd/system/openvpn@.service"
    regex: "^ExecStart="
    line: "ExecStart=/usr/sbin/openvpn --daemon --suppress-timestamps --cd /etc/openvpn/ --config %i.conf"
  when: is_fedora|bool

# **** MOBILE VPN CERTIFICATES ****
- name: check easyrsa (not use_vault_files)
  stat:
    path: /etc/easy-rsa/pki
  register: pki_exists
  changed_when: not pki_exists.stat.exists
  when: "not use_vault_files"
  
# https://en.opensuse.org/SDB:OpenVPN_Installation_and_Setup
# cp /etc/easy-rsa
# cd /etc/easy-rsa
# easyrsa clean-all
# easyrsa build-ca
# easyrsa build-server-full server
# easyrsa build-client-full mobile
# easyrsa gen-dh
- name: init easyrsa certificates (not use_vault_files and pki does not exists)
  shell: "{{item}}"
  args:
    chdir: '/etc/easy-rsa'
  with_items:
    - "echo 'yes' | easyrsa clean-all"
    - "echo 'yes' | easyrsa init-pki"
  when: "not use_vault_files and not pki_exists.stat.exists"

- name: Create a symbolic config link on fedora (is_fedora, not use_vault_files and pki does not exists)
  file:
    src: "/etc/easy-rsa/{{item}}"
    dest: "/etc/easy-rsa/pki/{{item}}"
    state: link
    follow: no
    owner: root
    group: root
  with_items:
    - openssl-easyrsa.cnf
    - x509-types
  when: "is_fedora|bool and not use_vault_files and not pki_exists.stat.exists"
  
#- name: init easyrsa (not use_vault_files and pki does not exists)
#  command: "echo 'yes' | easyrsa init-pki"
#  args:
#    chdir: '/etc/easy-rsa'
#  notify: "restart openvpn@mobile"
#  when: "not use_vault_files and not pki_exists.stat.exists"
  
- name: generate easyrsa ca (not use_vault_files and pki does not exists)
  expect:
    command: "easyrsa build-ca"
    chdir: '/etc/easy-rsa'
    responses:
      Enter New CA Key Passphrase: "{{server_vpn_pass_mobile}}"
      Verifying - Enter New CA Key Passphrase: "{{server_vpn_pass_mobile}}"
      Common Name: "{{server_name}}"
  notify: "restart openvpn@mobile"
  when: "not use_vault_files and not pki_exists.stat.exists"
    
- name: generate easyrsa certificate (not use_vault_files and pki does not exists)
  expect:
    command: "{{item}}"
    chdir: '/etc/easy-rsa'
    responses:
      Enter PEM pass phrase: "{{server_vpn_pass_mobile}}"
      Verifying - Enter PEM pass phrase: "{{server_vpn_pass_mobile}}"
      Enter pass phrase for: "{{server_vpn_pass_mobile}}"
  notify: "restart openvpn@mobile"
  with_items:
    - "easyrsa build-server-full server"
    - "easyrsa build-client-full mobile"
  when: "not use_vault_files and not pki_exists.stat.exists"

- name: init easyrsa gen-dh (not use_vault_files and pki does not exists)
  shell: "easyrsa gen-dh"
  args:
    chdir: '/etc/easy-rsa'
  notify: "restart openvpn@mobile"
  when: "not use_vault_files and not pki_exists.stat.exists"

- name: copy easy-rsa certificates (use_vault_files)
  copy:
    src: "{{ vault_files }}easy-rsa/{{item.path}}"
    dest: "/etc/easy-rsa/pki/{{item.path}}"
    decrypt: yes
    owner: root
    group: root
    mode: "{{item.mode}}"
  with_items:
#    - "certs_by_serial/76C34AF12707764CFBBE86AA4BB64751.pem"  // server.crt
#    - "certs_by_serial/B0C6214224191008AE8BF1D26F09D2B1.pem"  // mobile.crt
    - { mode: "u=rw,g=r,o=", path: "issued/server.crt" }
    - { mode: "u=rw,g=r,o=", path: "issued/mobile.crt" }
    - { mode: "u=rw,g=,o=", path: "private/ca.key" }
    - { mode: "u=rw,g=,o=", path: "private/server.key" }
    - { mode: "u=rw,g=,o=", path: "private/mobile.key" }
#    - "private/server.pass"
    - { mode: "u=rw,g=,o=", path: "reqs/server.req" }
    - { mode: "u=rw,g=,o=", path: "reqs/mobile.req" }
#    - "serial"
    - { mode: "u=rw,g=r,o=", path: "ca.crt" }
#    - "index.txt.attr"
#    - "index.txt"
    - { mode: "u=rw,g=r,o=", path: "dh.pem" }
  notify: "restart openvpn@mobile"
  when: "use_vault_files|bool"
  
- name: copy server pass (vault_active)
  copy:
    content: "{{server_vpn_pass_mobile}}"
    dest: "/etc/openvpn/mobile_certificate.pass"
    decrypt: yes
    owner: root
    group: root
    mode: 0600
  notify: "restart openvpn@mobile"
  when: "vault_active|bool"
  
# **** CLOUD VPN SHARED KEY ****
- name: check shared key (not use_vault_files)
  stat:
    path: /etc/openvpn/cloud_shared.key
  register: key_exists
  changed_when: not key_exists.stat.exists
  when: "not use_vault_files"
  
- name: generate shared key (not use_vault_files and key does not exists)
  shell: "openvpn --genkey --secret /etc/openvpn/cloud_shared.key"
  notify: "restart openvpn@cloud"
  when: "not use_vault_files and not key_exists.stat.exists"
    
- name: copy shared keys (use_vault_files)
  template:
    src: "{{ vault_files }}openvpn/cloud_shared.key"
    dest: "/etc/openvpn/cloud_shared.key"
    decrypt: yes
    owner: root
    group: root
    mode: 0600
  notify: "restart openvpn@cloud"
  when: "use_vault_files|bool"

# **** CONFIGS ****
- name: get ca content (vault_active)
  shell: cat /etc/easy-rsa/pki/ca.crt
  register: file_ca_crt
  changed_when: no
  when: "vault_active|bool"
  
- name: get crt content (vault_active)
  shell: cat /etc/easy-rsa/pki/issued/mobile.crt
  register: file_mobile_crt
  changed_when: no
  when: "vault_active|bool"
  
- name: get key content (vault_active)
  shell: cat /etc/easy-rsa/pki/private/mobile.key
  register: file_mobile_key
  changed_when: no
  when: "vault_active|bool"
  
- name: prepare ovpn certificate vars (vault_active)
  set_fact:
    ca_crt: "{{file_ca_crt.stdout}}"
    mobile_crt: "-----BEGIN CERTIFICATE-----{{file_mobile_crt.stdout.split('-----BEGIN CERTIFICATE-----')[1]}}"
    mobile_key: "{{file_mobile_key.stdout}}"
  changed_when: no
  when: "vault_active|bool"
  
#- name: prepare ovpn certificate vars (vault_active)
#  set_fact:
#    ca_crt: "{{ lookup('file', '/etc/easy-rsa/pki/ca.crt')}}"
#    mobile_crt: "-----BEGIN CERTIFICATE-----{{ lookup('file','/etc/easy-rsa/pki/issued/mobile.crt').split('-----BEGIN CERTIFICATE-----')[1]}}"
#    mobile_key: "{{ lookup('file','/etc/easy-rsa/pki/private/mobile.key')}}"
#  changed_when: no
#  when: "vault_active|bool"
  
- name: copy config (vault_active)
  template:
    src: "roles/openvpn/templates/{{item}}"
    dest: "/etc/openvpn/{{item}}"
    owner: root
    group: root
    mode: 0640
  with_items:
    - "cloud.conf"
    - "mobile.conf"
    - "mobile.ovpn"
  notify: "restart openvpn"
  when: "vault_active|bool"
