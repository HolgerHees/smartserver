- name: set active network
  set_fact:
    wg_active_network: "{{main_network | default(vault_cloud_vpn_networks | first)}}"
  tags: [ 'update_notifier_configs' ]
    
- name: prepare cloud settings
  set_fact:
    wg_is_main_network: "{{wg_active_network == (vault_cloud_vpn_networks | first)}}"
    wg_cloud_network: "{{vault_cloud_vpn_networks[wg_active_network]}}"
    wg_etc_dir_name: "wireguard_{{wg_active_network}}"
    wg_data_dir_name: "cloud{{ '' if wg_active_network == (vault_cloud_vpn_networks | first) else '_' + wg_active_network }}"
    wg_build_dir_name: "wireguard_{{wg_active_network}}"
    wg_container_name: "wireguard_{{wg_active_network}}"
    wg_image_name: "custom_wireguard_cloud"
    wg_exposed_port: "51820"
    
- name: prepare needed folder
  file:
    path: "{{item}}"
    state: directory
    owner: "root"
    group: "root"
    mode: 700
  with_items:
    - "{{global_etc}}{{wg_etc_dir_name}}"
    - "{{global_etc}}{{wg_etc_dir_name}}/keys"
    - "{{global_etc}}{{wg_etc_dir_name}}/util"

- name: prepare cloud folder
  file:
    path: "{{item}}"
    state: directory
    owner: "root"
    group: "root"
    mode: 0750
  with_items:
    - "{{raid_path}}{{wg_data_dir_name}}"
    - "{{raid_path}}{{wg_data_dir_name}}/export"
    - "{{raid_path}}{{wg_data_dir_name}}/mount"

- name: prepare nfs exported folder
  file:
    path: "{{raid_path}}{{wg_data_dir_name}}/export/{{item}}"
    state: directory
    owner: "root"
    group: "root"
    mode: 0750
  with_items: "{{wg_cloud_network.peers}}"

- name: prepare nfs mount points
  file:
    path: "{{raid_path}}{{wg_data_dir_name}}/mount/{{item}}"
    state: directory
    owner: "root"
    group: "root"
    mode: 0750
  with_items: "{{wg_cloud_network.peers}}"

- name: check for vault keys
  stat:
    path: "{{config_path}}vault/{{wg_etc_dir_name}}"
  register: key_directory

- name: copy keys => is_production and key_directory exists
  copy:
    src: "{{config_path}}vault/{{wg_etc_dir_name}}"
    dest: "{{global_etc}}{{wg_etc_dir_name}}keys/"
    decrypt: yes
    owner: root
    group: root
    mode: 0600
  when: "is_production|bool and key_directory.stat.exists"

- name: copy util
  template:
    src: "roles/wireguard_cloud/templates/util/{{item}}"
    dest: "{{global_etc}}{{wg_etc_dir_name}}/util/{{item}}"
    owner: root
    group: root
    mode: 0700
  with_items:
    - wg-startup.sh
  notify: "restart wireguard_cloud"

- name: build docker image
  vars:
    name: "{{wg_build_dir_name}}"
    image_name: "{{wg_image_name}}"
    image_version: "{{alpine_version}}"
    files:
      - roles/wireguard_cloud/templates/container/Dockerfile
  import_tasks: roles/container/tasks/build_docker_image.yml

- name: connect cloud container
  docker_network:
    name: cloud
    appends: yes

- name: create docker container
  docker_container:
    name: "{{wg_container_name}}"
    image: "{{wg_image_name}}:{{alpine_version}}"
    state: present
    network_mode: "none"
#    recreate: true
    env:
      TZ: "{{timezone}}"
    log_driver: journald
    log_options:
      tag: "{{wg_container_name}}"
    #capabilities:
    #  - NET_ADMIN
    #  - SYS_MODULE
    #  - SYS_ADMIN
    #  - SETPCAP
    privileged: yes
    #domainname : "cloud"
    #hostname: "nfsd"
    networks:
      - name: "cloud"
    networks_cli_compatible: yes
    volumes:
      - '{{global_etc}}{{wg_etc_dir_name}}:/etc/wireguard:z'
      - '{{raid_path}}{{wg_data_dir_name}}:/cloud:z,rshared'
    ports:
    # - "2050:2049/tcp"
     - "{{wg_cloud_network.interface.listenPort}}:{{wg_exposed_port}}/udp"
  notify: "restart wireguard_cloud"

#- name: clean old docker images => image does not exists
#  shell: "docker rmi -f $(docker images --filter \"dangling=true\" -q)"
#  when: "wg_image_name not in image_exists.stdout"
  
# ***** FINALIZE *****
- name: create systemd service
  vars:
    container_name: "{{wg_container_name}}"
    trigger_name: "wireguard_cloud"
  import_tasks: roles/container/tasks/add_docker_service.yml

- name: trigger wireguard_cloud handler
  vars:
    notify: "restart wireguard_cloud"
    service: "{{wg_container_name}}.service"
  import_tasks: roles/base/tasks/service_check.yml
  #when: "wg_is_main_network"
