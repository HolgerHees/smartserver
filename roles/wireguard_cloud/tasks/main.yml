- name: prepare needed directories
  vars:
    directories:
      - { mode: "u=rwx,g=,o=", owner: "root", group: "root", path: "{{global_etc}}wireguard_cloud" }
      - { mode: "u=rwx,g=,o=", owner: "root", group: "root", path: "{{global_etc}}wireguard_cloud/keys" }
      - { mode: "u=rwx,g=,o=", owner: "root", group: "root", path: "{{config_path}}vault/wireguard_cloud/" }
  include_tasks: roles/_shared/create_directories.yml

- name: check for vault keys
  find:
    paths: "{{config_path}}vault/wireguard_cloud"
  delegate_to: 127.0.0.1
  register: key_directory

- name: copy keys => is_production and key_directory exists
  copy:
    src: "{{config_path}}vault/wireguard_cloud/"
    dest: "{{global_etc}}wireguard_cloud/keys/"
    decrypt: yes
    owner: root
    group: root
    mode: 0600
  when: "is_production and key_directory.matched > 0"

- name: generate server keys if not exists
  shell: "cd {{global_etc}}wireguard_cloud/keys/ && ([ ! -f ./server_privatekey ] || [ ! -f ./server_publickey ]) && wg genkey | tee ./server_privatekey | wg pubkey > ./server_publickey"
  register: stat_server_key_result
  changed_when: "stat_server_key_result.rc==0"
  failed_when: False
  
- name: backup server keys
  copy:
    src: "{{global_etc}}/wireguard_cloud/keys/"
    dest: "{{config_path}}vault/wireguard_cloud/"
  when: "is_production and ( stat_server_key_result.changed or key_directory.matched != 2 )"
  
- name: fetch keys
  fetch:
    src: "{{global_etc}}wireguard_cloud/keys/{{item}}"
    dest: "/tmp/ansible/wireguard_cloud/{{item}}"
    flat: yes
  with_items: 
    - "server_publickey"
    - "server_privatekey"
  changed_when: no
  
- name: collect server keys
  set_fact:
    wg_cloud_server_privatekey: "{{lookup('file', '/tmp/ansible/wireguard_cloud/server_privatekey')}}"
    wg_cloud_server_publickey: "{{lookup('file', '/tmp/ansible/wireguard_cloud/server_publickey')}}"

- name: clean keys
  file:
    path: "/tmp/ansible/wireguard_cloud/"
    state: absent
  changed_when: no
  
- name: copy server config
  template:
    src: "templates/{{item}}"
    dest: "{{ global_etc }}wireguard_cloud/{{item}}"
    mode: 0600
  notify: "restart wireguard_cloud"
  with_items:
    - "wg0.conf"

- name: build podman image
  vars:
    container_name: "wireguard_cloud"
    image_name: "custom_wireguard_cloud:{{alpine_version}}"
    image_files:
      - roles/wireguard_cloud/templates/container/Dockerfile
    entrypoint_startup:
      - "ip link del dev wg0 > /dev/null 2>&1"
      - "wg-quick up /etc/wireguard/wg0.conf 2>&1"
    entrypoint_shutdown:
      - "wg-quick down wg0 2>&1"
    entrypoint_check: "while wg show | grep -q 'wg0'; do sleep 60 & wait $!; done"
  include_tasks: roles/container/shared/build_podman_image.yml

- name: create podman network
  vars:
    network_name: "cloud_vpn"
    network_subnet: "{{cloud_vpn.interface.network}}"
    network_gateway: "{{vpn_cloud_services.local.bridge}}"
    network_internal: no
    network_firewall_subnet: "{{vpn_cloud_subnet}}.0.0/16"
  include_tasks: roles/container/shared/create_podman_network.yml
  tags: ['firewall_config']

- name: prepare published_ports
  set_fact:
    wireguard_cloud_published_ports: |
      [
        "{{cloud_vpn.interface.port}}:{{cloud_vpn.interface.port}}/udp",
        {% if default_server_ipv6 is defined %}
          "[::]:{{cloud_vpn.interface.port}}:{{cloud_vpn.interface.port}}/udp",
        {% endif %}
      ]
  tags: ['firewall_config']
  
- name: create podman container
  containers.podman.podman_container:
    name: "wireguard_cloud"
    image: "custom_wireguard_cloud:{{alpine_version}}"
    state: present
    security_opt:
      - label=disable
    env:
      TZ: "{{timezone}}"
    log_driver: journald
    log_options:
      tag: "wireguard_cloud"
    #capabilities:
    #  - NET_ADMIN
    #  - SYS_MODULE
    #  - SYS_ADMIN
    #  - SETPCAP
    privileged: yes
    #domainname : "cloud"
    #hostname: "nfsd"
    network: "cloud_vpn"
    ip: "{{vpn_cloud_services.local.gateway}}"
    volumes:
      - '{{global_etc}}wireguard_cloud:/etc/wireguard'
    published_ports: "{{wireguard_cloud_published_ports}}"
  register: "podman_container_state"
  notify: "restart wireguard_cloud"

# ***** SERVICE CONFIGS *****
- name: handle systemd service
  vars:
    container_name: "wireguard_cloud"
    container_ip: "{{vpn_cloud_services.local.gateway}}"
    container_pre_exec: "modprobe wireguard"
    container_post_exec: "/opt/container/add_gateway {{vpn_cloud_subnet}}.0.0/16 {{vpn_cloud_services.local.gateway}}"
    container_readyness: { "type": "ping_check", "ip": "{{vpn_cloud_services.local.gateway}}" }
    container_changed: "{{podman_container_state.changed}}"
  include_tasks: roles/container/shared/handle_podman_service.yml
  tags: ['systemd_watcher_config','systemd_service_config']
  
- name: allow service
  vars:
    service_name: "wireguard_cloud"
    container_to_outside_rules: |
      [
      {% for peer in cloud_vpn.peers %}
        { "saddr": "{{vpn_cloud_services.local.gateway}}", "protocol": "udp", "dport": "{{cloud_vpn.peers[peer].port}}", "oif": "{{default_network_interface}}", "comment": "wireguard_cloud => external wireguard_cloud's" },
      {% endfor %}
        { "protocol": "udp", "dport": "{{cloud_vpn.interface.port}}", "iif": "{{default_network_interface}}", "comment": "external wireguard_cloud's => wireguard_cloud" }
      ]
    nat_rules: { ip: "{{vpn_cloud_services.local.gateway}}", ports: "{{wireguard_cloud_published_ports}}" }
  include_tasks: roles/firewall/shared/allow_service.yml
  tags: ['firewall_config']
