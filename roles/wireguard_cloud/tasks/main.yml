- name: set version
  set_fact:
    is_main_network: "{{main_network == (vault_cloud_vpn_networks | first)}}"
    cloud_network: "{{vault_cloud_vpn_networks[item]}}"
    dir_name: "wireguard_{{vault_cloud_vpn_networks[item].interface.name}}"
    etc_dir_name: "wireguard_{{vault_cloud_vpn_networks[item].interface.name}}"
    data_dir_name: "cloud{{ '' if main_network == (vault_cloud_vpn_networks | first) else '_' + item }}"
    build_dir_name: "wireguard_{{vault_cloud_vpn_networks[item].interface.name}}"
    container_name: "wireguard_{{vault_cloud_vpn_networks[item].interface.name}}"
    image_name: "custom_wireguard_cloud"
    exposed_port: "51820"
    vpn_peers: {}
    vpn_hosts: {}
  with_items: "{{vault_cloud_vpn_networks}}"
  when: "item == main_network"
    
- name: filter vpn_peers
  set_fact:
    vpn_peers: "{{ vpn_peers | combine( { item: vault_cloud_vpn_networks[item].peer } ) }}"
  with_items: "{{vault_cloud_vpn_networks}}"
  when: "item != main_network and vault_cloud_vpn_networks[item].peer.publicKey != ''"

- name: filter vpn_hosts
  set_fact:
    vpn_hosts: "{{ vpn_hosts | combine( { item + '.cloud ' + item: vault_cloud_vpn_networks[item].peer.nfsServer } ) }}"
  with_items: "{{vault_cloud_vpn_networks}}"
  when: "item == main_network or vault_cloud_vpn_networks[item].peer.publicKey != ''"
  
- name: set version
  set_fact:
    alpine_version: "3.11.6"
  tags: [ 'update_notifier_configs' ]
  
- name: prepare needed folder
  file:
    path: "{{item}}"
    state: directory
    owner: "root"
    group: "root"
    mode: 700
  with_items:
    - "{{global_etc}}{{etc_dir_name}}"
    - "{{global_etc}}{{etc_dir_name}}/keys"
    - "{{global_etc}}{{etc_dir_name}}/util"

- name: prepare cloud folder
  file:
    path: "{{item}}"
    state: directory
    owner: "root"
    group: "root"
    mode: 0750
  with_items:
    - "{{raid_path}}{{data_dir_name}}"
    - "{{raid_path}}{{data_dir_name}}/export"
    - "{{raid_path}}{{data_dir_name}}/mount"

- name: prepare nfs exported folder
  file:
    path: "{{raid_path}}{{data_dir_name}}/export/{{item}}"
    state: directory
    owner: "root"
    group: "root"
    mode: 0750
  with_items: "{{vpn_peers}}"

- name: prepare nfs mount points
  file:
    path: "{{raid_path}}{{data_dir_name}}/mount/{{item}}"
    state: directory
    owner: "root"
    group: "root"
    mode: 0750
  with_items: "{{vpn_peers}}"

- name: copy util
  template:
    src: "roles/wireguard_cloud/templates/util/{{item}}"
    dest: "{{global_etc}}{{etc_dir_name}}/util/{{item}}"
    owner: root
    group: root
    mode: 0700
  with_items:
    - wg-startup.sh
  notify: "restart wireguard_cloud"

- name: check started docker
  systemd:
    name: docker
    state: started

- name: check docker image exists
  shell: "docker images {{image_name}}:{{alpine_version}}"
  register: image_exists
  changed_when: "image_name not in image_exists.stdout"
  
- name: prepare build folder
  file:
    path: "{{global_build}}{{build_dir_name}}/"
    state: directory
    owner: root
    group: root
    mode: 0750
  when: "image_name not in image_exists.stdout"
  
- name: copy dockerfiles
  template:
    src: "roles/wireguard_cloud/templates/container/{{item}}"
    dest: "{{global_build}}{{build_dir_name}}/{{item}}"
    owner: root
    group: root
    mode: 0750
  with_items:
    - Dockerfile
  when: "image_name not in image_exists.stdout"
  
# async docker build is used to show progress and prevent travisci killing our job because of inactivity
- name: compose docker image => image does not exists
  shell: "docker build -t {{image_name}}:{{alpine_version}} {{global_build}}{{build_dir_name}}/"
  async: 600
  poll: 0
  register: docker_build
  when: "image_name not in image_exists.stdout"

- name: wait for docker image => image does not exists
  async_status: jid={{ docker_build.ansible_job_id }}
  register: job_result
  until: job_result.finished
  retries: 10
  delay: 60
  when: "image_name not in image_exists.stdout"
  
- name: connect cloud container
  docker_network:
    name: cloud
    appends: yes

- name: create docker container
  docker_container:
    name: "{{container_name}}"
    image: "{{image_name}}:{{alpine_version}}"
    state: present
#    network_mode: "none"
    recreate: true
    env:
      TZ: "{{timezone}}"
    log_driver: journald
    log_options:
      tag: "{{container_name}}"
    capabilities:
      - NET_ADMIN
      - SYS_MODULE
    #  - SYS_ADMIN
    #  - SETPCAP
    privileged: yes
    domainname : "cloud"
    hostname: "nfsd"
    etc_hosts: "{{vpn_hosts}}" 
    networks:
      - name: "cloud"
    networks_cli_compatible: yes
    volumes:
      - '{{global_etc}}{{etc_dir_name}}:/etc/wireguard:z'
      - '{{raid_path}}{{data_dir_name}}:/cloud:z,rshared'
    ports:
    # - "2050:2049/tcp"
     - "{{cloud_network.interface.listenPort}}:{{exposed_port}}/udp"
  notify: "restart wireguard_cloud"

#- name: clean old docker images => image does not exists
#  shell: "docker rmi -f $(docker images --filter \"dangling=true\" -q)"
#  when: "image_name not in image_exists.stdout"
  
# ***** FINALIZE *****
- name: create systemd service
  vars:
    image_name: "{{container_name}}"
    trigger_name: "wireguard_cloud"
  import_tasks: roles/container/tasks/add_docker_service.yml

- name: register update notifier
  vars:
    name: "wireguard_cloud"
    type: "docker"
    url: "https://alpinelinux.org/"
    config: {
      repository: "alpine",
      pattern: "^([0-9]{1,2}\\.[0-9\\.]+)$" 
    }
  import_tasks: roles/update_notifier/tasks/add_notifier.yml
  when: "is_main_network"

- name: trigger service check handler
  vars:
    notify: "restart wireguard_cloud"
    service: "{{container_name}}.service"
  import_tasks: roles/base/tasks/service_check.yml
  #when: "is_main_network"
