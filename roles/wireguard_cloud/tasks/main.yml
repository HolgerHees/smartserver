- name: prepare needed folder
  file:
    path: "{{item}}"
    state: directory
    owner: "root"
    group: "root"
    mode: 0700
  with_items:
    - "{{global_etc}}wireguard_cloud"
    - "{{global_etc}}wireguard_cloud/keys"
    - "{{global_etc}}wireguard_cloud/util"
    - "{{config_path}}vault/wireguard_cloud/"

- name: check for vault keys
  find:
    paths: "{{config_path}}vault/wireguard_cloud"
  delegate_to: 127.0.0.1
  register: key_directory

- name: copy keys => is_production and key_directory exists
  copy:
    src: "{{config_path}}vault/wireguard_cloud/"
    dest: "{{global_etc}}wireguard_cloud/keys/"
    decrypt: yes
    owner: root
    group: root
    mode: 0600
  when: "is_production|bool and key_directory.matched > 0"

- name: copy startup script
  template:
    src: "roles/wireguard_cloud/templates/util/startup.sh"
    dest: "{{global_etc}}wireguard_cloud/util/startup.sh"
    owner: root
    group: root
    mode: 0700
  notify: "restart wireguard_cloud"

- name: generate server keys if not exists
  shell: "cd {{global_etc}}wireguard_cloud/keys/ && ([ ! -f ./server_privatekey ] || [ ! -f ./server_publickey ]) && wg genkey | tee ./server_privatekey | wg pubkey > ./server_publickey"
  register: stat_server_key_result
  changed_when: "stat_server_key_result.rc==0"
  failed_when: False
  
- name: backup server keys
  copy:
    src: "{{global_etc}}/wireguard_cloud/keys/"
    dest: "{{config_path}}vault/wireguard_cloud/"
  when: "is_production|bool and ( stat_server_key_result.changed or key_directory.matched != 2 )"
  
- name: fetch keys
  fetch:
    src: "{{global_etc}}wireguard_cloud/keys/{{item}}"
    dest: "/tmp/ansible/wireguard_cloud/{{item}}"
    flat: yes
  with_items: 
    - "server_publickey"
    - "server_privatekey"
  changed_when: no
  
- name: collect server keys
  set_fact:
    wg_cloud_server_privatekey: "{{lookup('file', '/tmp/ansible/wireguard_cloud/server_privatekey')}}"
    wg_cloud_server_publickey: "{{lookup('file', '/tmp/ansible/wireguard_cloud/server_publickey')}}"

- name: clean keys
  file:
    path: "/tmp/ansible/wireguard_cloud/"
    state: absent
  changed_when: no
  
- name: copy server config
  template:
    src: "templates/{{item}}"
    dest: "{{ global_etc }}wireguard_cloud/{{item}}"
    mode: 0600
  notify: "restart wireguard_cloud"
  with_items:
    - "wg0.conf"

- name: build docker image
  vars:
    name: "wireguard_cloud"
    image_name: "custom_wireguard_cloud"
    image_version: "{{alpine_version}}"
    files:
      - roles/wireguard_cloud/templates/container/Dockerfile
  import_tasks: roles/container/shared/build_docker_image.yml

- name: create docker network
  vars:
    network_name: "cloud_vpn"
    network_ip: ""
    network_subnet: "{{cloud_vpn.interface.network}}"
    network_gateway: "{{vpn_cloud_services.local.bridge}}"
    network_internal: no
    network_firewall_subnet: "{{vpn_cloud_subnet}}.0.0/16"
  import_tasks: roles/container/shared/create_docker_network.yml

- name: create docker container
  docker_container:
    name: "wireguard_cloud"
    image: "custom_wireguard_cloud:{{alpine_version}}"
    state: present
    env:
      TZ: "{{timezone}}"
    log_driver: journald
    log_options:
      tag: "wireguard_cloud"
    #capabilities:
    #  - NET_ADMIN
    #  - SYS_MODULE
    #  - SYS_ADMIN
    #  - SETPCAP
    privileged: yes
    #domainname : "cloud"
    #hostname: "nfsd"
    container_default_behavior: "compatibility"
    network_mode: "default"
    networks:
      - name: "cloud_vpn"
        ipv4_address: "{{vpn_cloud_services.local.gateway}}"
#      - name: "isolated"
#        ipv4_address: "{{docker_wireguard_cloud_ip}}"
    networks_cli_compatible: yes
    volumes:
      - '{{global_etc}}wireguard_cloud:/etc/wireguard:z'
    published_ports: |
      [
        "{{cloud_vpn.interface.port}}:{{cloud_vpn.interface.port}}/udp",
        {% if default_server_ipv6 != 'None' %}
          "[{{default_server_ipv6}}]:{{cloud_vpn.interface.port}}:{{cloud_vpn.interface.port}}/udp",
        {% endif %}
      ]
  notify: "restart wireguard_cloud"

#- name: clean old docker images => image does not exists
#  shell: "docker rmi -f $(docker images --filter \"dangling=true\" -q)"
#  when: "wg_image_name not in image_exists.stdout"
  
#- name: add container name
#  vars:
#    host_name: "wireguard_cloud"
#    host_ip_address: "{{vpn_cloud_services.local.gateway}}"
#  import_tasks: roles/_shared/add_to_hosts.yml

- name: prepare used ports
  set_fact:
    wireguard_cloud_ports: |
      {
      {% for peer in cloud_vpn.peers %}
      "{{cloud_vpn.peers[peer].port}}": "{{cloud_vpn.peers[peer].port}}",
      {% endfor %}
      }
  tags: [ 'firewall_config' ]
  
- name: prepare ferm rules
  set_fact:
    wireguard_cloud_ferm_rules: |
      [
      {% for port in wireguard_cloud_ports %}
        "saddr {{vpn_cloud_services.local.gateway}} proto udp dport {{port}} outerface {{default_network_interface}}",
      {% endfor %}
      "daddr {{vpn_cloud_services.local.gateway}} proto udp dport {{cloud_vpn.interface.port}}"
      ]
  tags: [ 'firewall_config' ]

# ***** FINALIZE *****
- name: allow cloud service
  vars:
    name: "wireguard_cloud"
    rules: "{{wireguard_cloud_ferm_rules}}"
  import_tasks: roles/firewall/shared/allow_service.yml
  tags: [ 'firewall_config' ]

- name: create systemd service
  vars:
    container_name: "wireguard_cloud"
    trigger_name: "wireguard_cloud"
    container_post_exec: "/opt/docker/add_gateway {{vpn_cloud_subnet}}.0.0/16 {{vpn_cloud_services.local.gateway}}"
  import_tasks: roles/container/shared/add_docker_service.yml

- name: trigger wireguard_cloud handler
  vars:
    notify: "restart wireguard_cloud"
    service: "wireguard_cloud.service"
  import_tasks: roles/_shared/service_check.yml
