- name: prepare needed directories
  vars:
    directories:
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_opt}}weather_service/" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_opt}}weather_service/config/" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_lib}}weather_service/" }
  include_tasks: roles/_shared/create_directories.yml

- name: copy config
  template:
    src: "templates/config.py"
    dest: "{{global_opt}}weather_service/config/config.py"
    owner: root
    group: root
    mode: 0640
  notify: "restart weather_service"

- name: synchronize daemon
  synchronize:
    src: "templates/opt/weather_service/{{item}}/"
    dest: "{{global_opt}}weather_service/{{item}}/"
    archive: no
    checksum: yes
    group: yes
    owner: yes
    perms: yes
    recursive: yes
    rsync_opts:
      - "--chown=root:root"
      - "--chmod=F640"
  with_items:
      - "lib"
      - "icons"
  notify: "restart weather_service"

- name: copy daemon
  copy:
    src: "templates/opt/weather_service/weather_service"
    dest: "{{global_opt}}weather_service/weather_service"
    owner: root
    group: root
    mode: 0750
  notify: "restart weather_service"

- name: build podman image
  vars:
    container_name: "weather_service"
    image_name: "custom_weather_service:{{alpine_version}}"
    image_files:
      - roles/weather_service/templates/container/Dockerfile
    entrypoint_services:
      - "/opt/shared/python/install.py"
      - "/opt/weather_service/weather_service &"
  include_tasks: roles/container/shared/build_podman_image.yml
  tags: ['container_entrypoint_config']

- name: create podman container
  containers.podman.podman_container:
    name: weather_service
    image: "custom_weather_service:{{alpine_version}}"
    state: present
    security_opt:
      - label=disable
    env:
      TZ: "{{timezone}}"
    log_driver: journald
    log_options:
      tag: weather_service
    network: "isolated"
    ip: "{{podman_weather_service_ip}}"
    volumes:
      - '{{global_opt}}shared/python:/opt/shared/python:ro'
      - '{{global_opt}}weather_service/:/opt/weather_service:ro'
      - "{{global_lib}}weather_service/:/var/lib/weather_service:rw"
  notify: "restart weather_service"

# ***** SERVICE CONFIGS *****
- name: handle systemd service
  vars:
    container_name: "weather_service"
    container_ip: "{{podman_weather_service_ip}}"
    container_readyness: { "type": "port_check", "ip": "{{podman_weather_service_ip}}", "port": "80" }
    container_after: [ "cloud_mosquitto", "mysql" ]
  include_tasks: roles/container/shared/handle_podman_service.yml
  tags: ['systemd_watcher_config','systemd_service_config']
  
- name: allow service
  vars:
    service_name: "weather_service"
    container_to_container_rules: |
      [
        { "saddr": "{{podman_prometheus_ip}}", "daddr": "{{podman_weather_service_ip}}", "protocol": "tcp", "dport": "80", "comment": "prometheus => weather_service" },
        { "saddr": "{{podman_weather_service_ip}}", "daddr": "{{podman_mysql_ip}}", "protocol": "tcp", "dport": "3306", "comment": "weather_service => mysql" },
        {% if weather_mqtt_server == 'mosquitto' %}
          { "saddr": "{{podman_weather_service_ip}}", "daddr": "{{podman_mosquitto_ip}}", "protocol": "tcp", "dport": [ "1883", "9001" ], "comment": "weather_service => mosquitto }}" }
        {% endif %}
      ]
    container_to_outside_rules: |
      [
        { "saddr": "{{podman_weather_service_ip}}", "protocol": "tcp", "dport": "443", "oif": "{{default_network_interface}}", "comment": "weather_service => external weather provider" }, 
        {% if weather_mqtt_server == 'cloud_mosquitto' %}
            { "saddr": "{{podman_weather_service_ip}}", "daddr": "{{vpn_cloud_services['local']['mosquitto']}}", "protocol": "tcp", "dport": [ "1883", "9001" ], "comment": "weather_service => cloud mosquitto" }
        {% endif %}
      ]
  include_tasks: roles/firewall/shared/allow_service.yml
  tags: ['firewall_config']

# ***** DEPENDENCY CONFIGS *****
- name: check mysql service
  include_tasks: roles/mysql/shared/wait_until_ready.yml
  when: "mysql_enabled"

- name: check mysql table
  shell: "podman exec mysql sh -c \"mysql -u root -h 127.0.0.1 -e 'SHOW TABLES FROM shared;'\""
  register: mysql_table_exists
  changed_when: "'weather_forecast' not in mysql_table_exists.stdout"
  when: "mysql_enabled"

- name: synchronize table config
  synchronize:
    src: "templates/weather_forecast.sql"
    dest: "{{ global_build }}weather_service/"
    archive: no
    checksum: yes
    group: yes
    owner: yes
    perms: yes
    recursive: yes
    rsync_opts:
      - "--chown=root:root"
      - "--chmod=F600"
  changed_when: no
  when: "'weather_forecast' not in mysql_table_exists.stdout"
  
- name: create missing table 'weather_service' => does not exists in database
  shell: "cat {{ global_build }}weather_service/weather_forecast.sql | podman exec -i mysql sh -c \"mysql -u root -h 127.0.0.1 shared\""
  when: "mysql_enabled and 'weather_forecast' not in mysql_table_exists.stdout"

- name: synchronize htdocs
  synchronize:
    src: "templates/htdocs/weather_service"
    dest: "{{htdocs_path}}"
    archive: no
    checksum: yes
    group: yes
    owner: yes
    perms: yes
    recursive: yes
    rsync_opts:
      - "--chown={{system_users['www'].name}}:{{system_groups['www'].name}}"
      - "--chmod=D750,F640"
  
- name: register webui
  vars:
    name: "weather_service"
    js_file: "templates/webui/weather_service.js"
    i18n_files: [ { language: "de", file: "templates/webui/weather_service.de.json" } ]
    icons: [ 'templates/webui/icons/weather_service.svg' ]
  include_tasks: roles/apache_webui/shared/add_webui.yml
  tags: ['apache_webui_config']

- name: register prometheus rules & metrics
  vars:
    name: "weather_service"
    rules_file: "templates/prometheus/rules.yml"
    scrape_file: "templates/prometheus/scrape.yml"
  include_tasks: roles/prometheus/shared/add_config.yml
  tags: ['prometheus_config']
  when: "monitoring_enabled"

- name: copy service apache config
  vars:
    service_name: "weather_service"
    service_host: "{{podman_weather_service_ip}}"
  include_tasks: roles/shared_libs/shared/add_apache_service_config.yml
  tags: ['apache_config']

- name: copy service fluentd config
  vars:
    service_name: "weather_service"
    service_is_container: yes
  include_tasks: roles/shared_libs/shared/add_fluentd_service_config.yml
  tags: ['fluentd_config']
  when: "monitoring_enabled"
