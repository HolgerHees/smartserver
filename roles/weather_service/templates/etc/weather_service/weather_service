#!/usr/bin/python3

import logging
import json
import time
from datetime import datetime
#from decimal import Decimal

from lib.provider.meteogroup import MeteoGroup
from lib.provider.openmeteo import OpenMeteo

from lib.consumer.provider import ProviderConsumer
from lib.consumer.station import StationConsumer
from lib.consumer.astro import AstroConsumer
from lib.broker.mqtt import MQTT as MQTTBroker
from lib.broker.dummy import Dummy as DummyBroker
from lib.db import DB
from lib.helper.forecast import WeatherBlock

from smartserver.scheduler import Scheduler
from smartserver.server import Server, serverWeb, serverSocket

import config


class Handler(Server):
    '''Handler client'''
    def __init__(self):
        super().__init__("weatcher_service", "0.0.0.0", "80" )

        self.db = DB(config)
        self.scheduler = Scheduler("weatcher_service")

        self.mqtt = DummyBroker(config) if config.mosquitto_host == "dummy" else MQTTBroker(config)

        if config.api_provider == 'meteogroup':
            self.provider = MeteoGroup(config, self.db, self.mqtt)
        elif config.api_provider == 'openmeteo':
            self.provider = OpenMeteo(config, self.db, self.mqtt)
        elif config.api_provider == 'listener':
            logging.info("Publishing disabled")
            self.provider = None
        else:
            logging.error("Unknown provider '{}'. Publishing disabled".format(config.api_provider))
            self.provider = None

        self.astro_consumer = AstroConsumer(config, self)
        self.provider_consumer = ProviderConsumer(config, self.mqtt, self.db, self)

        if config.mosquitto_host != "dummy":
            self.station_consumer = StationConsumer(config, self.mqtt, self.provider_consumer)
        else:
            self.station_consumer = None

        self.startup_timestamp = round(datetime.now().timestamp(),3)

        self.initWatchedFiles( [config.icon_path], self.iconChangeTriggered )

    def iconChangeTriggered(self, event):
        self.provider_consumer.resetIconCache()

    def start(self):
        self.scheduler.start()
        self.mqtt.start()
        self.provider_consumer.start()
        if self.station_consumer:
            self.station_consumer.start()
        self.astro_consumer.start()

        if self.provider != None:
            self.provider.start()

        super().start()

    def terminate(self):
        if self.provider != None:
            self.provider.terminate()

        self.astro_consumer.terminate()
        if self.station_consumer:
            self.station_consumer.terminate()
        self.provider_consumer.terminate()
        self.mqtt.terminate()
        self.scheduler.terminate()

        super().terminate()

    def run(self):
        while self.is_running:
            self.event.wait(60)
            self.event.clear()

            #requests.exceptions.ConnectionError, urllib3.exceptions.MaxRetryError, urllib3.exceptions.NewConnectionError

    def checkLastDataModified(self,key, last_data_modified):
        form_key = "last_data_modified[{}]".format(key)
        value = self.getRequestValue(form_key)
        return not value or float(value) < last_data_modified[key]

    def getLastDataModified(self,key):
        form_key = "last_data_modified[{}]".format(key)
        value = self.getRequestValue(form_key)
        return float(value) if value else 0

    def _serialize(self, obj):
        """JSON serializer for objects not serializable by default json code"""
        if isinstance(obj, WeatherBlock):
            return obj.to_dict()

        return obj.__dict__

    def getTodayData(self):
        result = self.provider_consumer.getTodayOverviewValues()
        return json.dumps(result, default=self._serialize)

    def emitChangedWeekData(self):
         self.emitSocketData('changedWeekData', None)

    def emitInitialWeekData(self, day = None):
         data = self.provider_consumer.getWeekValues(day)
         #logging.info("Emit initial week data")
         self.emitSocketData('initWeekData', data)

    def emitChangedCurrentData(self, field, value):
         #logging.info("Emit changed current data")
         data = {}
         data[field] = value
         self.emitSocketData('changedCurrentData', data)

    def emitInitialCurrentData(self):
         data = self.provider_consumer.getCurrentValues()
         #logging.info("Emit initial current data")
         self.emitSocketData('initCurrentData', data)

    def emitChangedAstroData(self, field, value):
         #logging.info("Emit changed current data")
         data = {}
         data[field] = value
         self.emitSocketData('changedAstroData', data)

    def emitInitialAstroData(self):
         data = self.astro_consumer.getValues()
         #logging.info("Emit initial astro data")
         self.emitSocketData('initAstroData', data)

    def getStateMetrics(self):
        metrics = []
        metrics += self.scheduler.getStateMetrics()
        metrics += self.db.getStateMetrics()
        metrics += self.mqtt.getStateMetrics()
        if self.provider is not None:
            metrics += self.provider.getStateMetrics()
        metrics += self.provider_consumer.getStateMetrics()
        if self.station_consumer:
            metrics += self.station_consumer.getStateMetrics()

        return "{}\n".format( "\n".join(metrics) )

@serverSocket.on('getWeekData')
def getWeekData(day):
    handler.emitInitialWeekData(day)

@serverSocket.on('initData')
def initData( types ):
    if "initWeekData" in types:
        handler.emitInitialWeekData()
    if "initCurrentData" in types:
        handler.emitInitialCurrentData()
    if "initAstroData" in types:
        handler.emitInitialAstroData()

@serverWeb.route('/todayData/', methods = ['POST'])
def data():
    return handler.getTodayData()

@serverWeb.route('/metrics/', methods = ['GET'])
def metrics():
    return handler.getStateMetrics()

handler = Handler()
handler.start()

