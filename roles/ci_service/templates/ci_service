#!/usr/bin/python3

import os
import traceback
import sys

from ci import helper
from ci import status
from ci import service
from ci import job
from ci import git

import pexpect 

status_file = "{{global_tmp}}ci_service.status"

lib_dir = "{{global_lib}}ci/"
log_dir = "{{global_log}}ci/"
build_dir = "{{global_build}}"
repository_dir = "{{global_build}}smartserver"

repository_url = "{{vault_deployment_config_git}}"
access_token = "{{vault_deployment_token_git}}"

deployments = ["suse","fedora"]

repository_owner = repository_url.replace("https://github.com/","")
repository_owner = repository_owner.replace(".git","")

cmd = ""
if len(sys.argv) == 2:
    cmd = sys.argv[1]
    
if cmd == "stop":
    service.stopRunningJob(status_file,log_dir)
elif cmd == "start" or cmd == "restart":
    processed_git_hash = service.checkRunningJob(status_file)

    git.initRepository(repository_dir, repository_url, build_dir)

    git.updateRepository(repository_dir)

    current_git_hash = git.getHash(repository_dir)

    if processed_git_hash != current_git_hash or cmd == "restart":
        status.setStatus(status_file,u"running")
        print(u"Check for commit '{}' started.".format(current_git_hash))

        pid = os.fork()
        if pid == 0:
            try:
                helper.log( u"Check for commit {} started".format(current_git_hash))
                
                status.setGitHash(status_file,current_git_hash)
                
                job_obj = job.Job(log_dir, lib_dir, repository_dir, status_file, current_git_hash )
                
                for deployment in deployments:
                    if access_token != "":
                        git.setStatus(repository_owner,access_token,current_git_hash,"pending",deployment,"Build pending")
                    successful = job_obj.startCheck( "demo", deployment, None )
                    if not successful:
                        if access_token != "":
                            git.setStatus(repository_owner,access_token,current_git_hash,"failure",deployment,"Build Errored")
                        helper.sendEmail("CI Test for 'demo' on '{}' not successful","Commit: https://github.com/{}/commit/{}".format(deployment,repository_owner,current_git_hash));
                    else:
                        if access_token != "":
                            git.setStatus(repository_owner,access_token,current_git_hash,"success",deployment,"Build succeeded")
                
                status.setStatus(status_file,u"finished")
            except:
                helper.log( traceback.format_exc(), "err" )
                status.setStatus(status_file,u"crashed")
            exit(0)
        else:
            exit(0)
    else:
        print(u"Nothing to do. Commit '{}' already processed.".format(current_git_hash))
elif cmd != "":
    print(u"Unknown command: '{}'\n\nUsage: ./ci_service <start|restart|stop>".format(cmd))
else:
    print(u"Missing command:\n\nUsage: ./ci_service <start|restart|stop>")
