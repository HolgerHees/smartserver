#!/usr/bin/python3

import logging
import json
from datetime import datetime

from smartserver.server import Server, serverWeb

from lib import log
from lib import job_watcher

from config import config


watched_data_files = [
    config.status_file,
    config.log_dir
]

class Handler(Server):
    def __init__(self):
        log.setLogger(logging)

        super().__init__("ci_service", config.service_ip, "8506" )
        
        self.startup_timestamp = round(datetime.now().timestamp(),3)
        
        self.job_watcher = job_watcher.JobWatcher()

        self.initWatchedFiles( watched_data_files, self.fileChangeTriggered )
        
    def fileChangeTriggered(self, event):
        if event["path"] == config.log_dir.rstrip("/"):
            self.job_watcher.changedJobs(event)
        elif event["path"] == config.status_file:
            self.job_watcher.changedState(event)
    
    def terminate(self):
        self.job_watcher.terminate()
        super().terminate()
                
    def getState(self):
        
        last_data_modified = {}
        last_data_modified["startup"] = self.startup_timestamp
        last_data_modified["jobs"] = self.job_watcher.getLastRefreshAsTimestamp()
        changed_data = {}
        
        value = self.getRequestValue("last_data_modified[startup]")
        force = not value or float(value) < last_data_modified["startup"]
                
        value = self.getRequestValue("last_data_modified[jobs]")
        if force or not value or float(value) < last_data_modified["jobs"]:
            changed_data["jobs"] = self.job_watcher.getJobs()

        result = { 
            "status": 0, 
            "last_data_modified": last_data_modified,
            "changed_data": changed_data
        }

        return json.dumps(result)

    def getWidgetState(self):
        return json.dumps({"is_running": self.job_watcher.isJobRunning(), "last_job_failed": self.job_watcher.lastJobFailed() })
      
@serverWeb.route('/widget_state/', methods = ['GET'])
def widget_state():
    return handler.getWidgetState()

@serverWeb.route('/state/', methods = ['POST'])
def state():     
    return handler.getState()
  
handler = Handler()
handler.start()
