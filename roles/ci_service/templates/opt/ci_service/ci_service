#!/usr/bin/python3

import os
import traceback
import sys

import urllib.parse

from ci import helper
from ci import status
from ci import service
from ci import job
from ci import git
from ci import log

import pexpect 

server_host = "{{server_domain}}"

status_file = "{{global_tmp}}ci_service.status"

lib_dir = "{{global_lib}}ci/"
log_dir = "{{global_log}}ci/"
build_dir = "{{global_build}}"
repository_dir = "{{global_build}}smartserver"

repository_url = "{{vault_deployment_config_git}}"
access_token = "{{vault_deployment_token_git}}"

branch = "master"

deployments = [ { "config": "demo", "os": "suse" }, { "config": "demo", "os": "fedora" } ]

repository_owner = repository_url.replace("https://github.com/","")
repository_owner = repository_owner.replace(".git","")

cmd = ""
if len(sys.argv) >= 2:
    cmd = sys.argv[1]
    
if cmd == "status":
    service.showRunningJobs()
    exit(0)
elif cmd == "clean":
    if len(sys.argv) == 3:
        vid = sys.argv[2]
        service.cleanRunningJobs(vid)
        exit(0)
    else:
        log.error(u"Missing vid:\n\nUsage: ./ci_service clean <vid>|all")
        exit(1)
elif cmd == "stop":
    stopped_state_obj = service.stopRunningJob(status_file,log_dir)
    if stopped_state_obj != None:
        valid_state = job.getLastValidState(log_dir,stopped_state_obj,branch)
        if valid_state != None:
            if valid_state == "success":
                log.info(u"Restore github state to '{}' for deployment '{}' on commit '{}'".format("success", stopped_state_obj['deployment'], stopped_state_obj["git_hash"]))
                git.setState(repository_owner,access_token,stopped_state_obj["git_hash"],"success",stopped_state_obj['deployment'],"Build succeeded")
            elif valid_state == "failure":
                log.info(u"Restore github state to '{}' for deployment '{}' on commit '{}'".format("failure", stopped_state_obj['deployment'], stopped_state_obj["git_hash"]))
                git.setState(repository_owner,access_token,stopped_state_obj["git_hash"],"failure", stopped_state_obj['deployment'],"Build errored")
            else:
                log.error(u"Unable to restore github state '{}' for deployment '{}' on commit '{}'".format(valid_state, stopped_state_obj['deployment'], stopped_state_obj["git_hash"]))
        else:
            log.info(u"Set github state to '{}' for deployment '{}' on commit '{}'".format("error", stopped_state_obj['deployment'], stopped_state_obj["git_hash"]))
            git.setState(repository_owner,access_token,stopped_state_obj["git_hash"],"error",stopped_state_obj['deployment'],"Build stopped")
    exit(0)
elif cmd == "start" or cmd == "restart":
    processed_git_hash = service.checkRunningJob(status_file)

    git.initRepository(repository_dir, repository_url, build_dir)

    git.updateRepository(repository_dir,branch)

    current_git_hash = git.getHash(repository_dir)

    if processed_git_hash != current_git_hash or cmd == "restart":
        status.setState(status_file,u"running")
        log.info(u"Check for commit '{}' started.".format(current_git_hash))

        pid = os.fork()
        if pid == 0:
            try:
                helper.log( u"Check for commit {} started".format(current_git_hash))
                
                status.setGitHash(status_file,current_git_hash)
                
                commit = git.getLog(repository_dir,current_git_hash)
                
                job_obj = job.Job(log_dir, lib_dir, repository_dir, status_file, branch, current_git_hash, commit )
                
                for deployment in deployments:
                    status.setDeployment(status_file,deployment['os'])
                    if access_token != "":
                        git.setState(repository_owner,access_token,current_git_hash,"pending",deployment['os'],"Build pending")
                    
                    successful, start_time_str, error_reason = job_obj.startCheck( deployment['config'], deployment['os'], None )

                    if not successful:
                        if access_token != "":
                            git.setState(repository_owner,access_token,current_git_hash,"failure",deployment['os'],"Build failed")
                            
                        log_url = "https://{}/ci/details.php?datetime={}&config={}&os={}&branch={}&hash={}".format(server_host,start_time_str, deployment['config'],deployment['os'],branch,current_git_hash)
                        log_url = urllib.parse.quote_plus(log_url)
                        
                        body = "Reason: {}".format(error_reason);
                        body += "\n\n"
                        body += "Logs: https://{}/?ref=other|tools|ci|{}".format(server_host,log_url);
                        body += "\n\n"
                        body += "Commit: https://github.com/{}/commit/{}".format(repository_owner,current_git_hash);
                        
                        helper.sendEmail("CI Test for '{}' on '{}' not successful".format(deployment['config'],deployment['os']),body);
                    else:
                        if access_token != "":
                            git.setState(repository_owner,access_token,current_git_hash,"success",deployment['os'],"Build succeeded")
                
                status.setState(status_file,u"finished")

                helper.log( u"Check for commit {} finished".format(current_git_hash))
            except:
                helper.log( traceback.format_exc(), "err" )
                status.setState(status_file,u"crashed")
            exit(0)
        else:
            exit(0)
    else:
        log.info(u"Nothing to do. Commit '{}' already processed.".format(current_git_hash))
        exit(0)
elif cmd != "":
    log.error(u"Unknown command: '{}'\n\nUsage: ./ci_service <start|restart|stop>".format(cmd))
    exit(1)
else:
    log.error(u"Missing command:\n\nUsage: ./ci_service <start|restart|stop|clean|status>")
    exit(1)
