#!/usr/bin/python3

import logging
import json
from datetime import datetime

from smartserver.server import Server, serverWeb

from lib import log
from lib import job_watcher

from config import config


watched_data_files = [
    config.status_file,
    config.log_dir
]

class Handler(Server):
    def __init__(self):
        log.setLogger(logging)

        super().__init__("ci_service", config.service_ip, "8506" )
        
        self.startup_timestamp = round(datetime.now().timestamp(),3)
        
        self.job_watcher = job_watcher.JobWatcher(self)

        self.initWatchedFiles( watched_data_files, self.fileChangeTriggered )
        
    def fileChangeTriggered(self, event):
        if event["path"] == config.log_dir.rstrip("/"):
            self.job_watcher.changedJobs(event)
        elif event["path"] == config.status_file:
            self.job_watcher.changedState(event)
    
    def start(self):
        self.job_watcher.start()
        super().start()

    def terminate(self):
        self.job_watcher.terminate()
        super().terminate()
                
    def notifyChangedStateData(self):
        if not self.isSocketRoomActive("widget"):
            return

        self.emitSocketData('data', {"is_running": self.job_watcher.isJobRunning(), "last_job_failed": self.job_watcher.lastJobFailed() }, "widget")

    def notifyChangedJobsData(self):
        if not self.isSocketRoomActive("details"):
            return

        self.emitSocketData('data', {"jobs": self.job_watcher.getJobs() }, "details")

    def onSocketRoomJoin(self, sid, room, data = None):
        super().onSocketRoomJoin(sid, room, data)

        if room == "widget":
            self.emitSocketData('data', {"is_running": self.job_watcher.isJobRunning(), "last_job_failed": self.job_watcher.lastJobFailed() }, room)

        elif room == "details":
            self.emitSocketData('data', {"jobs": self.job_watcher.getJobs() }, room)

handler = Handler()
handler.start()
