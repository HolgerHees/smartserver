#!/usr/bin/python3

from flask import Flask, request, make_response
from werkzeug.serving import WSGIRequestHandler

import logging
from datetime import datetime

import json

from config import config

from smartserver.server import Server

from lib import log
from lib import job_watcher

watched_data_files = [
    config.status_file,
    config.log_dir
]

class Handler(Server):
    def __init__(self, logger):
        self.logger = logger
        
        log.setLogger(self.logger)

        super().__init__(self.logger, "ci_service")
        
        self.startup_timestamp = round(datetime.now().timestamp(),3)
        
        self.job_watcher = job_watcher.JobWatcher(self.logger)

        self.initWatchedFiles( watched_data_files, self.fileChangeTriggered )
        
    def fileChangeTriggered(self, event):
        if event["path"] == config.log_dir.rstrip("/"):
            self.job_watcher.changedJobs(event)
        elif event["path"] == config.status_file:
            self.job_watcher.changedState(event)
    
    def terminate(self):
        self.job_watcher.terminate()
        super().terminate()
                
    def getState(self):
        
        last_data_modified = {}
        last_data_modified["startup"] = self.startup_timestamp
        last_data_modified["jobs"] = self.job_watcher.getLastRefreshAsTimestamp()
        changed_data = {}
        
        force = "last_data_modified[startup]" not in request.form or float(request.form["last_data_modified[startup]"]) < last_data_modified["startup"]
                
        if force or "last_data_modified[jobs]" not in request.form or float(request.form["last_data_modified[jobs]"]) < last_data_modified["jobs"]:
            changed_data["jobs"] = self.job_watcher.getJobs()

        result = { 
            "status": 0, 
            "last_data_modified": last_data_modified,
            "changed_data": changed_data
        }

        return json.dumps(result)
      
app = Flask(__name__)

@app.route('/state/', methods = ['POST'])
def state():     
    return handler.getState()
  
#def cleanup(signum, frame):
#    print("Shutdown daemon", flush=True)
#    handler.terminate()
#    exit(0)

#signal.signal(signal.SIGTERM, cleanup)
#signal.signal(signal.SIGINT, cleanup)

if __name__ == '__main__':
    app.logger.setLevel(logging.DEBUG)
    handler = Handler(app.logger)

    def handleServer():
        WSGIRequestHandler.protocol_version = "HTTP/1.1"
        app.run(debug=False, use_reloader=False, threaded=True, host=config.service_ip, port='8506')
        
    handler.start(handleServer)
