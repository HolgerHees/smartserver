- name: prepare needed directories
  vars:
    directories:
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_opt}}ci_service" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_opt}}ci_service/config" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_build}}ci_job" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_lib}}ci_service" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_lib}}ci_service/VirtualMachines" }
      - { mode: "u=rwx,g=rx,o=", owner: "root", group: "root", path: "{{global_log}}ci_service" }
  include_tasks: roles/_shared/create_directories.yml

- name: install required packages => is_rhel or is_fedora
  yum:
    name: virtualbox
    state: present
  when: is_rhel or is_fedora
  notify: "restart virtualbox" 

- name: install required packages => is_ubuntu
  apt:
    name: virtualbox
    state: present
  when: is_ubuntu
  notify: "restart virtualbox" 

- name: install required packages => is_suse
  zypper:
    name: [
      virtualbox
      , libncurses5
    ]
    state: present
  when: is_suse
  notify: "restart virtualbox" 
  
- name: build docker image
  vars:
    name: "ci_service"
    image_name: "custom_ci_service"
    image_version: "{{alpine_version}}"
    files:
      - roles/ci_service/templates/container/Dockerfile
      - roles/ci_service/templates/container/entrypoint.sh
  include_tasks: roles/container/shared/build_docker_image.yml

- name: create docker container
  docker_container:
    name: ci_service
    image: "custom_ci_service:{{alpine_version}}"
    state: present
#    recreate: true
    env:
      TZ: "{{timezone}}"
    log_driver: journald
    log_options:
      tag: ci_service
    pid_mode: "host"
    privileged: "true"
    container_default_behavior: "compatibility"
    network_mode: "host"
    #networks:
    #  - name: "isolated"
    #    ipv4_address: "{{docker_ci_service_ip}}"
    networks_cli_compatible: yes
    volumes:
      - '{{global_opt}}shared/python:/opt/shared/python:ro,z'
      - '{{global_opt}}ci_service/:{{global_opt}}ci_service:ro,z'
      - "{{global_build}}ci_job/:{{global_build}}ci_job/:rw,z"
      - "{{global_tmp}}:{{global_tmp}}:rw,z"
      - "{{global_lib}}ci_service/:{{global_lib}}ci_service/:rw,z"
      - "{{global_log}}ci_service/:{{global_log}}ci_service/:rw,z"
  notify: "restart ci_service"

#- name: allow ci service
#  vars:
#    name: "ci_service"
#    rules:
#      - "saddr {{docker_prometheus_ip}} daddr {{docker_ci_service_ip}}"
#      - "saddr {{docker_ci_service_ip}} proto tcp dport 443 outerface {{default_network_interface}}"
#      - "saddr {{docker_ci_service_ip}} proto tcp dport 443 daddr {{docker_ci_service_ip}}"
#  include_tasks: roles/firewall/shared/allow_service.yml
#  tags: ['firewall_config']

- name: install vagrant binary
  unarchive:
    src: "https://releases.hashicorp.com/vagrant/2.3.7/vagrant_2.3.7_linux_amd64.zip"
    dest: "{{global_opt}}ci_service"
    remote_src: yes
    creates: "{{global_opt}}ci_service/vagrant"
    owner: root
    group: root
    mode: 0750

- name: synchronize service
  synchronize:
    src: "templates/opt/{{item.path}}"
    dest: "{{global_opt}}ci_service/"
    archive: no
    checksum: yes
    group: yes
    owner: yes
    perms: yes
    recursive: yes
    rsync_opts:
      - "--chown=root:root"
      - "--chmod={{item.chmod}}"
  with_items:
    - { "chmod": "D750,F640", "path": "ci_service/lib" }
    - { "chmod": "D750,F750", "path": "ci_service/ci_job_handler" }
    - { "chmod": "D750,F750", "path": "ci_service/ci_service" }
  notify: "restart ci_service"

- name: copy service config
  template:
    src: "templates/config.py"
    dest: "{{global_opt}}ci_service/config/config.py"
    owner: root
    group: root
    mode: 0750
  notify: "restart ci_service"

- name: synchronize webui
  synchronize:
    src: "templates/htdocs/ci_service"
    dest: "{{htdocs_path}}"
    archive: no
    checksum: yes
    group: yes
    owner: yes
    perms: yes
    recursive: yes
    rsync_opts:
      - "--chown={{system_users['www'].name}}:{{system_groups['www'].name}}"
      - "--chmod=D750,F640"
  tags: ['apache_webui_page']

- name: register webui
  vars:
    name: "ci_service"
    js_file: "templates/webui/ci_service.js"
    i18n_files: [ { language: "de", file: "templates/webui/ci_service.de.json" } ]
    icons: [ 'templates/webui/icons/ci_service_logo.svg' ]
  include_tasks: roles/apache_webui/shared/add_webui.yml
  tags: ['apache_webui_config']

- name: create check cron job
  vars:
    name: "Continues integration job"
    cmd: "docker exec ci_service sh -c \"{{global_opt}}ci_service/ci_job_handler start > /dev/null\""
    group: "ci_service"
    log: "job"
    minute: "*/5"
  include_tasks: roles/cron/shared/add_cronjob.yml
  tags: ['cron_job']
  when: "is_production"
  
- name: create cleanup cron job
  vars:
    name: "Continues integration cleanup"
    cmd: "ls -1t {{global_log}}ci_service/*.log | tail -n +50 | xargs rm -f"
    group: "ci_service"
    log: "cleanup"
    hour: "0"
    minute: "40"
  include_tasks: roles/cron/shared/add_cronjob.yml
  tags: ['cron_job']

# ***** FINALIZE *****
- name: register prometheus rules & metrics
  vars:
    name: "ci_service"
    rules_file: "templates/prometheus/rules.yml"
    scrape_file: "templates/prometheus/scrape.yml"
  include_tasks: roles/prometheus/shared/add_config.yml
  tags: ['prometheus_config']
  when: "monitoring_enabled"

- name: copy service apache config
  vars:
    service_name: "ci_service"
    service_host: "127.0.0.1:8506"
    service_additional_config: |
        <Location /ci_service/metrics/>
          ProxyPass http://127.0.0.1:8506/metrics/
          ProxyPassReverse http://127.0.0.1:8506/metrics/
        </Location>
  include_tasks: roles/shared_libs/shared/add_apache_service_config.yml
  tags: ['apache_config']

- name: copy service fluentd config
  vars:
    service_name: "ci_service"
    service_is_container: yes
  include_tasks: roles/shared_libs/shared/add_fluentd_service_config.yml
  tags: ['fluentd_config']
  when: "monitoring_enabled"

- name: create systemd service
  vars:
    container_name: "ci_service"
  include_tasks: roles/container/shared/add_docker_service.yml
  tags: ['systemd_watcher_config']
 
- name: register service watcher
  vars:
    name: "vboxdrv"
  include_tasks: roles/systemd_watcher/shared/add_watcher.yml
  tags: ['systemd_watcher_config']
  when: "monitoring_enabled"
  
- name: trigger vboxdrv handler
  vars:
    notify: "restart virtualbox"
    service: "vboxdrv.service"
    process: "lsmod | grep vbox"
  include_tasks: roles/_shared/service_process_check.yml
  
- name: trigger ci_service handler
  vars:
    notify: "restart ci_service"
    service: "ci_service.service"
  include_tasks: roles/_shared/service_check.yml
