- name: prepare needed directories
  vars:
    directories:
      - { mode: "u=rwx,g=,o=", owner: "root", group: "root", path: "{{global_etc}}wireguard_mobile" }
      - { mode: "u=rwx,g=,o=", owner: "root", group: "root", path: "{{global_etc}}wireguard_mobile/keys" }
      - { mode: "u=rwx,g=,o=", owner: "root", group: "root", path: "{{global_etc}}wireguard_mobile/clients" }
      - { mode: "u=rwx,g=,o=", owner: "root", group: "root", path: "{{config_path}}vault/wireguard_mobile/" }
  include_tasks: roles/_shared/create_directories.yml
    
- name: check for vault keys
  find:
    paths: "{{config_path}}vault/wireguard_mobile/"
  delegate_to: 127.0.0.1
  register: vault_key_directory

- name: copy keys => is_production and vault_key_directory exists
  copy:
    src: "{{config_path}}vault/wireguard_mobile/"
    dest: "{{global_etc}}wireguard_mobile/keys/"
    decrypt: yes
    owner: root
    group: root
    mode: 0600
  when: "is_production and vault_key_directory.matched > 0"
  
- name: generate server keys
  shell: "cd {{global_etc}}wireguard_mobile/keys/ && ([ ! -f ./server_privatekey ] || [ ! -f ./server_publickey ]) && wg genkey | tee ./server_privatekey | wg pubkey > ./server_publickey"
  register: stat_server_key_result
  changed_when: "stat_server_key_result.rc==0"
  failed_when: False
  
- name: collect vpn gates
  set_fact:
    vpn_gates: |
      {
      {% for username in userdata %}
      {% if userdata[username].vpn_gates is defined %}
      {% for vpn_name in userdata[username].vpn_gates %}
      "{{username}}_{{vpn_name}}": "{{userdata[username].vpn_gates[vpn_name]}}",
      {% endfor %}
      {% endif %}
      {% endfor %}
      }
    vpn_admin_ips: |
      [
      {% for username in userdata %}
      {% if userdata[username].vpn_gates is defined %}
      {% for vpn_name in userdata[username].vpn_gates %}
      {% if 'admin' in userdata[username].groups %}
      "{{userdata[username].vpn_gates[vpn_name]}}",
      {% endif %}
      {% endfor %}
      {% endif %}
      {% endfor %}
      ]
  tags: [ 'user', 'firewall_config' ]
      
- name: generate client keys
  shell: "cd {{global_etc}}wireguard_mobile/keys/ && ([ ! -f ./client_{{item}}_privatekey ] || [ ! -f ./client_{{item}}_publickey ]) && wg genkey | tee ./client_{{item}}_privatekey | wg pubkey > ./client_{{item}}_publickey"
  register: stat_client_key_result
  changed_when: "stat_client_key_result.rc==0"
  failed_when: False
  with_items: "{{vpn_gates}}"
  tags: [ 'user' ]

- name: check for active keys
  find:
    paths: "{{global_etc}}/wireguard_mobile/keys/"
  register: active_key_directory

- name: backup server & client keys
  copy:
    src: "{{global_etc}}/wireguard_mobile/keys/"
    dest: "{{config_path}}vault/wireguard_mobile/"
  when: "is_production and ( stat_server_key_result.changed or stat_client_key_result.changed or vault_key_directory.matched != active_key_directory.matched )"

# have to fetch files before, because ansible lookup module works only with local files
- name: check keys folder
  shell: "ls -1 {{global_etc}}wireguard_mobile/keys/"
  register: vpn_key_result
  changed_when: no
  tags: [ 'user' ]

- name: fetch keys
  fetch:
    src: "{{global_etc}}wireguard_mobile/keys/{{item}}"
    dest: "/tmp/ansible/wireguard_mobile/{{item}}"
    flat: yes
  with_items: "{{vpn_key_result.stdout_lines}}"
  changed_when: no
  tags: [ 'user' ]

- name: collect server keys
  set_fact:
    vpn_gate_server_privatekey: "{{lookup('file', '/tmp/ansible/wireguard_mobile/server_privatekey')}}"
    vpn_gate_server_publickey: "{{lookup('file', '/tmp/ansible/wireguard_mobile/server_publickey')}}"
  tags: [ 'user' ]

- name: collect client keys
  set_fact:
    vpn_gate_client_privatekeys: "{{vpn_gate_client_privatekeys | default([]) | combine({ item : lookup('file', '/tmp/ansible/wireguard_mobile/client_' + item + '_privatekey')})  }}"
    vpn_gate_client_publickeys: "{{vpn_gate_client_publickeys | default([]) | combine({ item : lookup('file', '/tmp/ansible/wireguard_mobile/client_' + item + '_publickey')}) }}"
  with_items: "{{vpn_gates}}"
  tags: [ 'user' ]

- name: clean keys
  file:
    path: "/tmp/ansible/wireguard_mobile/"
    state: absent
  changed_when: no
  
- name: copy server config
  template:
    src: "templates/wg0.conf"
    dest: "{{ global_etc }}wireguard_mobile/wg0.conf"
    mode: 0600
  notify: "restart wireguard_mobile"
  
- name: copy client config (internal traffic)
  template:
    src: "templates/wg_client.conf"
    dest: "{{ global_etc }}wireguard_mobile/clients/wg_{{item}}.conf"
    mode: 0600
  with_items: "{{vpn_gates}}"
  tags: [ 'user' ]  
  
- name: copy client config (all traffic)
  template:
    src: "templates/wg_client_all_traffic.conf"
    dest: "{{ global_etc }}wireguard_mobile/clients/wg_{{item}}_all_traffic.conf"
    mode: 0600
  with_items: "{{vpn_gates}}"
  tags: [ 'user' ]
  
- name: build podman image
  vars:
    container_name: "wireguard_mobile"
    image_name: "custom_wireguard_mobile:{{alpine_version}}"
    image_files:
      - roles/wireguard_mobile/templates/container/Dockerfile
    entrypoint_startup:
      - "ip link del dev wg0 > /dev/null 2>&1"
      - "wg-quick up /etc/wireguard/wg0.conf 2>&1"
    entrypoint_shutdown:
      - "wg-quick down wg0 2>&1"
    entrypoint_check: "while wg show | grep -q 'wg0'; do sleep 60 & wait $!; done"
  include_tasks: roles/container/shared/build_podman_image.yml
  
- name: create podman container
  containers.podman.podman_container:
    name: wireguard_mobile
    image: "custom_wireguard_mobile:{{alpine_version}}"
    state: present
    security_opt:
      - label=disable
    env:
      TZ: "{{timezone}}"
    log_driver: journald
    log_options:
      tag: wireguard_mobile
    capabilities:
      - NET_ADMIN
      - SYS_MODULE
    network: "host"
#    networks:
#      - name: "mobile_vpn"
#    networks_cli_compatible: yes
    volumes:
      - '{{global_etc}}wireguard_mobile:/etc/wireguard'
#    exposed_ports:
#      - "{{mobile_vpn_internal_port}}/udp"
  register: "podman_container_state"
  notify: "restart wireguard_mobile"

# ***** SERVICE CONFIGS *****
- name: handle systemd service
  vars:
    container_name: "wireguard_mobile"
    container_pre_exec: "modprobe wireguard"
    container_readyness: { "type": "state_check" }
    container_changed: "{{podman_container_state.changed}}"
  include_tasks: roles/container/shared/handle_podman_service.yml
  tags: ['systemd_watcher_config','systemd_service_config']
  
- name: allow wireguard_mobile service
  vars:
    service_name: "wireguard_mobile"
    container_to_outside_rules:
      - { saddr: "{ {{ vpn_admin_ips | join(', ')}} }", protocol: "udp", comment: "vpn admin clients" }
    network_to_host_rules:
      - { protocol: "udp", dport: "{{mobile_vpn_internal_port}}", comment: "open vpn port" }
    masquerading_rules: |
        [
            { "saddr": "{{vpn_mobile_network}}/24", "oif": "{{default_network_interface}}" }
            {% if macvlan_range | length > 0 %}
              , { "saddr": "{{vpn_mobile_network}}/24", "oifname": "mac0" }
            {% endif %}
        ]
  include_tasks: roles/firewall/shared/allow_service.yml
  tags: ['firewall_config']
