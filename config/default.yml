# **** DEFAULT Variables ***
#
# - Variables without a default value are MANDATORY except there is a optional.
#    - In this case it is only mandatory if the optional is true. e.g variable 'system_update_notification_email'
#
# - The default value is used if the variable is not defined in your configuration
#
# **************************
default_variables: {
    "location":       {},                                         # "52.3476672,13.6215805" => latitude / longitude
    "timezone":       {},                                         # "Europe/Berlin"
    "language":       {},                                         # "en", "de" ...
    "country":        {},                                         # "EN", "DE" ...
    "region":         {},                                         # "bb" => berlin / brandenburg => https://www.openhab.org/docs/configuration/actions.html#ephemeris
    
    "root_email":     {},                                         # "testadmin@test.com" => gets all admin / alert / warning emails from your server

    "server_name":    {},                                         # "test"
    "server_domain":  {},                                         # "smartserver.test"
    
    "ssl_certificate": { "default": "selfsigned" },               # "selfsigned", "letsencrypt"
    
    "production_ip":  {},                                         # "192.168.7.50" your server ip
    "staging_ip":     { "default": "" },                          # "192.168.8.50" your testserver ip

    "server_ipv6": { "optional": yes },                           # "fde7:1250:3eaf:10:7285:c2ff:fef3:8a30" your server ipv6
    "server_network_ipv6": { "optional": "{{server_ipv6 is not defined}}" }, # "fde7:1250:3eaf::/48" your networkmask for ipv6
    "server_gateway_ipv6": { "optional": "{{server_ipv6 is not defined}}" }, # "fe80::3895:1ff:fe6c:4b01" your gateway for ipv6

    "intern_networks": { "default": [ "{{default_server_network}}" ] }, # e.g. intern ipv4 & ipv6 address ranges
    "public_networks": { "default": [] },                         # e.g. public ipv6 address ranges
    "trusted_networks": { "default": [] },                        # additional ipv4 & ipv6 networks allowed to connect the server

    # pihole and dlna ip's should be part of a contiguous area at the end of your server network
    # this contiguous area is configured as a subnet which is routed completely to a virtual macvlan bridge interface and is not usable for other device ip's anymore
    "pihole_ip":      { "optional": yes },                        # pihole ip address from same network as your server ip
    "pihole_ipv6":    { "optional": yes },                        # pihole ipv6 address from same network as your server ip
    "pihole_whitelist_domains": { "default": [ "www.googleadservices.com", "analytics.google.com", "clickserve.dartsearch.net", "ad.doubleclick.net" ] }, # domains are needed to use google search results

    "dlna_ip":        { "optional": yes },                        # dlna ip address from same network as your server ip
    "dlna_ipv6":      { "optional": yes },                        # dlna ipv6 address from same network as your server ip

    "dns_forward_ip_addresses": { "default": [ "8.8.8.8", "8.8.4.4" ] }, # used by dnsmasq
    
    "fping_test_hosts": { "default": [ "8.8.8.8" ] },             # reachability check in netdata

    # used in main role 'apache' and can be an empty array []
    "authenticated_ip_addresses": { "default": [] },              # apache access always allowed for ipaddresses e.g. from wallmounted tablets
    
    "public_domain":                                              { "default": "public.{{server_domain}}" },
    "default_isp":                                                { "default": {} }, # is used to detect a fallback internet connection in system_service
    # *** EXAMPLE ***
    # {
    #     org: [ ".+ Sverige AB" ],                               # external ip must be registered to a organisation or isp named ".+ Sverige AB"
    #     hostname: [ ".+d1-online\\\\.com" ],                    # external ip must be resolved to a spcific dns name
    #     ip: [ "185\\\\.89\\\\.36\\\\.[0-9]{1-3}" ]              # fixed external ip ranges
    # }

    # used in generic optional role 'wireguard_mobile'
    "mobile_vpn_internal_port": { "default": "51828" },           # the port, used on your server
    "mobile_vpn_public_port": {},                                 # the public port, reachable from outside. (e.g. forwarded port on your dsl router)
    # to complete the setup you have to configure port forwarding on your internet router where you forward the public port to your internal port
    
    "cloud_vpn": { "optional": yes },                             # used in generic optional role 'wirguard_cloud'

    "userdata": {},
    # *** EXAMPLE ***
    # {
    #     testuser1: {
    #         name: "Test User 1"                                 # mandatory.
    #         email: "test1@test.de"                              # mandatory.
    #         groups: [ "admin", "user" ]                         # mandatory.
    #         telegram_bot: {                                     # optional. used by openhab => reference to bot key in vault.yml
    #             bot_testuser1
    #         },
    #         phone_device: {                                     # optional. used by device_ping role
    #             ip: "{{default_server_subnet}}.69",
    #             timeout: 60
    #         },
    #         vpn_gates: {                                        # optional. used by wireguard_mobile role
    #             "phone": "{{vpn_mobile_subnet}}.11",
    #             "tablet": "{{vpn_mobile_subnet}}.12"
    #         },
    #         media_dir: {                                        # optional. nextcloud user folder which is available via dlna (can be any nextcloud subfolder)
    #             "test_media": "/"
    #         }
    #     }
    # }
    
    #"notify_log_errors": { "default": no },                      # send notifications for all log errors

    "update_service_software_check_enabled": { "default": yes },  # enables the update check for software used inside deployment roles / container
    "update_service_software_check_email": { "optional": yes },   # "testadmin@test.com" => sends a notification email after each check, if new software is available
    "update_service_system_check_enabled": { "default": yes },    # enables the update check for this deployment
    "update_service_system_check_email": { "optional": yes },     # "testadmin@test.com" => sends a notification email after each check, if new smartserver deployment updates are available
    
    #vault_telegram_bots: {},
    # {
    #     bot_testuser1: {
    #         chat_id: "<chat_id>",
    #         chat_token: "<chat_token>"
    #     }
    # }
    
    "vault_mailserver_username": {},                              # "testusername@test.com", "testadmin@test.com" ... => username from your email server
    "vault_mailserver_password": {},                              # "<mypassword>" => password from your email server
    "vault_mailserver_host": {},                                  # "smtp.gmail.com" => smtp address from your email server
    "vault_mailserver_port": {},                                  # "587" => smtp port from your email server

    "vault_userpasswords": {},
    # *** EXAMPLE ***
    # {
    #     testuser1: {
    #         samba_password: "<mysambapassword>",
    #         web_password: "<mywebpassword>"
    #     }
    # }

    # for details how to configure, check: https://github.com/zmartzone/mod_auth_openidc
    # to enable openid connect for google, go to: https://console.developers.google.com/apis/credentials
    "vault_openid_connect_url": { "optional": yes },              # 'optional' means disabled is not defined, to enable check documentation urls to get the right values
    "vault_openid_connect_client_id": { "optional": yes },
    "vault_openid_connect_client_secret": { "optional": yes },
    "vault_openid_connect_passphrase": { "optional": yes },

    "vault_form_auth_passphrase": {},                             # "8924jkhf2/8?23" => a random phrase which is used by form based apache login to encrypt sessions

    "vault_pihole_password": { "optional": "{{pihole_ip is not defined}}"}, # used to login into pihole

    "vault_ftp_username": { "optional": yes },                    # "ftp" => used for e.g. camera image uploads ('optional' means disabled is not defined)
    "vault_ftp_password": { "optional": "{{vault_ftp_username is not defined}}" },

    "vault_influxdb_admin_username": { "default": "admin" },      # used to login into influxdb webui
    "vault_influxdb_admin_password": {},
    "vault_influxdb_admin_token": {},                             # "lkjfdh7123kjas" => token used for internal command line operations

    "vault_shared_mysql_username": { "default": "shared" },       # used for internal data
    "vault_shared_mysql_password": {},

    # to enable obtain a login from https://api.weather.mg/
    # to disable, leave the username empty
    "vault_weather_api_username": { "optional": yes },            # 'optional' means disabled is not defined
    "vault_weather_api_password": { "optional": yes },

    "vault_nextcloud_instance_id": {},                            # "234sdgzw87399443s" => used internally
    "vault_nextcloud_password_salt": {},                          # "9ad9aus92z4ij20j20idj928912hd1jd0"
    "vault_nextcloud_secret": {},                                 # "890w3hf083hfuishf8834uf938jtoi23j3r928ur982rj2in3diuhe2u1423984uu23jh4ji23n2ji3nd23092i293u20293r9jujiuaawf"
    "vault_nextcloud_mysql_username": { "default": "nextcloud" }, # used for nextcloud data
    "vault_nextcloud_mysql_password": {},
    "vault_nextcloud_admin_username": { "default": "admin" },     # used to login as a nextcloud data
    "vault_nextcloud_admin_password": {},
    
    "nextcloud_additional_apps": { "default": [] },               # additional apps for nextcloud
    # *** EXAMPLE ***
    # [
    #     {
    #         "app": { "optional": yes },                         # app id. e.g. "cookbook"
    #         "name": { "optional": yes },                        # webui menu name. e.g. "Cookbook"
    #         "description": { "optional": yes },                 # webui menu info. e.g. "Recipes"
    #         "icon": { "optional": yes },                        # webui icon. e.g. "icons/nextcloud_cookbook.svg"
    #
    #         "usergroups": { "default": [] }                     # optional. limit visibility to specific groups or users. e.g. ["admin", "user", "<username>"]
    #         "order": { "default": 200 }                         # optional. control order in webui menu
    #     }
    # ]
    
    "vault_grafana_app_username": { "default": "admin" },

    "vault_deployment_config_git": { "default": "https://github.com/HolgerHees/smartserver.git" },
    "vault_deployment_token_git": { "optional": yes },            # only needed if you enable "ci_service"

    #"vault_dockerhub_username":   { "default": "holgerhees" },
    #"vault_dockerhub_password":   { "optional": yes },

    "vault_openhab_config_git": {},                               # a cloned git url of "https://github.com/HolgerHees/openhab-config.git"
    "vault_openhab_mysql_username": { "default": "openhab" },     # used for openhab data
    "vault_openhab_mysql_password": {},

    "weather_data": { "default": {} },                            # used for openhab webui weather widget
    # *** EXAMPLE ***
    # {
    #   openhab_temperature_item_url: "/rest/items/pOutdoor_WeatherStation_Temperature",
    #   cloud_icon_url: "/weather/weatherTodayIcon.php"
    # }

    "network_devices": { "default": [] },                         # used for librenms and system_service (network monitoring)
    # *** EXAMPLE ***
    # [
    #     {
    #         host: { "optional": yes },                          # "{{default_server_subnet}}.100"
    #         name: { "optional": yes },                          # "WLan AP Inhouse" => will be used in webui for openwrt devices
    #         snmp_method: { "optional": yes },                   # "v2c"
    #         snmp_community_string: { "optional": yes }          # "public"
    #         is_openwrt: { "optional": yes }                     # True
    #     }
    # ]

    "netflow_collector": { "default": no },                       # enable netflow collector in system_service
    "netflow_incoming_traffic": { "default": [] },                # from internet allowed traffic, (used to validate netflow traffic direction)
    # *** EXAMPLE ***
    # {
    #   { target: "{{production_ip}}:80", name: "http", allowed: { hostname: [ ".+\\\\.internetnord\\\\.de", ".+letsencrypt\\\\.org" ] } }, # Letsencrypt, CLOUD PING Test
    #   { target: "{{production_ip}}:10114", name: "alexa api", allowed: { org: [ "AWS EC2 .+" ] } }, # ALEXA
    #   { target: "{{production_ip}}:456", name: "test", allowed: { ip: [ "185\\\\.89\\\\.36\\\\.[0-9]{1-3}" ] } }, # Fixed IP range test
    # }

    # *** EXAMPLE ***
    # [
    #     { target: "{{production_ip}}:80", name: "http" },
    #     { target: "{{production_ip}}:51829", name: "wireguard" }
    # ]
    "speedtest_server_id": { "default": "auto" },                 # used for system_service speedtest

    "librenms_poller_interval": { "default": 5 },                 # interval in minutes

    "vault_wifi_networks": { "default": {} },
    # {
    #     test1: { password: "1234", type: "public" },
    #     test2: { password: "3456", type: "intern" }
    # }

    "vault_librenms_mysql_username": { "default": "librenms", "optional": "{{librenms_devices | length == 0}}" },
    "vault_librenms_mysql_password": { "optional": "{{librenms_devices | length == 0}}" },

    "vault_librenms_api_token": { "optional": "{{librenms_devices | length == 0}}" },

    "vault_openwrt_api_username": { "default": "api", "optional": "{{openwrt_devices | length == 0}}" },
    "vault_openwrt_api_password": { "optional": "{{openwrt_devices | length == 0}}" },
    #"vault_openwrt_root_password": { "optional": "{{openwrt_devices | length == 0}}" },

    "vault_fritzbox_api_username": { "default": "api", "optional": "{{fritzbox_devices | length == 0}}" },
    "vault_fritzbox_api_password": { "optional": "{{fritzbox_devices | length == 0}}" },
}

librenms_devices: "{{network_devices | default([]) | selectattr('snmp_method', 'defined') | list}}"
openwrt_devices: "{{network_devices | default([]) | selectattr('type', 'defined') | selectattr('type','==','openwrt') | list}}"
fritzbox_devices: "{{network_devices | default([]) | selectattr('type', 'defined') | selectattr('type','==','fritzbox') | list}}"


