# **** DEFAULT Variables ***
#
# - Variables without a default value are MANDATORY except there is a optional.
#    - In this case it is only mandatory if the optional is true. e.g variable 'update_service_system_check_email'
#
# - The default value is used if the variable is not defined in your configuration
#
# **************************
default_variables: {
    "location":       {},                                         # "52.3476672,13.6215805" => latitude / longitude
    "timezone":       {},                                         # "Europe/Berlin"
    "language":       {},                                         # "en", "de" ...
    "country":        {},                                         # "EN", "DE" ...
    "region":         {},                                         # "bb" => berlin / brandenburg => https://www.openhab.org/docs/configuration/actions.html#ephemeris
    
    "root_email":     {},                                         # "testadmin@test.com" => gets all admin / alert / warning emails from your server

    "server_name":    {},                                         # "test"
    "server_domain":  {},                                         # "smartserver.test"
    
    "ssl_certificate": { "default": "selfsigned" },               # "selfsigned", "letsencrypt"
    
    "production_ip":  {},                                         # "192.168.7.50" your server ip
    "staging_ip":     { "default": "" },                          # "192.168.8.50" your testserver ip

    "ipv6_enabled":   { "default": no },

    "intern_networks": { "default": [] },                         # e.g. intern (trusted) ipv4 & ipv6 address ranges. Networks, based on production/staging ip and ansible server ip, be added additionally.
    "public_networks": { "default": [] },                         # e.g. public ipv6 address ranges

    "env_path":       { "default": "/dataDisk/" },
    "data_path":      { "default": "/dataRaid/" },

    "dns_forward_ip_addresses": { "default": [ "8.8.8.8", "8.8.4.4" ] }, # used by dnsmasq

    # *** BEGIN OUTGOING MAIL SERVER ***
    "vault_mailserver_username": {},                              # "testusername@test.com", "testadmin@test.com" ... => username from your email server
    "vault_mailserver_password": {},                              # "<mypassword>" => password from your email server
    "vault_mailserver_host": {},                                  # "smtp.gmail.com" => smtp address from your email server
    "vault_mailserver_port": {},                                  # "587" => smtp port from your email server
    # *** END OUTGOING MAIL SERVER

    # used in main role 'apache' and can be an empty array []
    "authenticated_ip_addresses": { "default": [] },              # apache access always allowed for ipaddresses e.g. from wallmounted tablets
    
    "public_domain":                                              { "default": "public.{{server_domain}}" },

    "userdata": {},
    # *** EXAMPLE ***
    # {
    #     testuser1: {
    #         name: "Test User 1"                                 # mandatory.
    #         email: "test1@test.de"                              # mandatory.
    #         groups: [ "admin", "user" ]                         # mandatory.
    #         telegram_bot: {                                     # optional. used by openhab => reference to bot key in vault.yml
    #             bot_testuser1
    #         },
    #         phone_device: {                                     # optional. used by device_ping role
    #             ip: "{{default_server_subnet}}.69",
    #             timeout: 60
    #         },
    #         vpn_gates: {                                        # optional. used by wireguard_mobile role
    #             "phone": "{{vpn_mobile_subnet}}.11",
    #             "tablet": "{{vpn_mobile_subnet}}.12"
    #         },
    #         media_dir: {                                        # optional. nextcloud user folder which is available via dlna (can be any nextcloud subfolder)
    #             "test_media": "/"
    #         }
    #     }
    # }
    
    "vault_userpasswords": {},
    # *** EXAMPLE ***
    # {
    #     testuser1: {
    #         samba_password: "<mysambapassword>",
    #         web_password: "<mywebpassword>"
    #     }
    # }

    "network_devices": { "default": [] },                         # used for librenms and system_service (network monitoring)
    # *** EXAMPLE ***
    # [
    #     {
    #         host: { "optional": yes },                          # "{{default_server_subnet}}.100"
    #         name: { "optional": yes },                          # "WLan AP Inhouse" => will be used in webui for openwrt devices
    #         snmp_method: { "optional": yes },                   # "v2c"
    #         snmp_community_string: { "optional": yes }          # "public"
    #         is_openwrt: { "optional": yes }                     # True
    #     }
    # ]

    "vault_deployment_config_git": { "default": "https://github.com/HolgerHees/smartserver.git" },
    "vault_deployment_token_git": { "optional": yes },            # only needed if you enable "ci_service"

    # *** BEGIN APACHE AUTH ***
    # for details how to configure, check: https://github.com/zmartzone/mod_auth_openidc
    # to enable openid connect for google, go to: https://console.developers.google.com/apis/credentials
    "vault_openid_connect_url": { "optional": yes },              # 'optional' means disabled is not defined, to enable check documentation urls to get the right values
    "vault_openid_connect_client_id": { "optional": yes },
    "vault_openid_connect_client_secret": { "optional": yes },
    "vault_openid_connect_passphrase": { "optional": yes },

    "vault_form_auth_passphrase": {},                             # "8924jkhf2/8?23" => a random phrase which is used by form based apache login to encrypt sessions
    # *** END APACHE AUTH ***

    # *** BEGIN SAMBA ***
    "samba_enabled": { "default": yes },                          # enabled by default
    # *** END SAMBA ***

    # *** BEGIN MONITORING ***
    "monitoring_enabled": { "default": yes },                     # enabled by default => will disable fluentd, loki, prometheus and alertmanager, systemd_watcher and hardware_*

    "grafana_enabled": { "default": yes },                        # enabled by default
    "vault_grafana_app_username": { "default": "admin" },

    "netdata_enabled": { "default": yes },                        # enabled by default => needs prometheus
    # *** END MONITORING ***

    # **** BEGIN LIBRENMS ****
    # enabled if there are network_devices with attribute 'snmp_method'
    "librenms_enabled": { "default": "{{librenms_devices | length > 0}}" },
    "librenms_poller_interval": { "default": 5 },                 # interval in minutes
    "vault_librenms_mysql_username": { "default": "librenms" },
    "vault_librenms_mysql_password": { "optional": "{{not librenms_enabled}}" },
    "vault_librenms_api_token": { "optional": "{{not librenms_enabled}}" },
    # **** END LIBRENMS ****

    # *** BEGIN DNS SERVER ***
    # enabled by choosing a type
    "dns_type":       { "default": "" },                          # 'pihole' or 'dnsmasq'
    "dns_overrides":  {"default": [] },
    "dns_default_domain": {"default": "lan"},

    "dhcp_type":      { "default": "" },                          # 'pihole' or 'dnsmasq'
    "dhcp_range_start": { "default": "{{default_server_subnet}}.151"},
    "dhcp_range_end": { "default": "{{default_server_subnet}}.200"},
    "dhcp_reservations": {"default": []},
    "dhcp_dns_server": {"default": "{{ pihole_ip if pihole_ip is defined else default_server_ip }}"},

    # pihole and dlna ip's should be part of a contiguous area at the end of your server network
    # this contiguous area is configured as a subnet which is routed completely to a virtual macvlan bridge interface and is not usable for other device ip's anymore
    "pihole_enabled": { "default": "{{pihole_ip is defined}}" },
    "pihole_ip":      { "optional": yes },                        # pihole ip address from same network as your server ip
    "pihole_ipv6":    { "optional": yes },                        # pihole ipv6 address from same network as your server ip
    "pihole_whitelist_domains": { "default": [ "www.googleadservices.com", "analytics.google.com", "clickserve.dartsearch.net", "ad.doubleclick.net" ] }, # domains are needed to use google search results
    "pihole_addlist_urls": { "default": [ "https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts", "https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-only/hosts", "https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/gambling-only/hosts" ] },
    "vault_pihole_password": { "optional": "{{pihole_ip is not defined}}"}, # used to login into pihole
    # *** END DNS SERVER ***

    # *** BEGIN VPN ***
    # used in generic optional role 'wireguard_mobile'
    "mobile_vpn_enabled": { "default": "yes" },                   # enabled by default
    "mobile_vpn_internal_port": { "default": "51828" },           # the port, used on your server
    "mobile_vpn_public_port": { "optional": "{{not mobile_vpn_enabled}}" }, # the public port, reachable from outside. (e.g. forwarded port on your dsl router)
    # to complete the setup you have to configure port forwarding on your internet router where you forward the public port to your internal port
    # *** END VPN ***

    # *** BEGIN DATABASES ***
    "influxdb_enabled": { "default": yes },                       # enabled by default, be careful with disabling, because it will break openhab, system_service and netdata.
    "vault_influxdb_admin_username": { "default": "admin" },      # used to login into influxdb webui
    "vault_influxdb_admin_password": { "optional": "{{not influxdb_enabled}}" },
    "vault_influxdb_admin_token": { "optional": "{{not influxdb_enabled}}" }, # "lkjfdh7123kjas" => token used for internal command line operations

    "mysql_enabled": { "default": yes },                          # enabled by default, be careful with disabling, because it will break openhab, nextcloud, and librenms.
    "vault_shared_mysql_username": { "default": "shared" },       # used for internal data
    "vault_shared_mysql_password": { "optional": "{{not mysql_enabled}}" },

    "redis_enabled": { "default": yes },                          # enabled by default, be careful with disabling, because it will break nextcloud and librenms

    "mosquitto_enabled": { "default": yes },                      # enabled by default, be careful with disabling, because it will break system_service and openhab
    # *** END DATABASES AUTH ***

    # *** BEGIN DLNA SERVER ***
    "dlna_enabled":   { "default": "{{dlna_ip is defined and ( dlna_volumes | length ) > 0}}"},
    "dlna_ip":        { "optional": yes },                        # dlna ip address from same network as your server ip
    "dlna_ipv6":      { "optional": yes },                        # dlna ipv6 address from same network as your server ip
    # *** END DLNA SERVER ***

    # *** BEGIN NEXTCLOUD ***
    "nextcloud_enabled": { "default": yes },                      # enabled by default
    "vault_nextcloud_instance_id": { "optional": "{{not nextcloud_enabled}}" }, # "234sdgzw87399443s" => used internally
    "vault_nextcloud_password_salt": { "optional": "{{not nextcloud_enabled}}" }, # "9ad9aus92z4ij20j20idj928912hd1jd0"
    "vault_nextcloud_secret": { "optional": "{{not nextcloud_enabled}}" }, # "890w3hf083hfuishf8834uf938jtoi23j3r928ur982rj2in3diuhe2u1423984uu23jh4ji23n2ji3nd23092i293u20293r9jujiuaawf"
    "vault_nextcloud_mysql_username": { "default": "nextcloud" }, # used for nextcloud data
    "vault_nextcloud_mysql_password": { "optional": "{{not nextcloud_enabled}}" },
    "vault_nextcloud_admin_username": { "default": "admin" },     # used to login as a nextcloud data
    "vault_nextcloud_admin_password": { "optional": "{{not nextcloud_enabled}}" },
    "nextcloud_additional_apps": { "default": [] },               # additional apps for nextcloud
    # *** EXAMPLE ***
    # [
    #     {
    #         "app": { "optional": yes },                         # app id. e.g. "cookbook"
    #         "name": { "optional": yes },                        # webui menu name. e.g. "Cookbook"
    #         "description": { "optional": yes },                 # webui menu info. e.g. "Recipes"
    #         "icon": { "optional": yes },                        # webui icon. e.g. "icons/nextcloud_cookbook.svg"
    #
    #         "usergroups": { "default": [] }                     # optional. limit visibility to specific groups or users. e.g. ["admin", "user", "<username>"]
    #         "order": { "default": 200 }                         # optional. control order in webui menu
    #     }
    # ]
    # *** END NEXTCLOUD ***

    # *** BEGIN OPENHAB ***
    "openhab_enabled": { "default": yes },                         # enabled by default
    "vault_openhab_config_git": {},                               # a cloned git url of "https://github.com/HolgerHees/openhab-config.git"
    "vault_openhab_mysql_username": { "default": "openhab" },     # used for openhab data
    "vault_openhab_mysql_password": { "optional": "{{not openhab_enabled}}" },
    # *** END OPENHAB ***

    # *** BEGIN CAMERA & FTP SERVICE ***
    # enabled if there are camera devices configured
    "camera_enabled": { "default": "{{camera_devices | length > 0}}" },
    "camera_devices": { "default": [] },                          # used for ftp upload, image gallkery and menu entries
    # *** EXAMPLE ***
    # [
    #     {
    #         uid: {},                                            # unique identifier for this device. Will be used to generate proxy urls like /camera{uid | capelized}Image
    #         name: {},                                           # menu and gallery name
    #         details: { "optional": yes },                       # additional details like brand name
    #         ftp_upload_name: { "optional": yes },               # the folder name where alert images are uploaded int the ftp folder (it is just the subfolder name, not the whole path)
    #         snapshot_url: {},                                   # external url to get a snapshot/preview image
    #         snapshot_username: { "optional": yes }              # username to authenticate external url
    #         snapshot_password: { "optional": yes }              # password to authenticate external url
    #     }
    # ]
    "vault_ftp_username": { "optional": "{{not camera_enabled}}" }, # "ftp" => used for e.g. camera image uploads ('optional' means disabled is not defined)
    "vault_ftp_password": { "optional": "{{not camera_enabled}}" },
    "ftp_max_file_age": { "default": "{{2 * 24 * 60}}" },         # images, older then 2 days are discarded
    # **** END CAMERA SERVICE ****

    # **** BEGIN UPDATE SYSTEM SERVICE ****
    "update_service_enabled": { "default": "{{ update_service_software_check_enabled or update_service_system_check_enabled}}" },
    "update_service_software_check_enabled": { "default": yes },  # enables the update check for software used inside deployment roles / container
    "update_service_software_check_email": { "optional": yes },   # "testadmin@test.com" => sends a notification email after each check, if new software is available
    "update_service_system_check_enabled": { "default": yes },    # enables the update check for this deployment
    "update_service_system_check_email": { "optional": yes },     # "testadmin@test.com" => sends a notification email after each check, if new smartserver deployment updates are available
    # **** END UPDATE SYSTEM SERVICE ****

    # **** BEGIN SYSTEM SERVICE ****
    "system_service_enabled": { "default": yes },                 # enabled by default

    "fping_test_hosts": { "default": [ "8.8.8.8" ] },             # reachability check in system_service

    "default_isp":                                                { "default": {} }, # is used to detect a fallback internet connection in system_service
    # *** EXAMPLE ***
    # {
    #     org: [ ".+ Sverige AB" ],                               # external ip must be registered to a organisation or isp named ".+ Sverige AB"
    #     hostname: [ ".+d1-online\\\\.com" ],                    # external ip must be resolved to a spcific dns name
    #     ip: [ "185\\\\.89\\\\.36\\\\.[0-9]{1-3}" ]              # fixed external ip ranges
    # }

    "traffic_blocker": { "default": yes },                        # enabled or disabled automatic ip blocking based on several decissions (additionally there must be a propper configured 'netflow_incoming_traffic' variable)
    # 1. if suspicious traffic arrives the apache webserver => which traffic, can be configured in the variable 'netflow_incoming_traffic' and the attribute 'log'
    # 2. if unexcpected traffic arrives the network  => which traffic, can be configured  in the variable 'netflow_incoming_traffic' and the attribute 'allowed'
    "netflow_collector": { "default": no },                       # enable netflow collector in system_service
    "netflow_incoming_traffic": { "default": [] },                # from internet expected and allowed traffic, (used to detect netflow traffic direction and for traffic blocker to decide which traffic is suspicious)
    # *** EXAMPLE ***
    # {
    #   { target: "{{production_ip}}:80", name: "http", allowed: { hostname: [ ".+\\\\.internetnord\\\\.de", ".+letsencrypt\\\\.org" ] }, log="apache" }, # Letsencrypt, CLOUD PING Test
    #   { target: "{{production_ip}}:10114", name: "alexa api", allowed: { org: [ "AWS EC2 .+" ] }, log="apache" }, # ALEXA
    #   { target: "{{production_ip}}:51820", name: "wireguard", allowed: { wireguard_peers: [ "check" ] } }, # system check for connected wireguard peers
    #   { target: "{{production_ip}}:456", name: "test", allowed: { ip: [ "185\\\\.89\\\\.36\\\\.[0-9]{1-3}" ] } }, # Fixed IP range test
    # }
    #
    # *** Attibute Explanation ***
    # 'logs' => "apache" means, traffic to this 'target' is additionally collected and analysed from apache logs
    # 'allowed' => various regexes agains hostnames, org (ISP) or ip to mark traffic as normal. Type 'wireguard_peers' means the traffic ip is compared with active wireguard endpoints
    # 'name' is just used as an identifier
    # 'target' is a combination of the target ip and port number
    "speedtest_server_id": { "default": "auto" },                 # used for system_service speedtest

    "vault_openwrt_api_username": { "default": "api" },
    "vault_openwrt_api_password": { "optional": "{{openwrt_devices | length == 0}}" },
    #"vault_openwrt_root_password": { "optional": "{{openwrt_devices | length == 0}}" },

    "vault_fritzbox_api_username": { "default": "api" },
    "vault_fritzbox_api_password": { "optional": "{{fritzbox_devices | length == 0}}" },
    # **** END SYSTEM SERVICE ****

    # **** BEGIN PUBLIC GUEST WIFI BARCODE GENERATOR ****
    # enabled if there are vault_wifi_networks configured
    "vault_wifi_networks": { "default": {} },
    # {
    #     test1: { password: "1234", type: "public" },
    #     test2: { password: "3456", type: "intern" }
    # }
    # **** END PUBLIC GUEST WIFI BARCODE GENERATOR ****

    # **** BEGIN OPENWRT CONFIG GENERATOR ****
    openwrt_config_generator_enabled: { "default": "{{openwrt_devices | length > 0}}" },
    # **** END OPENWRT CONFIG GENERATOR ****

    # **************************
    # *** BELOW ARE BY DEFAULT NOT INCLUDED ROLES ***
    # **************************

    # *** BEGIN PRIVATE CLOUD SERVICE ***
    "cloud_vpn": { "optional": yes },                             # used in generic optional role 'wirguard_cloud'
    # *** END PRIVATE CLOUD SERVICE ***

    # *** BEGIN WEATHER SERVICE ***
    # to enable just include in your cusom role files
    # and obtain a login from https://api.weather.mg/
    "vault_weather_api_username": { "optional": yes },            # 'optional' means disabled is not defined
    "vault_weather_api_password": { "optional": yes },
    # *** END WEATHER SERVICE ***
}

project_name:                     "smartserver"

# version of alpine linux used in several container based roles
alpine_version:                   "3.19.1"

flask_core_version:               "3.0.0"
flask_socketio_version:           "5.3.6"

htdocs_path:                      "{{env_path}}htdocs/"
global_etc:                       "{{env_path}}etc/"
global_tmp:                       "{{env_path}}tmp/"
global_build:                     "{{env_path}}build/"
global_log:                       "{{env_path}}var/log/"
global_lib:                       "{{env_path}}var/lib/"

projects_path:                    "{{data_path}}projects/"
cloud_path:                       "{{data_path}}cloud/"
backup_path:                      "{{data_path}}backups/"

deployment_path:                  "{{projects_path}}{{project_name}}/"

deployment_config_path:           "{{deployment_path}}{{config_path}}"
deployment_inventory_path:        "{{ansible_inventory_sources[0]}}"

nextcloud_data_path:              "{{data_path}}nextcloud/"

samba_master:                     "{%if is_production%}yes{%else%}no{%endif%}"

# used for e.g. openwrt's md5 password crypt
default_password_salt:            "{{((server_domain+':'+default_server_ip) | b64encode | replace(';','0') )[:-1]}}"

docker_base_network:              "172.16.0.0"
docker_base_gateway:              "172.16.0.1"
docker_dns_ip:                    "172.16.0.100"
docker_postfix_ip:                "172.16.0.101"
docker_influxdb_ip:               "172.16.0.103"
docker_redis_ip:                  "172.16.0.104"
docker_mysql_ip:                  "172.16.0.105"
docker_mosquitto_ip:              "172.16.0.106"
docker_speedtest_ip:              "172.16.0.107"
docker_libreoffice_ip:            "172.16.0.108"
docker_alertmanager_ip:           "172.16.0.109"
docker_loki_ip:                   "172.16.0.110"
docker_fluentd_ip:                "172.16.0.111"
docker_php_ip:                    "172.16.0.112"
docker_librenms_ip:               "172.16.0.113"
docker_prometheus_ip:             "172.16.0.114"
docker_grafana_ip:                "172.16.0.115"

docker_cloud_mosquitto_ip:        "172.16.0.200"
docker_weather_service_ip:        "172.16.0.201"
docker_cloud_check_ip:            "172.16.0.202"
docker_camera_ftp_ip:             "172.16.0.203"
docker_camera_service_ip:         "172.16.0.204"

docker_vcontrold_ip:              "172.16.0.230"

netgroup:                         "{{default_server_ip.split('.')[2]}}"

vpn_mobile_network:               "10.100.{{netgroup}}.0"
vpn_mobile_subnet:                "10.100.{{netgroup}}"

vpn_cloud_subnet:                 "10.101"
vpn_cloud_services:               "{
{% if cloud_vpn is defined %}
  \"local\": {
      \"bridge\": \"{{cloud_vpn.interface.network.split('.')[:3] | join('.')}}.1\",
      \"gateway\": \"{{cloud_vpn.interface.network.split('.')[:3] | join('.')}}.2\",
      \"nfs\": \"{{cloud_vpn.interface.network.split('.')[:3] | join('.')}}.3\",
      \"mosquitto\": \"{{cloud_vpn.interface.network.split('.')[:3] | join('.')}}.4\"
  },
  \"remote\": {
      {% for peer in cloud_vpn.peers %}
      \"{{peer}}\": {
          \"bridge\": \"{{cloud_vpn.peers[peer].network.split('.')[:3] | join('.')}}.1\",
          \"gateway\": \"{{cloud_vpn.peers[peer].network.split('.')[:3] | join('.')}}.2\",
          \"nfs\": \"{{cloud_vpn.peers[peer].network.split('.')[:3] | join('.')}}.3\",
          \"mosquitto\": \"{{cloud_vpn.peers[peer].network.split('.')[:3] | join('.')}}.4\"
      },
      {% endfor %}
  }
{% endif %}
}"

macvlan_ips:                      "[
{% if pihole_ip is defined %}'{{pihole_ip}}',{% endif %}
{% if dlna_ip is defined %}'{{dlna_ip}}',{% endif %}
]"

macvlan_range: "{% if macvlan_ips | length > 0 %}{{macvlan_ips | cidr_merge('span')}}{% else %}{% endif %}"

#- name: detect macvlan subnet
#  debug:
#    msg: "{{macvlan_range}}"

dlna_volumes:                    "{
{% for username in userdata %}
{% if userdata[username].media_dir is defined %}
{% for media_name in userdata[username].media_dir %}
  \"{{nextcloud_data_path}}{{username}}/files/{{userdata[username].media_dir[media_name]}}\": \"/media/{{media_name}}\",
{% endfor %}
{% endif %}
{% endfor %}
}"


librenms_devices: "{{network_devices | default([]) | selectattr('snmp_method', 'defined') | list}}"
openwrt_devices: "{{network_devices | default([]) | selectattr('type', 'defined') | selectattr('type','==','openwrt') | list}}"
fritzbox_devices: "{{network_devices | default([]) | selectattr('type', 'defined') | selectattr('type','==','fritzbox') | list}}"


