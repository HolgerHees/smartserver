# **** DEFAULT Variables ***
#
# - Variables with a 'default' attribute are created if there is no variable defined in your configuration
# - Variables without a 'default' attribute and without a 'optional' attribute are mandatory
#   - HINT: You get an error if you have not defined this variable in your configuration
#
# - Variables with a 'optional' attribute are not mandatory and must not be defined in your confiuration
#
# - Variables with a 'dependency' condition are only used if the condition applies to True.
#   - If the condition applies to True, the variable behaves like decribed before
#   - If the condition applies to False, the variable is ignored
#       - HINT: You get a warning if you defined this variable in your configuration, because its unneeded
#
# - Variables with a 'requirement' condition, requires other variables or features
#   - This condition are a comma seperated list of individual conditions
#   - HINT: If one of the condition applies to False, you get an error
#
# **************************
default_variables: {
    location:                                 {},                                                                   # "52.3476672,13.6215805" => latitude / longitude
    timezone:                                 {},                                                                   # "Europe/Berlin"
    language:                                 {},                                                                   # "en", "de" ...
    country:                                  {},                                                                   # "EN", "DE" ...
    region:                                   {},                                                                   # "bb" => berlin / brandenburg => https://www.openhab.org/docs/configuration/actions.html#ephemeris
    
    root_email:                               {},                                                                   # "testadmin@test.com" => gets all admin / alert / warning emails from your server

    server_name:                              {},                                                                   # "test"
    server_domain:                            {},                                                                   # "smartserver.test"
    public_domain:                            { default: "public.{{server_domain}}" },

    production_ip:                            {},                                                                   # "192.168.7.50" your server ip
    staging_ip:                               { default: "" },                                                      # "192.168.8.50" your testserver ip

    ipv6_enabled:                             { default: no },

    intern_networks:                          { default: [] },                                                      # e.g. intern (trusted) ipv4 & ipv6 address ranges. Networks, based on production/staging ip and ansible server ip, be added additionally.
    public_networks:                          { default: [] },                                                      # e.g. public ipv6 address ranges

    base_path:                                { default: "/smartserver/" },                                         # path for smartserver related service data
    data_path:                                { default: "{{base_path}}data/" },                                    # path for smartserver related user data
    backup_path:                              { default: "{{data_path}}backups/" },                                 # path for local backup data
    
    userdata:                                 {},
    # *** EXAMPLE for userdata ***
    # userdata: {
    #     testuser1: {                                                                                              # key is the username
    #         name: "Test User 1",                                                                                  # mandatory name (not username)
    #         email: "test1@test.de",                                                                               # mandatory email
    #         groups: [ "admin", "user" ],                                                                          # mandatory usergroups - missing 'user' group, this user is not added as a real account (samba,web,nextcloud)
    #         password: "{{vault_userpasswords['testuser1']}}",                                                     # mandatory password
    #         phone_device: {                                                                                       # optional. used by system_service device_ping
    #             ip: "{{default_server_subnet}}.69",
    #             timeout: 60
    #         },
    #         vpn_gates: {                                                                                          # optional. used by wireguard_mobile role
    #             phone: "{{vpn_mobile_subnet}}.11",
    #             tablet: "{{vpn_mobile_subnet}}.12"
    #         },
    #         media_dir: {                                                                                          # optional. nextcloud user folder which is available via dlna (can be any nextcloud subfolder)
    #             test_media: "/"
    #         },
    #         openhab: {                                                                                            # optional. used by openhab to create a python configuration for later usage in custom roles
    #             state_item: "pOther_Presence_Testuser1_State",
    #             notification_config: [ "pushover", "pushover:pushover-account:account", "Testuser" ]
    #         }
    #     }
    # }
    #
    # *** referenced variable from userdata for storing passwords seperatly inside a encrypted vault file
    # vault_userpasswords: {
    #     testuser1: "<sambapassword>"
    # }

    network_devices:                          { optional: yes },                                                    # used for librenms, system_service (network monitoring) and openwrt => they are preprocessed at the end of this config file
    # *** EXAMPLE for network_devices ***
    # [
    #     {
    #         host: { optional: yes },                                                                              # "{{default_server_subnet}}.100"
    #         name: { optional: yes },                                                                              # "WLan AP Inhouse" => will be used in webui for openwrt devices
    #         snmp_method: { optional: yes },                                                                       # "v2c"
    #         snmp_community_string: { optional: yes }                                                              # "public"
    #         type: { optional: yes }                                                                               # 'openwrt', 'fritzbox', or absend
    #         config: { optional: yes }                                                                             # only related to openwrt deployment
    #     }
    # ]

    deployment_config_git:                    { default: "https://github.com/HolgerHees/smartserver.git" },         # used deployment, update_service and ci_service role

    github_auth_token:                        { optional: yes,                                                      # used in update_service (to avoid rate limits https://docs.github.com/de/rest/rate-limit/rate-limit) or ci_service (for pushing ci states to a private repository)
                                                dependency: "{{deployment_config_git is defined or update_service_enabled}}" }, # (INFO: 'dependency' is not nessecarry, because 'deployment_config_git' is mandatory)


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # *** BEGIN OUTGOING MAIL SERVER                                                   ***
    # Roles:
    # - 'postfix'
    mailserver_username:                      {},                                                                   # "testusername@test.com", "testadmin@test.com" ... => username from your email server
    mailserver_password:                      {},                                                                   # "<mypassword>" => password from your email server
    mailserver_host:                          {},                                                                   # "smtp.gmail.com" => smtp address from your email server
    mailserver_port:                          { default: "587",                                                     # "smtp port from your email server
                                                dependency: "{{mailserver_host is defined}}" },                     # (INFO: 'dependency' not nessecarry, because 'mailserver_host' is mandatory)
    # *** END OUTGOING MAIL SERVER                                                     ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # *** BEGIN APACHE AUTH                                                            ***
    # for details how to configure, check: https://github.com/zmartzone/mod_auth_openidc
    # to enable openid connect for google, go to: https://console.developers.google.com/apis/credentials
    # Roles:
    # - 'apache'
    ssl_certificate:                          { default: "selfsigned" },                                            # "selfsigned", "letsencrypt"
    # used in main role 'apache' and can be an empty array []
    authenticated_ip_addresses:               { default: [] },                                                      # apache access always allowed for ipaddresses e.g. from wallmounted tablets

    openid_connect_url:                       { optional: yes },                                                    # 'optional' means disabled is not defined, to enable check documentation urls to get the right values
    openid_connect_client_id:                 { dependency: "{{openid_connect_url is defined}}" },
    openid_connect_client_secret:             { dependency: "{{openid_connect_url is defined}}" },
    openid_connect_passphrase:                { dependency: "{{openid_connect_url is defined}}" },

    form_auth_passphrase:                     {},                                                                   # "8924jkhf2/8?23" => a random phrase which is used by form based apache login to encrypt sessions
    # *** END APACHE AUTH                                                              ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # *** BEGIN SAMBA                                                                  ***
    # Roles:
    # - 'samba'
    samba_enabled:                            { default: yes },                                                     # enabled by default
    # *** END SAMBA                                                                    ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # *** BEGIN MONITORING                                                             ***
    # Roles:
    # - 'fluentd'
    # - 'prometheus'
    # - 'alertmanager'
    # - 'systemd_watcher'
    # - 'hardware_mdadm'
    # - 'hardware_smartd'
    # - 'hardware_sensors'
    monitoring_enabled:                       { default: yes },                                                     # enabled by default

    # Roles:
    # - 'grafana'
    grafana_enabled:                          { default: yes },                                                     # enabled by default
    grafana_app_username:                     { default: "admin",
                                                dependency: "{{grafana_enabled}}" },

    # Roles:
    # - 'netdata'
    netdata_enabled:                          { default: yes,                                                       # enabled by default
                                                requirement: "influxdb_enabled" },
    # *** END MONITORING                                                               ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # **** BEGIN LIBRENMS                                                              ***
    # Roles:
    # - 'librenms'
    librenms_enabled:                         { default: "{{librenms_devices | length > 0}}",
                                                requirement: "mysql_enabled,redis_enabled" },                        # enabled if there are network_devices with attribute 'snmp_method'
    librenms_poller_interval:                 { default: 5,                                                         # interval in minutes
                                                dependency: "{{librenms_enabled}}" },
    librenms_mysql_username:                  { default: "librenms",
                                                dependency: "{{librenms_enabled}}" },
    librenms_mysql_password:                  { dependency: "{{librenms_enabled}}" },
    librenms_api_token:                       { dependency: "{{librenms_enabled}}" },
    # **** END LIBRENMS                                                                ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # *** BEGIN DNS SERVER                                                             ***
    # There is always a dns service (dnsmasq) running to resolve *.<server_domain> to this server and forwards everthing else to dns_forward_ip_addresses
    # Roles:
    # - 'dnsmasq'
    # - 'pihole'

    # The default flow is <pihole:pihole_ip:53> forwards to <dnsmasq:server_ip:53> forwards to <dns_forward_ip_addresses>
    # In this way you can decided, by choosing pihole or dnsmasq, if you want adblocking enabled or not for your device
    # All local containers/services using 'dnsmasq'

    dns_forward_ip_addresses:                 { default: [ "8.8.8.8", "8.8.4.4" ] },                                # used by dnsmasq

    # This extends 'dnsmasq' or 'pihole' to acts as a full dns server, with custom entries
    dns_enabled:                              { default: "{{dns_type is defined}}" },                               # enabled by define a 'dns_type'
    dns_type:                                 { optional: yes },                                                    # 'dnsmasq' or 'pihole' (pihole_ip must be defined)
    dns_overrides:                            { default: [],
                                                dependency: "{{dns_enabled}}" },
     # *** EXAMPLE for dns_overrides ***
     # [
     #     {ip: {{default_server_subnet}}.73, custom_dns: "tv.other.domain.com"}
     # ]
    dns_default_domain:                       { default: "lan",
                                                dependency: "{{dns_enabled}}" },

    # This enables dhcp for 'dnsmasq' or 'pihole'
    dhcp_enabled:                             { default: "{{dhcp_type is defined}}" },                              # enabled by define a 'dhcp_type'
    dhcp_type:                                { optional: yes },                                                    # 'dnsmasq' or 'pihole' (pihole_ip must be defined)
    dhcp_range_start:                         { default: "{{default_server_subnet}}.151",
                                                dependency: "{{dhcp_enabled}}" },
    dhcp_range_end:                           { default: "{{default_server_subnet}}.200",
                                                dependency: "{{dhcp_enabled}}" },
    dhcp_reservations:                        { default: [],                                                        # dhcp entries
                                                dependency: "{{dhcp_enabled}}" },
     # *** EXAMPLE for dhcp_reservations ***
     # [
     #     { mac: 12:34:56:78:90:11, ip: {{default_server_subnet}}.73, hostname: tv-livingroom, custom_dns: ["smarttv"]}
     # ]
    dhcp_dns_server:                          { default: "{{ pihole_ip if pihole_ip is defined else default_server_ip }}",
                                                dependency: "{{dhcp_enabled}}" },

    # Pihole and dlna ip's should be part of a contiguous area at the end of your server network
    # This contiguous area is configured as a subnet which is routed completely to a virtual macvlan bridge interface and is not usable for other device ip's anymore
    pihole_enabled:                           { default: "{{pihole_ip is defined}}" },
    pihole_ip:                                { optional: yes },                                                    # pihole ip address from same network as your server ip
    pihole_ipv6:                              { optional: yes,                                                      # pihole ipv6 address from same network as your server ip
                                                dependency: "{{pihole_enabled}}" },
    pihole_whitelist_domains:                 { default: [ "www.googleadservices.com", "analytics.google.com", "clickserve.dartsearch.net", "ad.doubleclick.net" ],
                                                dependency: "{{pihole_enabled}}" },                               # domains are needed to use google search results
    pihole_addlist_urls:                      { default: [ "https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts", "https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-only/hosts", "https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/gambling-only/hosts" ],
                                                dependency: "{{pihole_enabled}}" },
    pihole_password:                          { dependency: "{{pihole_enabled}}" },                               # used to login into pihole
    # *** END DNS SERVER                                                               ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # *** BEGIN VPN                                                                    ***
    # Used in generic optional role 'wireguard_mobile'
    # Roles:
    # - 'wireguard_mobile'
    mobile_vpn_enabled:                       { default: "yes" },                                                   # enabled by default
    mobile_vpn_internal_port:                 { default: "51828",
                                                dependency: "{{mobile_vpn_enabled}}" },                           # the port, used on your server
    mobile_vpn_public_port:                   { dependency: "{{mobile_vpn_enabled}}" },                           # the public port, reachable from outside. (e.g. forwarded port on your dsl router)
    # to complete the setup you have to configure port forwarding on your internet router where you forward the public port to your internal port
    # *** END VPN                                                                      ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # *** BEGIN DATABASES                                                              ***
    # Roles:
    # - 'influxdb'
    influxdb_enabled:                         { default: yes },                                                     # enabled by default, be careful with disabling and check dependencies before.
    influxdb_admin_username:                  { default: "admin",                                                   # used to login into influxdb webui
                                                dependency: "{{influxdb_enabled}}" },
    influxdb_admin_password:                  { dependency: "{{influxdb_enabled}}" },
    influxdb_admin_token:                     { dependency: "{{influxdb_enabled}}" },                             # "lkjfdh7123kjas" => token used for internal command line operations

    # Roles:
    # - 'mysql'
    mysql_enabled:                            { default: yes },                                                     # enabled by default, be careful with disabling and check dependencies before.
    shared_mysql_username:                    { default: "shared",                                                  # used for internal data
                                                dependency: "{{mysql_enabled}}" },
    shared_mysql_password:                    { dependency: "{{mysql_enabled}}" },

    # Roles:
    # - 'redis'
    redis_enabled:                            { default: yes },                                                     # enabled by default, be careful with disabling and check dependencies before.

    # Roles:
    # - 'mosquitto'
    mosquitto_enabled:                        { default: yes },                                                     # enabled by default, be careful with disabling and check dependencies before.
    # *** END DATABASES                                                                ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # *** BEGIN DLNA SERVER                                                            ***
    # Roles:
    # - 'minidlna'
    dlna_enabled:                             { default: "{{dlna_ip is defined and ( dlna_volumes | length ) > 0}}"},
    dlna_ip:                                  { optional: yes },                                                    # dlna ip address from same network as your server ip
    dlna_ipv6:                                { optional: yes,
                                                dependency: "{{dlna_enabled}}" },                                   # dlna ipv6 address from same network as your server ip
    # *** END DLNA SERVER                                                              ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # *** BEGIN NEXTCLOUD                                                              ***
    # Roles:
    # - 'nextcloud'
    # - 'nextcloud_libreoffice'
    nextcloud_enabled:                        { default: yes,                                                       # enabled by default
                                                requirement: "mysql_enabled,redis_enabled" },
    nextcloud_instance_id:                    { dependency: "{{nextcloud_enabled}}" },                            # "234sdgzw87399443s" => used internally
    nextcloud_password_salt:                  { dependency: "{{nextcloud_enabled}}" },                            # "9ad9aus92z4ij20j20idj928912hd1jd0"
    nextcloud_secret:                         { dependency: "{{nextcloud_enabled}}" },                            # "890w3hf083hfuishf8834uf938jtoi23j3r928ur982rj2in3diuhe2u1423984uu23jh4ji23n2ji3nd23092i293u20293r9jujiuaawf"
    nextcloud_mysql_username:                 { default: "nextcloud",                                               # used for nextcloud data
                                                dependency: "{{nextcloud_enabled}}" },
    nextcloud_mysql_password:                 { dependency: "{{nextcloud_enabled}}" },
    nextcloud_admin_username:                 { default: "admin",                                                   # used to login as a nextcloud data
                                                dependency: "{{nextcloud_enabled}}" },
    nextcloud_admin_password:                 { dependency: "{{nextcloud_enabled}}" },
    nextcloud_additional_apps:                { default: [],                                                        # additional apps for nextcloud
                                                dependency: "{{nextcloud_enabled}}" },
    # *** EXAMPLE for nextcloud_additional_apps ***
    # [
    #     {
    #         "app: { optional: yes },                                                                              # app id. e.g. "cookbook"
    #         "name: { optional: yes },                                                                             # webui menu name. e.g. "Cookbook"
    #         "description: { optional: yes },                                                                      # webui menu info. e.g. "Recipes"
    #         "icon: { optional: yes },                                                                             # webui icon. e.g. "icons/nextcloud_cookbook.svg"
    #
    #         "usergroups: { default: [] }                                                                          # optional. limit visibility to specific groups or users. e.g. ["admin", "user", "<username>"]
    #         "order: { default: 200 }                                                                              # optional. control order in webui menu
    #     }
    # ]
    # *** END NEXTCLOUD                                                                ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # *** BEGIN OPENHAB                                                                ***
    # Roles:
    # - 'openhab'
    # - 'openhab_toolbox'
    openhab_enabled:                          { default: yes,                                                       # enabled by default
                                                requirement: "mysql_enabled,influxdb_enabled,mosquitto_enabled" },
    openhab_config_git:                       { dependency: "{{openhab_enabled}}" },                              # a cloned git url of "https://github.com/HolgerHees/openhab-config.git"
    openhab_mysql_username:                   { default: "openhab",                                                 # used for openhab data
                                                dependency: "{{openhab_enabled}}" },
    openhab_mysql_password:                   { dependency: "{{openhab_enabled}}" },
    # *** END OPENHAB                                                                  ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # *** BEGIN CAMMERA SERVICE                                                        ***
    # Roles:
    # - 'camera_service'
    # - 'camera_ftp'
    camera_enabled:                           { default: "{{camera_devices | length > 0}}" },                       # enabled if there are camera devices configured
    camera_devices:                           { default: [] },                                                      # used for ftp upload, image gallkery and menu entries
    # *** EXAMPLE for camera_devices ***
    # [
    #     {
    #         uid: {},                                                                                              # unique identifier for this device. Will be used to generate proxy urls like /camera{uid | capelized}Image
    #         name: {},                                                                                             # menu and gallery name
    #         details: { optional: yes },                                                                           # additional details like brand name
    #         ftp_upload_name: { optional: yes },                                                                   # the folder name where alert images are uploaded int the ftp folder (it is just the subfolder name, not the whole path)
    #         snapshot_url: {},                                                                                     # external url to get a snapshot/preview image
    #         snapshot_username: { optional: yes }                                                                  # username to authenticate external url
    #         snapshot_password: { optional: yes }                                                                  # password to authenticate external url
    #     }
    # ]
    camera_ftp_username:                      { dependency: "{{camera_enabled}}" },                               # "ftp" => used for e.g. camera image uploads ('optional' means disabled is not defined)
    camera_ftp_password:                      { dependency: "{{camera_enabled}}" },
    camera_ftp_max_file_age:                  { default: "{{2 * 24 * 60}}",                                         # images, older then 2 days are discarded
                                                dependency: "{{camera_enabled}}" },
    # **** END CAMERA SERVICE                                                          ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # **** BEGIN UPDATE SERVICE                                                        ***
    # Roles:
    # - 'update_service'
    update_service_enabled:                   { default: "{{ update_service_software_check_enabled or update_service_system_check_enabled}}" }, # enabled is system check or software check
    update_service_software_check_enabled:    { default: yes },                                                     # enables the update check for software (version check of running containers) used inside deployment roles / container
    update_service_software_check_email:      { optional: yes,                                                      # "testadmin@test.com" => sends a notification email after each check, if new software is available
                                                dependency: "{{update_service_software_check_enabled}}" },
    update_service_system_check_enabled:      { default: yes },                                                     # enables the update check (os updates or smartserver updates) for this deployment
    update_service_system_check_email:        { optional: yes,                                                      # "testadmin@test.com" => sends a notification email after each check, if new smartserver deployment updates are available
                                                dependency: "{{update_service_system_check_enabled}}" },
    # **** END UPDATE SERVICE                                                          ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # **** BEGIN SYSTEM SERVICE                                                        ***
    # Roles:
    # - 'system_service'
    system_service_enabled:                   { default: yes,                                                       # enabled by default
                                                requirement: "influxdb_enabled,mosquitto_enabled" },

    system_service_fping_test_hosts:          { default: [ "8.8.8.8" ],                                             # reachability check in system_service
                                                dependency: "{{system_service_enabled}}" },

    system_service_default_isp:               { default: {},                                                        # is used to detect a fallback internet connection in system_service
                                                dependency: "{{system_service_enabled}}" },
    # *** EXAMPLE for default_isp ***
    # {
    #     org: [ ".+ Sverige AB" ],                                                                                 # external ip must be registered to a organisation or isp named ".+ Sverige AB"
    #     hostname: [ ".+d1-online\\\\.com" ],                                                                      # external ip must be resolved to a spcific dns name
    #     ip: [ "185\\\\.89\\\\.36\\\\.[0-9]{1-3}" ]                                                                # fixed external ip ranges
    # }

    system_service_traffic_blocker:           { default: yes,                                                       # enabled or disabled automatic ip blocking based on several decissions (additionally there must be a propper configured 'netflow_incoming_traffic' variable)
                                                dependency: "{{system_service_enabled}}" },
    # 1. if suspicious traffic arrives the apache webserver => which traffic, can be configured in the variable 'netflow_incoming_traffic' and the attribute 'log'
    # 2. if unexcpected traffic arrives the network  => which traffic, can be configured  in the variable 'netflow_incoming_traffic' and the attribute 'allowed'
    system_service_netflow_collector:         { default: no,                                                        # enable netflow collector in system_service
                                                dependency: "{{system_service_enabled}}" },
    system_service_netflow_incoming_traffic:  { default: [],                                                        # from internet expected and allowed traffic, (used to detect netflow traffic direction and for traffic blocker to decide which traffic is suspicious)
                                                dependency: "{{system_service_enabled}}" },
    # *** EXAMPLE for netflow_incoming_traffic ***
    # {
    #   { target: "{{production_ip}}:80", name: "http", allowed: { hostname: [ ".+\\\\.internetnord\\\\.de", ".+letsencrypt\\\\.org" ] }, log="apache" }, # Letsencrypt, CLOUD PING Test
    #   { target: "{{production_ip}}:10114", name: "alexa api", allowed: { org: [ "AWS EC2 .+" ] }, log="apache" }, # ALEXA
    #   { target: "{{production_ip}}:51820", name: "wireguard", allowed: { wireguard_peers: [ "check" ] } }, # system check for connected wireguard peers
    #   { target: "{{production_ip}}:456", name: "test", allowed: { ip: [ "185\\\\.89\\\\.36\\\\.[0-9]{1-3}" ] } }, # Fixed IP range test
    # }
    #
    # *** Attibute Explanation ***
    # 'logs' => "apache" means, traffic to this 'target' is additionally collected and analysed from apache logs
    # 'allowed' => various regexes agains hostnames, org (ISP) or ip to mark traffic as normal. Type 'wireguard_peers' means the traffic ip is compared with active wireguard endpoints
    # 'name' is just used as an identifier
    # 'target' is a combination of the target ip and port number
    system_service_speedtest_server_id:       { default: "auto",                                                    # used for speedtest
                                                dependency: "{{system_service_enabled}}" },

    system_service_openwrt_api_username:      { default: "api",                                                     # will be used to fetch network structure related data from openwrt
                                                dependency: "{{system_service_enabled and openwrt_devices | length > 0}}" },
    system_service_openwrt_api_password:      { dependency: "{{system_service_enabled and openwrt_devices | length > 0}}" },
    #"vault_openwrt_root_password:             { optional: yes, dependency: "{{system_service_enabled and openwrt_devices | length > 0}}" },

    system_service_fritzbox_api_username:     { default: "api",                                                     # will be used to fetch network structure related data from avm fritzbox
                                                dependency: "{{system_service_enabled and fritzbox_devices | length > 0}}" },
    system_service_fritzbox_api_password:     { dependency: "{{system_service_enabled and fritzbox_devices | length > 0}}" },
    # **** END SYSTEM SERVICE                                                          ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # **** BEGIN BACKUP SYNC                                                           ***
    # This service runs a sync of a local source folder to local or remote destination folder
    # Roles:
    # - 'backup_sync'

    backup_sync_enabled:                      { default: "{{backup_syncs is defined and backup_syncs | length > 0}}" },
    backup_syncs:                             { optional: yes },

    # The most flexible type is rclone https://rclone.org/. It supports different backends like S3, GoogleDrive Micrsofot OneDrive etc https://rclone.org/overview/
    # The MAIN LIMITATION is, it support metadata like, creation date, modification data, owner and group only for files and only if it is a supported remote backend or local backend
    # - check https://rclone.org/docs/#metadata and https://rclone.org/overview/#features
    # If you use a custom destination like "mygoogledrive:/" (2. example) you have to create a configuration in '/opt/backup_sync/config/rclone/mybackup.conf' with a '[mygoogledrive]' part in it.

    # *** EXAMPLE rclone for backup_syncs ***
    # [
    #   {
    #     name: "smartserver",                                                                                      # sync name (mandatory)
    #     type: "rclone",                                                                                           # sync tool (mandatory)
    #     schedule: { hour: "0", minute: "0" },                                                                     # time to run (mandatory)
    #     destination: "{{backup_path}}smartserver/",                                                               # sync destination (mandatory and can be any type of remote, supported by rclone)
    #     sources: [                                                                                                # source config (mandatory, at least one)
    #       {
    #         path: "{{base_path}}",                                                                                # source directory to sync (mandatory)
    #         filter: [ "- /var/**", "- /tmp/**" ]                                                                  # filter based on rclone filter terms (optional)
    #       },
    #       {
    #         path: "{{base_path}}",  filter: [ "- /var/lib/docker/**", "- /var/lib/ci_service/**", "+ /var/**", "+ /tmp/**" ],
    #         options: [ "--local-no-check-updated" ]                                                               # can be any rclone option (optional)
    #       }
    #     ],
    #     bandwidth_limit: "10M"                                                                                    # bandwidth limitation (optional)
    #   },
    #   {
    #     name: "mybackup",
    #     type: "rclone",
    #     schedule: { hour: "2", minute: "0" },
    #     password: "{{vault_backup_password}}",                                                                    # password (optional and delegated to a separate encrypted variable)
    #     destination: "mygoogledrive:/backup",
    #     sources: [
    #       {
    #         name: "data",                                                                                         # source name (optional)
    #         path: "{{backup_path}}", filter: [ "- /smartserver/**" ] },
    #       { name: "nextcloud", path: "{{nextcloud_data_path}}", filter: [ "- /appdata**", "- /updater**" }
    #     ],
    #     bandwidth_limit: "02:00,30M 05:00,20M 06:00,5M 23:00,10M"                                                 # time depending bandwidth limitation (optional)
    #   }
    # ]

    # Instead of rclone, you can also force rsync as a sync tool. It has some limitations as also some advantages
    # It can only sync local to local folders. But the advantages is, it supports metadata for files and folder

    # *** EXAMPLE rsync for backup_syncs ***
    #   {
    #     name: "smartserver",
    #     type: "rsync",
    #     schedule: { hour: "0", minute: "0" },
    #     destination: "{{backup_path}}smartserver/",
    #     sources: [
    #       {
    #         path: "{{base_path}}",
    #         filter: [ "- /var/**", "- /tmp/**" ] },                                                               # filter based on rsync filter terms (optional)
    #       {
    #         path: "{{base_path}}",
    #         filter: [ "- /var/lib/docker/**", "- /var/lib/ci_service/**", "+ /var/**", "+ /tmp/**" ],
    #         options: [ "--local-no-check-updated" ]                                                               # can be any rsync option (optional), "--local-no-check-updated" is not a rsync option, but supported too.
    #       }
    #     ],
    #     bandwidth_limit: "10M"                                                                                    # bandwidth limitation (optional) !!! Time depending limitation is not supported !!!
    #   }
    # ]


    # !!! DETAILS about source names !!!
    # If a source contains a name, a subfolder with that name is created in destination (2. Example). Otherwise it is merged (1. example)
    # Mixing of sources with a name and sources without a name is not supportedand with raise an error

    # **** END BACKUP SYNC                                                             ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # **** BEGIN INHOUSE SPEEDTEST SERVICE                                             ***
    # This service provides a speedtest like https://www.speedtest.net/ but localy hosted to messure inhouse network speed
    # Additionally, it provides a iperf (https://en.wikipedia.org/wiki/Iperf) endpoint
    # Roles:
    # - 'speedtest'
    speedtest_enabled:                        { default: yes },                                                     # enabled by default
    # **** END INHOUSE SPEEDTEST SERVICE                                               ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # *** BEGIN WEATHER SERVICE                                                        ***
    # There are 3 modes how you can run weather service. Local mqtt mode and cloud mqtt mode and dummy mqtt mode
    # 1. If you enable weather service, you run the local mqtt mode by default. Here you fetch the data from openmeteo and published via the local mqtt to the weather consumer
    # 2. If you specify the weather_mqtt_server as 'cloud_mosquitto' you can share the data with an additional cloud instance.
    # 3. The third dummy mqtt mode is only a fallback for cases where the local mqtt service is disabled.
    # The reason why it is based on mqtt, because the data can be shared with friend via the cloud service or other services like openhab
    # Roles:
    # - 'weather_service'
    weather_service_enabled:                  { default: yes,                                                       # enabled by default
                                                requirement: "mysql_enabled" },
    weather_api_provider:                     { default: "openmeteo",                                               # 'openmeteo' (https://open-meteo.com/), 'meteogroup' (https://api.weather.mg/ => needs credentials) or 'listener'
                                                dependency: "{{weather_service_enabled}}" },
    weather_mqtt_server:                      { default: "{{'mosquitto' if mosquitto_enabled else 'dummy'}}",       # 'mosquitto', 'cloud_mosquitto' or 'dummy'
                                                dependency: "{{weather_service_enabled}}" },
    weather_mqtt_publish_topic:               { default: "{{server_name}}",
                                                dependency: "{{weather_service_enabled and weather_api_provider != 'listener'}}" }, # the main topic prefix where you publish weather data
    weather_api_username:                     { dependency: "{{weather_service_enabled and weather_api_provider == 'meteogroup'}}" },
    weather_api_password:                     { dependency: "{{weather_service_enabled and weather_api_provider == 'meteogroup'}}" },
    # *** END WEATHER SERVICE                                                          ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # **** BEGIN GUEST WIFI BARCODE GENERATOR                                          ***
    # This generates a webui menu entry which shows a barcode, to make it easy for your guests to connect
    # Roles:
    # - 'weather_service'
    guest_wifi_enabled:                       { default: "{{wifi_networks is defined and wifi_networks | length > 0}}" },
    wifi_networks:                            { optional: yes },
    # {
    #     test1: { password: "1234", type: "public" },
    #     test2: { password: "3456", type: "intern" }
    # }
    # **** END GUEST WIFI BARCODE GENERATOR                                            ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


    # ####################################################################################
    # ### BELOW ARE BY DEFAULT NOT INCLUDED ROLES                                      ###
    # ### 1. They are activated it they are imported manually in your custom roles.yml ###
    # ### 2. You have to configure related variables below                             ###
    # ####################################################################################


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # *** BEGIN PRIVATE CLOUD SERVICE                                                  ***
    # This service provides a private cloud network between several smartserver instances share data and backups
    # Roles:
    # - 'wireguard_cloud'
    # - 'cloud_nfs'
    # - 'cloud_mosquitto'
    # - 'cloud_check'
    # Related variable is 'cloud_vpn'
    # *** EXAMPLE ***
    # cloud_vpn: {
    #    name: "peer1",
    #    interface: { address: "{{vpn_cloud_subnet}}.0.1", port: "51829", network: "{{vpn_cloud_subnet}}.1.0/24" },
    #    peers: {
    #         peer2: { address: "{{vpn_cloud_subnet}}.0.2", port: "51829", network: "{{vpn_cloud_subnet}}.2.0/24", host: "public.peer2.com", notification_email: "test@peer2.com" },
    #         peer3: { address: "{{vpn_cloud_subnet}}.0.3", port: "51829", network: "{{vpn_cloud_subnet}}.3.0/24", host: "public.peer3.com", notification_email: "test@peer3.com" }
    #    }
    # }
    # *** END PRIVATE CLOUD SERVICE                                                    ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # **** BEGIN OPENWRT CONFIG GENERATOR                                              ***
    # The role is used to preprocess and generate openwrt configurations which can be deployed to openwrt devices like access points, gateways or switches
    # The openwrt configurations can be found in {{global_etc}}openwrt/ap/ including a script 'deploy.sh'
    # Related role is
    # - 'openwrt'
    # Related variable 'network_devices' which is preprocessed into 'openwrt_devices' end of this config file
    # *** EXAMPLE ***
    # network_devices: [
    #    {
    #       host: "{{default_server_subnet}}.1",
    #       name: "Gateway",
    #       type: "openwrt",
    #       config: { roles: ["gateway"], features: [ "ipv6-to-hosts", "softflowd", "ddns" ], install_packages: "kmod-usb-net-cdc-ether usb-modeswitch", remove_packages: [ "ntpclient" ] }
    #    },
    #    {
    #       host: "{{default_server_subnet}}.137",
    #       name: "Wlan AP Garden",
    #       type: "openwrt",
    #       config: { roles: ["ap"], features: [ "custom_ap" ] }
    #    }
    # ]
    # openwrt_api_username: "<api_username>"
    # openwrt_api_password: "<api_password>"
    #
    # **** END OPENWRT CONFIG GENERATOR                                                ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # **** BEGIN CI SERVICE                                                            ***
    # This services runs various continues integration deployments in a virtual machine on suse, alma and ubuntu
    # Roles:
    # - 'ci_service'
    # **** END CI SERVICE                                                              ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # **** BEGIN VCONTROLD SERVICE                                                     ***
    # This service communicates with Viessmann heating systems and published values and cmd's to mosquitto
    # Roles:
    # - 'vcontrol'
    # Related variables are 'vault_deployment_config_git' and 'vault_deployment_token_git'
    # **** END VCONTROLD SERVICE                                                       ***
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
}

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# **** BEGIN DYNAMIC VARIABLES                                                     ***

# Theese variables are generated dynamicly in 'roles/base/tasks/init.yml' based on detected environment

# has_encrypted_vault                       yes/no

# is_suse                                   yes/no
# is_fedora                                 yes/no
# is_rhel                                   yes/no
# is_ubuntu                                 yes/no
# os_type                                   rhel/fedora/ubuntu/opensuse

# is_production                             yes/no

# default_server_ip                         Default IPv4 Address
# default_server_gateway                    Default IPv4 Address
# default_network_interface                 Default Interface name like 'eth0'
# default_server_arpa                       Default reversed IPv4 Address
# default_server_subnet                     Default Subnet like 192.168.0
# default_server_network                    Default Network like 192.168.0.0/24
# host_server_network                       Network like 192.168.0.0/24 related to production_ip or staging_ip
#
# default_server_ipv6                       Default IPv6 Address
# default_server_gateway_ipv6               Default IPv6 Address
# default_server_network_ipv6               Default IPv6 Network
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# **** END DYNAMIC VARIABLES                                                       ***

project_name:                     "smartserver"

# version of alpine linux used in several container based roles
alpine_version:                   "3.19.1"

flask_version:                    "3.0.0"
flask_socketio_version:           "5.3.6"

htdocs_path:                      "{{base_path}}htdocs/"
global_etc:                       "{{base_path}}etc/"
global_tmp:                       "{{base_path}}tmp/"
global_build:                     "{{base_path}}build/"
global_log:                       "{{base_path}}var/log/"
global_lib:                       "{{base_path}}var/lib/"

projects_path:                    "{{data_path}}projects/"
cloud_path:                       "{{data_path}}cloud/"
deployment_path:                  "{{projects_path}}{{project_name}}/"
database_backup_path:             "{{backup_path}}databases/"

deployment_config_path:           "{{deployment_path}}{{config_path}}"
deployment_inventory_path:        "{{ansible_inventory_sources[0]}}"

nextcloud_data_path:              "{{data_path}}nextcloud/"

samba_master:                     "{%if is_production%}yes{%else%}no{%endif%}"

# used for e.g. openwrt's md5 password crypt
default_password_salt:            "{{((server_domain+':'+default_server_ip) | b64encode | replace(';','0') )[:-1]}}"

docker_base_network:              "172.16.0.0"
docker_base_gateway:              "172.16.0.1"
docker_dns_ip:                    "172.16.0.100"
docker_postfix_ip:                "172.16.0.101"
docker_influxdb_ip:               "172.16.0.103"
docker_redis_ip:                  "172.16.0.104"
docker_mysql_ip:                  "172.16.0.105"
docker_mosquitto_ip:              "172.16.0.106"
docker_speedtest_ip:              "172.16.0.107"
docker_libreoffice_ip:            "172.16.0.108"
docker_alertmanager_ip:           "172.16.0.109"
docker_loki_ip:                   "172.16.0.110"
docker_fluentd_ip:                "172.16.0.111"
docker_php_ip:                    "172.16.0.112"
docker_librenms_ip:               "172.16.0.113"
docker_prometheus_ip:             "172.16.0.114"
docker_grafana_ip:                "172.16.0.115"

docker_cloud_mosquitto_ip:        "172.16.0.200"
docker_weather_service_ip:        "172.16.0.201"
docker_cloud_check_ip:            "172.16.0.202"
docker_camera_ftp_ip:             "172.16.0.203"
docker_camera_service_ip:         "172.16.0.204"

docker_vcontrold_ip:              "172.16.0.230"

netgroup:                         "{{default_server_ip.split('.')[2]}}"

vpn_mobile_network:               "10.100.{{netgroup}}.0"
vpn_mobile_subnet:                "10.100.{{netgroup}}"

vpn_cloud_subnet:                 "10.101"
vpn_cloud_services:               "{
{% if cloud_vpn is defined %}
  \"local\": {
      \"bridge\": \"{{cloud_vpn.interface.network.split('.')[:3] | join('.')}}.1\",
      \"gateway\": \"{{cloud_vpn.interface.network.split('.')[:3] | join('.')}}.2\",
      \"nfs\": \"{{cloud_vpn.interface.network.split('.')[:3] | join('.')}}.3\",
      \"mosquitto\": \"{{cloud_vpn.interface.network.split('.')[:3] | join('.')}}.4\"
  },
  \"remote\": {
      {% for peer in cloud_vpn.peers %}
      \"{{peer}}\": {
          \"bridge\": \"{{cloud_vpn.peers[peer].network.split('.')[:3] | join('.')}}.1\",
          \"gateway\": \"{{cloud_vpn.peers[peer].network.split('.')[:3] | join('.')}}.2\",
          \"nfs\": \"{{cloud_vpn.peers[peer].network.split('.')[:3] | join('.')}}.3\",
          \"mosquitto\": \"{{cloud_vpn.peers[peer].network.split('.')[:3] | join('.')}}.4\"
      },
      {% endfor %}
  }
{% endif %}
}"

macvlan_ips:                      "[
{% if pihole_ip is defined %}'{{pihole_ip}}',{% endif %}
{% if dlna_ip is defined %}'{{dlna_ip}}',{% endif %}
]"

macvlan_range: "{% if macvlan_ips | length > 0 %}{{macvlan_ips | cidr_merge('span')}}{% else %}{% endif %}"

#- name: detect macvlan subnet
#  debug:
#    msg: "{{macvlan_range}}"

dlna_volumes:                    "{
{% for username in userdata %}
{% if userdata[username].media_dir is defined %}
{% for media_name in userdata[username].media_dir %}
  \"{{nextcloud_data_path}}{{username}}/files/{{userdata[username].media_dir[media_name]}}\": \"/media/{{media_name}}\",
{% endfor %}
{% endif %}
{% endfor %}
}"


librenms_devices: "{{network_devices | default([]) | selectattr('snmp_method', 'defined') | list}}"
openwrt_devices: "{{network_devices | default([]) | selectattr('type', 'defined') | selectattr('type','==','openwrt') | list}}"
fritzbox_devices: "{{network_devices | default([]) | selectattr('type', 'defined') | selectattr('type','==','fritzbox') | list}}"


